html_url,number,title,labels,state,locked,milestone,comments,created_at,updated_at,closed_at,author_association,state_reason,assignee.login,body,Target
https://github.com/facebook/react/issues/11947,11947,react-native-custom-tabs not return response,[],closed,FALSE,,1,2018-01-02T12:03:56Z,2018-01-02T13:06:24Z,2018-01-02T13:06:24Z,NONE,completed,,"I have created button to open CustonTabs to use external url into React-native app. external url have some forms that are submitted and return array as a response into another page i.e success page. I want to get response from success page into app and CustomTabs would be close automatically. code for custom tab:-

```
url = 'https://www.example.com/newtest.php';
CustomTabs.openURL(url,{ toolbarColor: '#607D8B',enableUrlBarHiding: true,showPageTitle: true,enableDefaultShare: true,animations: ANIMATIONS_SLIDE}).then((launched: boolean) => {                                             
console.log(`Launched custom tabs: ${launched}`);
}).catch(err => {
console.error(err)
}); 
```",Feature
https://github.com/facebook/react/issues/11955,11955,`react-call-return`: Expected to find a host parent.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null},{""id"":760751171,""node_id"":""MDU6TGFiZWw3NjA3NTExNzE="",""url"":""https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging"",""name"":""Difficulty: challenging"",""color"":""f2687c"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-01-03T15:16:26Z,2018-01-07T20:15:43Z,2018-01-07T20:15:43Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
A specific order of unmounting and remounting `unstable_createReturn`s from `react-call-return` causes an invariant violation in `unmountHostComponents`.

**Reproduce**
The following sandbox example crashes with an invariant violation when both the `min` and `cycle` props are *odd* numbers greater than zero.

https://codesandbox.io/s/llyjz19rz7

**What is the expected behavior?**
The app does not crash and cycles the number of items in the list.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
`react` and `react-dom` versions 16.1 and newer, `react-call-return` version 0.5.0
",Bug
https://github.com/facebook/react/issues/11994,11994,i need to learn this ,[],closed,FALSE,,1,2018-01-08T20:11:17Z,2018-01-08T20:13:55Z,2018-01-08T20:13:55Z,NONE,completed,,what do i need to learn to get started with react js ,Support
https://github.com/facebook/react/issues/12002,12002,Add React.Children.isRenderable,[],closed,FALSE,,2,2018-01-10T16:05:12Z,2018-01-10T19:06:00Z,2018-01-10T16:56:04Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature

**Motivation:**
Given a component which gets props from `context` (e.g. it accepts props from Redux store via `connect` HoC) and renders either `null` or some React node by condition based on data from context it would be helpful to know outside the component whether it renders any markup or not. It would let us render wrappers for the component only if it is visible.

**Usage example:**
Let's say, we have a `FancyContainer` which wraps every child in a `FancyWrapper` (which can add margins, borders, animation etc).
```
<FancyContainer>
  <ConnectedComponent/>
  <ConnectedComponentConditionallyReturningNull/>
  <ConnectedComponent/>
</FancyContainer>
```
The `ConnectedComponent` doesn't accept props. It gets everything from `context`!
```
const FancyComponent = ({isNull}) => isNull ? null : <h1>Hello</h1>
const ConnectedComponent = connect((store) => ({isNull: !store.data}))(FancyComponent)
```
Without checking if a `ConnectedComponentConditionallyReturningNull` renders any markup we get an empty visible wrapper between first and third children and thus break styling.

React.Children.isRenderable would allow us to easily filter children without UI.
```
const FancyContainer = ({children}) =>
  React.Children.map(children, (child => 
    React.Children.isRenderable(child)
      ? <FancyWrapper>{child}</FancyWrapper>
      : child
  ))
```

**Why not just do X?**
We could achieve such behavior by passing a handler for the condition switch of the connected component, but this approach would break its encapsulation and it is not suitable for those library components which toggle their ""renderability"" internally.

We theoretically could use `:has` CSS pseudo selector (though it is not supported yet by any browser) and setting `ConnectedComponent`'s `display` property to `none` which would result in `FancyContainer` rendering invisible nodes. But if `FancyContainer` is itself wrapped in a `FancyWrapper` we then wouldn't be able to hide its styling.

We could try to manually find `<ConnectedComponent/>`'s node in DOM and if it doesn't exist remove `FancyWrapper` but that sound too messy and violates React's declarative nature. Also if data in `context` is dynamic (it usually is) we would then hide components while their data is still on the way from the server and might never reveal them when it is loaded to our `context` (maybe we could but with more mess).
",Feature
https://github.com/facebook/react/issues/12012,12012,React.Children.toArray and React.cloneElement do not work with portal elements,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2018-01-12T10:23:26Z,2020-01-19T01:48:55Z,2020-01-19T01:48:55Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

BUG or undefined behaviour

**What is the current behavior?**

Doing
```
React.Children.toArray(
  ReactDOM.createPortal(...)
)
```

fails with:
```
Objects are not valid as a React child (found: object with keys {$$typeof, key, children, containerInfo, implementation}). If you meant to render a collection of children, use an array instead.
```

Namely, the following complete snippet fails:

```jsx
import React from 'react';
import { render, createPortal } from 'react-dom';

const RenderChildren = ({ children }) => {
  children = React.Children.toArray(children)
  return <h1>Renders children with toArray: {children}</h1>
}


const App = () => ( 
  <RenderChildren name=""CodeSandbox"">
    {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}
  </RenderChildren>
);

render(<App />, document.getElementById('root'));
```

while the following one, which wraps the portal in another element works just fine

```jsx
import React from 'react';
import { render, createPortal } from 'react-dom';

const RenderChildren = ({ children }) => {
  children = React.Children.toArray(children)
  return <h1>Renders children with toArray: {children}</h1>
}


const App = () => ( 
  <RenderChildren name=""CodeSandbox"">
    <div>
        {createPortal(<div>rendered in portal</div>, document.getElementById('portal'))}
    </div>
  </RenderChildren>
);

render(<App />, document.getElementById('root'));

```
**What is the expected behavior?**
I am aware that `createPortal` is a new feature, but in the best case scenario it should be possible to use it everywhere other valid nodes are accepted.

The same thing is happening for `React.cloneElement(ReactDOM.createPortal(....))` - it's probably weird to try and clone a portal 😄  - but maybe we should specify in the `createPortal` documentation that it cannot be cloned, at least for now. Should I open a PR for that?

Let me know your thoughts

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I'm using React 16.*",Feature
https://github.com/facebook/react/issues/12021,12021,Add referrerPolicy to iframe for react 16,[],closed,FALSE,,1,2018-01-15T12:48:08Z,2018-01-15T12:50:35Z,2018-01-15T12:50:35Z,NONE,completed,,"Property 'referrerPolicy' does not exist on type 'DetailedHTMLProps<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>'.

see https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy

react@16.2.0
react-dom@16.2.0",Other
https://github.com/facebook/react/issues/12033,12033,Refs Must Have Owner Warning,[],closed,FALSE,,13,2018-01-17T09:11:10Z,2018-02-06T15:19:06Z,2018-01-28T13:14:22Z,NONE,completed,,"** Reporting a bug

The problem I'm having is in the interplay of several packages but I feel that the only package actually doing something wrong here is react.

Versions:
- react 16.2.0 (also happened with 15.something)
- node.js 7.9 (electron 1.7.10)
- windows 10

** Current behavior

I get the error message from here https://reactjs.org/warnings/refs-must-have-owner.html although none of the three explanations is true.
Actually react _is_ loaded twice but it's the same version and there is little I can do to prevent it.

What happens, as far as I can understand is this:
my application imports react from in two ways
  * application -> react
  * application -> node_modules/myapi -> react
both get the same react module from the same path.
However, the myapi module is installed via yarn link.
Now on case-insensitive filesystems, yarn link can cause the file path to have different caseing, i.e. my application is in C:/application but the resolved link (which node uses via require) is c:/application/... so the case of the drive letter changes for the api and everything _require_d from the api.

So even though I call ""require('react')"" both times I end up importing
C:/application/node_modules/react/...
and
c:/application/node_modules/react/...

which is obviously the same thing, yet it means react is loaded twice.

Now the ref that's triggering the error is also not added by me but by react-bootstrap which adds a string-ref.

So my code has no bug (I'm not using different react versions or different case when importing react _in my code_)
react-bootstrap doesn't do anything wrong (because string refs are still allowed).
node isn't doing anything wrong (since it documents that require isn't guaranteed to always return the instance.)
yarn isn't doing anything wrong (because on a case-insensitive filesystem there is nothing wrong with using different cases for the drive letter between link source and link target.)

react however relies on require always returning the same instance, which it can't.

**What is the expected behavior?**

React doesn't rely on behavior that is documented to be unreliable.",Other
https://github.com/facebook/react/issues/12035,12035,Bug? createPortal element's children don't print correct clientHeight properties etc,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,1,2018-01-17T22:06:21Z,2018-01-18T20:15:25Z,2018-01-18T20:15:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
could be a bug!

**What is the current behavior?**
The children div inside an element that is created by using createPortal does not show correct clientHeight or scrollHeight properties. It shows 0 for scrollHeight as is console-logged in the demo below.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/m43c7fce/1/

**What is the expected behavior?**
It should get correct scrollHeight etc properties. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/12041,12041,"Suppress message: ""Download the React DevTools for ...""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2018-01-18T15:08:02Z,2018-12-14T20:18:18Z,2018-01-19T10:02:00Z,NONE,completed,,"**feature/bug**

**What is the current behavior?**
React library logs either ""*Download the React DevTools for a better development experience: https://fb.me/react-devtools*"" or logs ""*Warning: The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools*"" if previous ""fix"" is employed.

**reproduce**
Run React site without production flag and without React DevTools extension installed.

**What is the expected behavior?**
No log output.

**Which versions of React**

React: 16.2.0

**Tried**
According to comment on #3877 the following should work in React >= 16.1.0.
```
      new webpack.DefinePlugin({
        '__REACT_DEVTOOLS_GLOBAL_HOOK__': '({ isDisabled: true })'
      }),
```
However this changes the log to:
""Warning: The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools""

Other fixes such as those from StackOverflow yield the same results: https://stackoverflow.com/a/42196820.

Also the plugin itself doesn't work for me because of https://github.com/facebook/react-devtools/issues/897. So installing it isn't an option, for me at least.

**TLDR**

I'm loving React. But logging the install note is a tad annoying. Previous fixes don't seem to work. So please provide an option to disable the log.
",Support
https://github.com/facebook/react/issues/12044,12044,Coalesce warnings for deprecated lifecycle hooks,[],closed,FALSE,,0,2018-01-18T20:44:46Z,2018-01-25T05:43:07Z,2018-01-25T05:43:07Z,COLLABORATOR,completed,bvaughn,"Coalesce warnings for deprecated lifecycle hooks and print single message after reconciliation (rather than one per component-type).

Relates to PR #12028 and [this comment](https://github.com/facebook/react/pull/12028#discussion_r162420575).",Bug
https://github.com/facebook/react/issues/12076,12076,update rollup-plugin-node-resolve to 3.0.0,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,9,2018-01-23T07:06:02Z,2018-09-01T12:04:16Z,2018-02-05T10:40:01Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

Just update rollup-plugin-node-resolve to 3.0.0

```
$ node scripts/rollup/build.js 
 BUILDING  react.development.js (umd_dev)
Error: options.skip is no longer supported — you should use the main Rollup `external` option instead
    at nodeResolve (/home/praveen/forge/node-react/node_modules/rollup-plugin-node-resolve/dist/rollup-plugin-node-resolve.cjs.js:34:9)
    at getPlugins (/home/praveen/forge/node-react/scripts/rollup/build.js:239:5)
    at createBundle (/home/praveen/forge/node-react/scripts/rollup/build.js:360:16)
    at rimraf (/home/praveen/forge/node-react/scripts/rollup/build.js:435:13)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)


```
**What is the expected behavior?**

We'd like to use rollup-plugin-node-resolve 3.0 in debian. We are packaging react as a dependency of gitlab 9.5 (so apt-get install gitlab works to setup a gitlab server). pr that removed this option https://github.com/rollup/rollup-plugin-node-resolve/pull/90

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

It is not dependent on react version, only its build dependency.",Feature
https://github.com/facebook/react/issues/12086,12086,Remove Component.childContextTypes / Component.contextTypes and PropTypes requirements for Context,[],closed,FALSE,,2,2018-01-24T05:38:51Z,2018-01-24T15:00:22Z,2018-01-24T15:00:22Z,NONE,completed,,"Since there is currently undergoing work (https://github.com/facebook/react/pull/11818) on the Context API, I feel like this may be a good time to bring this up.

----

In my projects, the design decision to not use `PropTypes` in our internal components was made early on, under the assumption that if we were to use `PropTypes`, we may as well go the whole way and use `flow` or `TypeScript` as well.

Enforcing a `PropType` declaration on a single React feature doesn't make much sense. If `PropTypes` are optional on `props`, why are they required on `context`?

To get around this enforcement, my components end up looking like the following:

```javascript
// makeContext.js
import PropTypes from 'prop-types';

const makeContext = (keys) => {
  const obj = {};
  keys.forEach((key) => {
    obj[key] = PropTypes.any;
  });
  return obj;
};

export default makeContext;
```

```javascript
// contextTypes.js
import makeContext from './makeContext';

export default makeContext([
  'someValue',
  'someOtherValue',
]);
```

```javascript
// ParentComponent.js
import contextTypes from './contextTypes';
import ChildComponent from './ChildComponent';

class ParentComponent extends React.Component {
  getChildContext() {
    return { someValue: 1, someOtherValue: false };
  }
  render() {
    return <ChildComponent />;
  }
}
ParentComponent.childContextTypes = contextTypes;
```

```javascript
// ChildComponent.js
import contextTypes from './contextTypes';

const ChildComponent = (props, { someValue }) => (
  <p>{someValue}</p>
);
ChildComponent.contextTypes = contextTypes;
```

----

As you can see, the declaration of both `childContextTypes` and `contextTypes` is essentially pointless, yet I am forced to do so because the API enforces it.

It seems that, much like `props` and `PropTypes`, it should be down to the developer to decide whether or not the rule should be enforced.",Feature
https://github.com/facebook/react/issues/12089,12089,Debug render-phase side effects in strict-mode for DEV,[],closed,FALSE,,4,2018-01-24T23:20:58Z,2018-01-25T22:30:54Z,2018-01-25T22:30:54Z,COLLABORATOR,completed,bvaughn,"Relates to PR #12083

Currently we double-invoke component `constructor`, `render`, `static getDerivedStateFromProps` and `setState` reducer functions if the `debugRenderPhaseSideEffects` feature flag is on. We should also do this if we're inside of a `StrictMode` subtree.

However, it is likely that the new `StrictMode` element will be present in production apps, so I believe it is important that it not negatively impact performance.

Strict warnings (like all warnings) only impact dev mode, but up until now the double-invoked lifecycles impact both dev and prod. This is actually a good thing at Facebook, since it helps us identify potential bugs in production and we can easily limit it to only impact developers, but I think it would complicate the story for external users because of the negative performance impact.

I propose that we continue to observe the `debugRenderPhaseSideEffects` flag for dev and prod (since this impacts Facebook only) but only double-invoke for ""strict"" mode in dev.

Enabling this behavior greatly complicates our incremental rendering tests ([see below](https://github.com/facebook/react/issues/12089#issuecomment-360517198) so I will also be converting these to be internal so they can explicitly override the feature-flag before running. I think this is okay since the tests that break all use the noop-renderer which is not published to NPM.",Bug
https://github.com/facebook/react/issues/12091,12091,Native ecmascript module for React and ReactDOM,[],closed,FALSE,,10,2018-01-25T09:38:31Z,2018-01-29T07:35:49Z,2018-01-25T11:35:13Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
This probably is a feature request since the root of this is considering the build tooling and questions on how to proceed with my efforts.

**What is the current behavior?**
No native ecmascript module output and the current build tools don't easily allow adding a  native ecmascript module build target.

While investigating a workflow using a native ecmascript module version of React (and ReactDOM) in browsers I found no implementation which outputs native ecmascript modules.
One can use a wrapped version of the transpiled versions with added export statements but transpiling would not be necessary for browsers supporting ecmascript modules natively.
Even spread operators are supported by these browsers although they're not fully supported by AST generators or other tools due to the fact that the spec for that isn't finalised.

After some test projects and different build tools I built a simple proof of concept which outputs ecmascript modules that can be used in modern browsers.
The challenge (and question I have) is that the tools and settings used in the POC contradict the current build settings and tools.
So I am wondering if this is something that can be added as a build target or that this is something that is better suitable for an external repo for the time being...

I would love to make this happen but I would like to hear if this is something that is deemed worth while and if so in what would be the preferred way of implementing this.
During my investigation I did not find an easy way of doing so without changing a considerable amount of code and build tooling. Making this a relatively high risk endeavour.
Webpack vs Rollup, different settings needed for Babel, and named exports instead of CommonJS module.exports pattern to name a few, and all the effects those have on the build process make this somewhat complex.

To clarify some things, these are links to the POC's:
repo which outputs native ecmascript modules for React and ReactDOM: https://github.com/wearespindle/react-ecmascript
repo with a minimal setup to test if a working app can be made these modules in a browser: https://github.com/PM5544/module-test

<!--
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** -->

**What is the expected behavior?**
Preferably a build target for native ecmascript modules.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
not relevant
",Support
https://github.com/facebook/react/issues/12101,12101,Access Component from child's instance?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,9,2018-01-26T10:15:55Z,2018-01-28T23:26:42Z,2018-01-28T13:24:28Z,NONE,completed,,"I am creating a [small, generic state management](https://github.com/franciscop/state) based on the `Proxy()` object. Now I am writing a React helper, but I've found an issue: to create the HOC I need access to `Component` from React. Looking at the [source code for Component](https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js) it doesn't seem like it can/should be a standalone function. This library should be able to be used independently, so making everyone download React is not feasible.

I have navigated through the [official HOC documentation](https://reactjs.org/docs/higher-order-components.html), past issues and Google but couldn't find any way to retrieve `Component` from the passed component to my HOC. This is the code I am working with (not yet in the repo linked above):

```js
// This will load the whole React independently of the project type
import { Component } from 'react';

const connect = (opts) => (Passed) => {
  return class WithState extends Component {
    // ...
  }
};

export default connect;
```

```js
// Note: assume this for Passed.js
import React, { Component } from 'react';
class Passed extends Component { ... }
export default connect()(Passed);
```

Now, I *did* find a hack to make this work, but it seems like one of the most fragile pieces of code I've ever written, relying on the differences between ES7 modules and CommonJS:

```js
const connect = (opts) => (Passed) => {
  const React = require('react');
  return class WithState extends React.Component {
    // ...
  }
};

export default connect;
```

This way it will only import React once the `connect()` is used, and `connect()` is the *React-exclusive* helper from my library. So my question/feature request is this: is it possible to access its constructor's parent (not just the child)? Could we make it possible somehow? Something like this would be ideal:

```js
// Is something like this possible?
const Component = Passed.super;
// or
const Component = Passed.constructor.super;
// or even (since a class is syntax sugar)
const Component = Passed.prototype.super;
```

I think that is not the way Javascript/React works, but I figured I will ask here since chances are you will know way better than me whether something like this is possible or not.



**Do you want to request a *feature* or report a *bug*?**
Request a feature I think",Support
https://github.com/facebook/react/issues/12106,12106,react-test-renderer: toTree() does not yet know how to handle nodes with tag=10,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710400704,""node_id"":""MDU6TGFiZWw3MTA0MDA3MDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer"",""name"":""Component: Test Renderer"",""color"":""006b75"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-01-27T15:52:20Z,2018-01-27T23:03:56Z,2018-01-27T23:03:55Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug.

**What is the current behavior?**

```js
  renderer.create(
    <Fragment>
      <Fragment>foo</Fragment>
    </Fragment>
  )
  .toTree()
```

> Invariant Violation: toTree() does not yet know how to handle nodes with tag=10

https://codesandbox.io/s/olky92m01y

**What is the expected behavior?**

returns a tree.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.2.0
",Bug
https://github.com/facebook/react/issues/12119,12119,"I have an error after deployed my react website, I am using react 16.2.0 and this is the error:",[],closed,FALSE,,3,2018-01-30T08:28:51Z,2018-03-01T14:38:35Z,2018-01-30T10:55:23Z,NONE,completed,,"![erreur1](https://user-images.githubusercontent.com/19607550/35555569-3bda9c38-05a8-11e8-80d6-80bf66ff2c51.png)

visit http://facebook.github.io/react/docs/error-decoder.html?invariant=44 for the full message or use the non-minified dev environment for full errors and additional helpful warnings.",Support
https://github.com/facebook/react/issues/12125,12125,How to fix Only secure origins are allowed with nginx?,[],closed,FALSE,,1,2018-01-31T08:12:37Z,2018-01-31T11:15:50Z,2018-01-31T11:15:50Z,NONE,completed,,"I don't want to use https.
thanks!",Support
https://github.com/facebook/react/issues/12130,12130,How to update State in a batch with react 16 from outside the render cycle?,[],closed,FALSE,,3,2018-02-01T06:22:20Z,2018-05-18T15:22:36Z,2018-02-01T10:40:33Z,NONE,completed,,"App has many state changes coming in from external sources. calling setState() for each **from outside the render cycle** hurts performance a lot, as each setState starts a new render cycle:

```
for_each (state_change in queued_state_changes) {
   state_change.target.setState(state_change.new_state); // each one starts a render cycle
}
```

What i would like to do is something like:
```
React.batchedUpdates(function() {
    for_each (state_change in queued_state_changes) {
        state_change.target.setState(state_change.state); 
    }});  // starts only one render cycle after updating all the states
```

How can i achieve this with react 16?",Support
https://github.com/facebook/react/issues/12140,12140,Safari 11 errors when using Fragment upon hydrating,[],closed,FALSE,,4,2018-02-02T15:24:12Z,2018-02-02T16:00:14Z,2018-02-02T15:57:46Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
This is a bug.

**What is the current behavior?**
Safari 11 (both Mac OS X and iOS) throws error 130:

```
Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.
```

I have not been able to make a reduced test case but I'm reporting this in hope that someone else also has this issue and is able to figure out what is the root cause.

Currently the best I have figured out is that when in **production** universal rendering scenario and using React.Fragment together with elements that use context (like a component connected to Redux) Safari 11 errors during client side hydration. For example, in one case I had code like this:

```jsx
    <Fragment>
        <div onClick={activateModal}>Open modal</div>
        {isModalActive && <Modal />}
    </Fragment>
```

Which errored in Safari 11 until I replaced the Fragment with a div. In this case the Modal component was also connected to Redux and returned node using `createPortal`.

In another scenario we have CMS content using a custom renderer where JSON is transformed for React rendering and with some components there is a complex context based logic where using Fragments anywhere causes error in Safari 11. Similarly the issue was fixed by replacing Fragment with a div or a span depending on case.

Currently the only things I have been able to track together is the use of Fragments and context. It is possible that the bug requires some other condition but we have a large complex project, and I'm not an Apple user, which complicates things for me. It is also very inconvenient that this bug only happens with production React and bundle which results in very unhelpful error messages.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
This is my current best **attempt** in isolating the issue, but it does **not** replicate it: https://codepen.io/Merri/pen/xYZKez

**What is the expected behavior?**
Safari 11 should not throw during hydrate when using a mixture of Fragment and context.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.2 (production only, no issue with development version)
Safari 11 (Safari 10 works fine)",Support
https://github.com/facebook/react/issues/12165,12165,Why can't we use both prevstate (function) + callback as parameters in setState()?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-02-06T17:06:28Z,2018-02-07T00:44:03Z,2018-02-07T00:44:03Z,NONE,completed,,,Support
https://github.com/facebook/react/issues/12169,12169,Prop to pass data to event handlers,[],closed,FALSE,,3,2018-02-07T02:15:48Z,2018-08-09T01:06:40Z,2018-08-09T01:06:40Z,NONE,completed,,"This is a feature request

My suggestion is to add a known prop that gets passed through to all handlers as the second parameter. This would eliminate the need for closures, inline binding, inline arrow functions, proxyEvent.target.dataset, etc.
```
handleClick(proxyEvent, eventData) {
  // do stuff with eventData...
}
<Component eventData={data} onClick={this.handleClick} />
```

Currently if we need to pass `data` through an event handler there are several ways...

Create a class method that returns a closure:
```
clickHandler(eventData) {
  return (proxyEvent) => {
    // do stuff with eventData
  }
}
<Button onClick={clickHandler(eventData)} />
```

use inline bind or arrow function
```
clickHandler(eventData, proxyEvent) {
  // do stuff with eventData
}
<Button onClick={this.clickHandler.bind(this, eventData)} />
<Button onClick={(proxyEvent) => clickHandler(eventData, proxyEvent)} />
```

AND

A not so intuitive alternative is to use `proxyEvent.target.dataset`
```
clickHandler(proxyEvent) {
    const eventData = datas
      .find(data => data.get('id') === proxyEvent.target.dataset.button);
    // do stuff with eventData...
}
<Button onClick={clickHandler} data-button={data.get('id')} />
```
If you pass an object to any `data-`prop it gets converted to a string. My immutable Map becomes `DOMStringMap {button: ""Map { ""id"": ""84280bcc-ab3b-45d5-8882-dc74a17da...` so I have to pass an ID and use it in the handler to find my data.
",Feature
https://github.com/facebook/react/issues/12171,12171,Remove use of Proxy for events in development,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,9,2018-02-07T08:17:56Z,2018-07-17T23:15:08Z,2018-07-17T23:14:14Z,MEMBER,completed,,"I think maybe we should revert https://github.com/facebook/react/pull/5947.

People already think `proxyEvent` is some kind of an API: https://github.com/facebook/react/issues/12169.

It's also annoying to view in the debugger because none of the properties show up.

Instead, we could seal the event object or something like that.",Bug
https://github.com/facebook/react/issues/12183,12183,Ref callbacks are not called at componentDidUpdate,[],closed,FALSE,,2,2018-02-08T09:22:33Z,2018-02-08T13:19:03Z,2018-02-08T13:18:04Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

[Refs documentation](https://reactjs.org/docs/refs-and-the-dom.html) states:
> ref callbacks are invoked before componentDidMount or componentDidUpdate lifecycle hooks.

However, it seems that no ref callback is called at all when update occurs.

Closest things similar are https://github.com/facebook/react/issues/12034, https://github.com/facebook/react/issues/9328, https://github.com/facebook/react/issues/11650.

I'm a bit confused, because it seems nobody ever experienced something like this, so I might be misunderstanding something.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/r52qonw0o

Here is a copy of the code in the link:

```
import React from ""react"";
import { render } from ""react-dom"";

const styles = {
  margin: ""20px auto"",
  padding: ""10px"",
  width: ""100px"",
  border: ""1px solid black"",
  ""text-align"": ""center"",
  cursor: ""pointer"",
};

class Test extends React.Component {
  test(e) {
    console.log(""Ref callback"");
  }

  constructor() {
    super();
    this.state = {
      number: 0
    };

    setTimeout(() => {
      this.setState({ number: Math.random() });
    }, 1000);

    this.update = this.update.bind(this);
  }

  update() {
    this.setState({ number: Math.random() });
  }

  componentDidUpdate() {
    console.log(""Updated"");
  }

  render() {
    return (
      <div onClick={this.update}>
        Testing componentDidUpdate with Ref callbacks
        <div ref={this.test} style={styles}>Click Me</div>
      </div>
    );
  }
}

class App extends React.Component {
  render() {
    return <Test />;
  }
}
render(<App name=""world"" />, document.getElementById(""root""));
```

**What is the expected behavior?**
""Ref callback"" should be logged just before ""Updated"" is logged.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tried several versions of React (15.6.1, 16.1.1, 16.2.0), with Chrome 64.
I'm running MacOS 10.13.3
",Other
https://github.com/facebook/react/issues/12184,12184,"to access refs, we recommend the callback pattern instead... How?",[],closed,FALSE,,4,2018-02-08T09:36:36Z,2018-02-08T13:14:18Z,2018-02-08T13:14:18Z,NONE,completed,,"What do you mean by that? Here https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs

> If you’re currently using this.refs.textInput to access refs, we recommend the callback pattern instead

What callback pattern do you mean? How do you mean to use it with refs?",Support
https://github.com/facebook/react/issues/12188,12188,Add oldProps as additional argument to getDerivedStateFromProps ?,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,TRUE,,14,2018-02-08T21:09:50Z,2018-03-31T15:14:13Z,2018-02-08T22:39:19Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

`getDerivedStateFromProps` only receives the nextProps and previousState as arguments.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

The deprecated `componentWillReceiveProps(nextProps)` used to allow code like `this.props.foo !== nextProps.foo`. With the new `getDerivedStateFromProps` function, there's no choice (because it is a static method) but to constantly copy `nextProps.foo` into state in order to access it later.

This is illustrated in the example posted to twitter by @gaearon: https://twitter.com/dan_abramov/status/953612246634188800?lang=en

**What is the expected behavior?**

Ideally (if it's not difficult to implement!) the `getDerivedStateFromProps` would also take the current (previous/old) props as an argument, something like:

`getDerivedStateFromProps(nextProps, prevState, prevProps)`

This would eliminate the need to constantly assign props to state purely for comparison purposes...

A quick look at the source doesn't make it clear to me how easy this would be though...

https://github.com/facebook/react/blob/4a20ff26ecfe9bc66941d79f7fce2c67be8ee236/packages/react-dom/src/server/ReactPartialRenderer.js#L456

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.0",Feature
https://github.com/facebook/react/issues/12197,12197,Warn on ComponentName.PropTypes,[],closed,FALSE,,1,2018-02-09T12:11:27Z,2018-02-09T12:27:50Z,2018-02-09T12:27:49Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Sometimes, when my boss is stressing me out, I add prop types this way:

```js
const MyButton = props => <button>{/* some fancy implementation */}</button>;
MyButton.PropTypes = { children: node.isRequired };
```

Notice the upper-case P in PropTypes. React does not warn me about this typo.

**What is the expected behavior?**

I'd love to get a warning about this (and `DefaultProps` for that sake) whenever I mis-type them.

I would actually love to implement a pull request for this, but I couldn't find anywhere else where you're warning about static properties like these. Where would you like me to put this code?",Other
https://github.com/facebook/react/issues/12214,12214,Warning: React.createElement: type is invalid -- expected a string,[],closed,FALSE,,28,2018-02-12T02:00:28Z,2022-08-03T15:13:12Z,2018-02-12T02:32:00Z,NONE,completed,,"I'm taking a tutorial to learn React JS, everything was fine, for days I could run an example, simple, carrying out a recommended basic configuration, plus a few more add-ons that I add to recognize the Javascript version.

After several days of no longer reviewing the project, but it is working correctly, when executing the command, I do not see any error, but it does not show anything in the browser, only multiple errors appear in the console of this one.

I have uninstalled and reinstalled reac and react-dom, and the problem still persists, try a new project cloning it from a friend, and it works normally, and it only copied the same structure of mine.

>Warning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.

>The above error occurred in one of your React components: Consider adding an error boundary to your tree to customize error handling behavior.



![issues](https://i.stack.imgur.com/brVbL.jpg)

![project structure](https://i.stack.imgur.com/zSovO.jpg)

### Packge.json

```
{
  ""name"": ""prueba"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""start"": ""node server.js"",
    ""dev"": ""concurrently \""node server.js\"" \""webpack -w\"" ""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""express"": ""^4.16.2"",
    ""react"": ""^16.2.0"",
    ""react-dom"": ""^16.2.0"",
    ""serve-static"": ""^1.13.1""
  },
  ""devDependencies"": {
    ""babel-core"": ""^6.26.0"",
    ""babel-loader"": ""^7.1.2"",
    ""babel-preset-es2015"": ""^6.24.1"",
    ""babel-preset-react"": ""^6.24.1"",
    ""concurrently"": ""^3.5.1"",
    ""eslint"": ""^4.9.0"",
    ""eslint-config-airbnb-base"": ""^12.1.0"",
    ""eslint-plugin-import"": ""^2.7.0"",
    ""webpack"": ""^3.10.0""
  }
}
```

### webpack.config.js
```
const path = require('path');

const config = {
    entry: './src/index.jsx',
    output: {
        path: path.resolve('js'),
        filename: 'bundle.js'
    },

    module: {
        rules: [
            {                
                test: /.jsx$/,
                use:{
                    loader:'babel-loader'
                }
            }
        ]
    }
}

module.exports = config;
```

### app.jsx
```
import React, {Component} from 'react';
import {render} from 'react-dom';

class App extends Component{
    render(){
        return(
            <div>                
                <h1>Mi Aplicacion React Js</h1>
                <h3>Probando la exportacion</h3>
            </div>
        )       
    }
}

export default App;
```

### index.jsx
```
import React, { Component } from 'react';
import { render } from 'react-dom';
import {App} from './components/app.jsx';

render(
    <App/>,
    document.getElementById('appStart')
)
```

### index.html
```
<!DOCTYPE html>

<html>

    <head>
        <meta charset=""utf-8"">
        <title>Aprendiendo React</title>
    </head>

    <body>
        <div id=""appStart""></div>
        <script src=""js/bundle.js""></script>
    </body>

</html>
```
",Support
https://github.com/facebook/react/issues/12228,12228,Issue with error boundaries and custom error types,[],closed,FALSE,,1,2018-02-14T22:38:35Z,2018-02-14T23:45:24Z,2018-02-14T23:45:24Z,NONE,completed,,"I think I may have found a bug in React.

I've defined a custom error type in a React application, which I'm throwing. I have an error boundary defined at the top of my application's component tree whose purpose is to catch uncaught errors and display an error page. The error boundary is catching the custom error, but isn't able to distinguish it from an error of type `Error`. Put simply, custom error types, created with the following syntax:

```
class CustomError extends Error {}
```

... are, from the error boundary's perspective, simply errors of type `Error`, not `CustomError`. Further illustration – even though I'm explicitly throwing a `CustomError`, the error boundary's `componentDidCatch` method thinks its error argument is of type `Error`.

```
componentDidCatch(error, info) {
  console.log(error instanceof Error); // true
  console.log(error instanceof CustomError); // false
  this.setState({
    hasError: true,
    error
  });
}
```

Am I crazy or is this a bug in React?

This issue is reproduced here: https://codepen.io/heywilly/pen/wyrKjz – the code is all documented, butin a nutshell, I've implemented an Application component that wraps its contents in an error boundary. A custom error is thrown from a subcomponent, and the custom typing gets lost somewhere along the way. That is, from the error boundary's perspective, the error that's thrown is of type `Error`, not the custom type defined in the application.

Also on StackOverflow: https://stackoverflow.com/questions/48777152/how-do-i-work-with-custom-error-types-in-react-error-boundaries/48792418

The expected behavior is that custom error types would be preserved as they crossed error boundaries.

Tested in React/ReactDOM 16.2.0, in Chrome 63.0.3239.132, MacOS 10.12.6.",Other
https://github.com/facebook/react/issues/12238,12238,New React component definition with autobind,[],closed,FALSE,,1,2018-02-16T23:54:31Z,2018-02-17T00:31:33Z,2018-02-17T00:31:33Z,NONE,completed,,"I don't know what exactly is planned, but auto bind for methods would be nice. Yeah, I know property initializers, still, a user should not have to think about that. I suppose a state should be stored in an object, not in a closure because of logs, and component should be an object ideally. Nevermind, feel free to close this ""issue"" without any explanation, I am just curious the reasoning behind a new design.",Support
https://github.com/facebook/react/issues/12271,12271,React 16's new error handling results in data loss on forms that react while typing,[],closed,TRUE,,1,2018-02-23T04:20:22Z,2018-02-24T00:04:48Z,2018-02-24T00:04:33Z,NONE,completed,,"As discussed here:
https://github.com/facebook/react/issues/11846

We have similar problems, if any error happens in ex. a textarea widget it'll unmount the entire app. Previously the user could copy and paste the text out of the form even if the page was behaving strangely or print it or whatever. Now any error anywhere in any part of the system (even a third party dependency or a browser feature) results in immediate data loss for the user. ex. a counter that shows the number of words as you type. If there was a bug in it then users would sometimes lose all the text they typed.

I totally understand the motivations for this feature and how it models native apps crashing, but it doesn't really work well (at least for us) with the web and tangle of third party dependencies that exist today. I can see how it works well for Facebook since they control every dependency and can fix bugs across all of them as needed. If you instead have a set of third party dependencies and one has a bug you can end up stuck where your app randomly breaks or shows blank to users. I guess you could put an error boundary around every widget in the entire page but that's hard to enforce and still results in data loss (just scoped).

My understanding is that we can't just render again per the discussion in the mentioned bug since it'd throw again, and because it destroys all the statefulness of the various browser widgets (ex. video or plugins).

Can this feature be made opt out?",Feature
https://github.com/facebook/react/issues/12274,12274,Warning invalid prop aria-labeledby on <a> tag element,[],closed,FALSE,,1,2018-02-23T08:45:48Z,2018-02-23T08:51:09Z,2018-02-23T08:51:09Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
React throws warning on use of aria-labeledby on `<a></a>`.

> warning.js:33 Warning: Invalid aria prop `aria-labeledby` on <a> tag. For details, see https://fb.me/invalid-aria-prop
![image](https://user-images.githubusercontent.com/11930567/36585430-2d037354-187e-11e8-9df4-0f4cb6ff81e0.png)


**What is the expected behavior?**
Wai-aria shows some ways of implementations on WACG 2.0 ARIA7  about <a aria-labeledby=""""></a>

Here you have link to this Aria technique.
https://www.w3.org/TR/WCAG20-TECHS/ARIA7.html 

And im developing website for use on android with talkback, and it runs fine with aria-labeledby and not with other attrs like aria-describedby.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React version: 16.2.0
Browser version: Chrome / Versión 64.0.3282.167 (Build oficial) (64 bits)
OS: Ubuntu 16.04
**Mobile extra info about talkback**
Android version: 7.1.1
Talkback version: 6.1.0
",Other
https://github.com/facebook/react/issues/12282,12282,Bensin,[],closed,FALSE,,2,2018-02-25T02:46:58Z,2018-02-25T02:51:02Z,2018-02-25T02:47:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/12285,12285,scripts/jest/matchers/toWarnDev: Expected and actual arguments to `jest-diff` are mixed up.,[],closed,FALSE,,0,2018-02-25T05:29:36Z,2018-06-08T12:18:23Z,2018-06-08T12:18:23Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

`toWarnDev` calls `jestDiff(a, b)` as `jestDiff(normalizedMessage, expectedMessages[0])` and `jestDiff([normalizedMessage], expectedMessages)`:
https://github.com/facebook/react/blob/94518b068bf52196abea0c83f4c9926bfe2065c6/scripts/jest/matchers/toWarnDev.js#L49-L57

[`jestDiff(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54) [calls](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93) [`diffStrings(a, b)`](https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251) where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).

https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L86-L90
```js
const getAnnotation = (options: ?DiffOptions): string =>
  chalk.green('- ' + ((options && options.aAnnotation) || 'Expected')) +
  '\n' +
  chalk.red('+ ' + ((options && options.bAnnotation) || 'Received')) +
  '\n\n';
```

**What is the expected behavior?**

`toWarnDev` should pass the expected values into `a`, the actual (received) values into `b` of `jestDiff`:
```js
jestDiff(expectedMessages[0], normalizedMessage)
```
```js
jestDiff(expectedMessages, [normalizedMessage])
```",Bug
https://github.com/facebook/react/issues/12292,12292,[CI] Danger failing with auth errors,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,1,2018-02-26T19:40:05Z,2018-02-27T00:35:09Z,2018-02-27T00:35:09Z,CONTRIBUTOR,completed,,See: https://github.com/facebook/react/pull/12291,Bug
https://github.com/facebook/react/issues/12301,12301,state change in td element,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,10,2018-02-27T08:05:21Z,2018-03-29T21:43:02Z,2018-03-27T22:57:11Z,NONE,completed,,"Displaying tabular rows, when setting data in td element, on state change it displays only the currently updated td element data..all the other ones go missing from screen. When the same thing is placed within text box in each td element things work fine.

Following is sample the code :

Working code :
`<tr key={id}> `
`<td> <input  value={this.state.price[id]}/> </td>`

Failing code :
`<tr key={id}> `
`<td> {this.state.price[id]} </td>`",Support
https://github.com/facebook/react/issues/12308,12308,Reset state,[],closed,FALSE,,2,2018-02-28T15:55:36Z,2018-03-27T22:56:45Z,2018-03-27T22:56:19Z,NONE,completed,,"I'd like to have a function that would reset all the state of react to start rendering from scratch again.

Currently, the code below causes a duplication of virtual dom. The React tab in devtools shows `<App />` node twice.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
```

It is possible to unmount it before the container element is lost to prevent the duplication of vdom.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
ReactDOM.unmountComponentAtNode(document.querySelector(""#app"")); // <--- unmount and remove

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));
```

However, sometimes it is difficult to bind to an event or change a router code in a legacy app where React is used for rendering a page. The page is destroyed when the router decides to change the page to another and React don't get the same container element again.

Since you can't call `ReactDOM.unmountComponentAtNode` before the change, nor after the change (before rendering) with the lost container element, it would be useful to have a function to reset all the React state before rendering the new page.

```
document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.render(<App />, document.querySelector(""#app""));

// page change

document.body.innerHTML = '<div id=""app""></div>';
ReactDOM.reset();  // <--- I don't care about the previous state, I want to render the component from scratch (as there would be no rendering before)
ReactDOM.render(<App />, document.querySelector(""#app""));
```

The name doesn't have to be called `reset` or be within `ReactDOM`. The point here is that the rendering should not duplicate virtual dom since the container element was changed.
",Support
https://github.com/facebook/react/issues/12312,12312,Why setState executes in setTimeout will become sync？,[],closed,FALSE,,5,2018-03-01T03:11:54Z,2018-12-03T14:56:22Z,2018-03-01T17:29:24Z,NONE,completed,,"```
componentDidMount(){
    setTimeout(() => {
            
            this.setState({ count: 1 }, () => {
                console.log(`banana`)
            })
            console.log(`lemen`)

            setTimeout(() => {
                console.log(`grape`)
            }, 0)

            this.setState({ count: 2 }, () => {
                console.log(`strawberry`)
            })

            console.log(`pear`)
        }, 0)
}
```
Why did lemen print behind banana?",Support
https://github.com/facebook/react/issues/12320,12320,filter JSON not working,[],closed,FALSE,,2,2018-03-02T14:28:36Z,2018-03-02T14:52:26Z,2018-03-02T14:48:32Z,NONE,completed,,"**How to filter data from one JSON call using http.get?**,

console says: _TypeError: Cannot read property 'toLowerCase' of undefined_

```
import React, { Component } from 'react';

import { BrowserRouter as Router, Route, Link } from ""react-router-dom"";
// import data from './datos.json';

// filter
function searchingData(product) {
  return function(x){
    // return x.first.toLowerCase().includes(product.toLowerCase()) || !product;
  }
}

class App extends Component {

  constructor(props){
    super(props);
    this.state = {
        items : [],
        product: ''
    };
    // You should bind this object to componentWillMount method, other setState was not working
    this.componentWillMount = this.componentWillMount.bind(this);
  }
  
  componentWillMount() {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(res => res.json())
      .then( data => this.setState({ items : data }) );
  }

  SearchWord(event) {
    this.setState({
      product: event.target.value
    })
  }

  // VIEW
  render() {
    
    // const items = this.state.items; 
    const {items, product} = this.state;

    return (
      <Router> 
        <div className=""App"">  

          {/* SHOW JSON */}

          {/* filter */}
          <input type=""text"" placeholder=""SEARCH DATA"" onChange={this.componentWillMount} value=""{product}"" /> 

          <ul>
            {
              items.filter(searchingData(product)).map(item =>
                <li key={item.title}>
                    {item.title}
                </li>
            )}
          </ul>        

        </div>
      </Router>
    );
  }
}

export default App;

```",Support
https://github.com/facebook/react/issues/12321,12321,React crashing with no error when using a component inside itself recursively,[],closed,FALSE,,2,2018-03-02T14:57:58Z,2018-03-27T22:46:02Z,2018-03-27T22:46:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
React should throw an error/warning when using a component inside itself (recursively)
I know this is an edge case, but nevertheless. I was mistakenly caught in it
```JavaScript
import React from ""react"";
import Hello, { Bug } from ""./Hello"";

export default ({ me }) => (me ? <Bug me /> : <Hello />);
```
Using a component inside itself breaks
**Waring**: this will crash ⚠️ your browser tab https://codesandbox.io/s/vy5ky3zwm5
Here is one that **will not**: https://codesandbox.io/s/l2q2415879
In order to reproduce: just un-comment `Bug` component
**What is the expected behavior?**
Not sure, but an error would be good if possible
",Support
https://github.com/facebook/react/issues/12340,12340,jsx's close tag name may optional?,[],closed,FALSE,,4,2018-03-07T11:40:07Z,2018-03-07T12:33:47Z,2018-03-07T12:33:47Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
```html
<div>
  <p>some text</p>
  <hr/>
</div>
```

**What is the expected behavior?**
because the html tag always pairs, so if simple write better?
```html
<div>
  <p>some text</>
  <hr/>
</>
```",Feature
https://github.com/facebook/react/issues/12343,12343,Use case:,[],closed,FALSE,,0,2018-03-08T05:28:19Z,2018-03-08T05:28:48Z,2018-03-08T05:28:48Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/12360,12360,addEventListener not working properly in componentDidUpdate,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,8,2018-03-13T04:27:21Z,2022-02-01T17:37:07Z,2018-08-02T19:42:16Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug!

**What is the current behavior?**
When I update event listeners by removing old listeners and adding new ones on an element obtained by React ref in `componentDidUpdate` (React 16.3 alpha), my handlers don't register properly. If I take out the part where I remove listeners, or put the whole thing inside a `setTimeout`, it works fine. **This worked fine when I was doing it in componentWillReceiveProps but I moved this part to componentDidUpdate for React 16.3.**

My code is kind of like:
```jsx
// does NOT work
componentDidUpdate(prevProps) {
  for (const eventType in prevProps.eventHandlers) {
    this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);
  }
  for (const eventType in this.props.eventHandlers) {
    this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);
  }
  // ...
}

// DOES work!
componentDidUpdate(prevProps) {
  // for (const eventType in prevProps.eventHandlers) {
  //   this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);
  // }
  for (const eventType in this.props.eventHandlers) {
    this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);
  }
  // ...
}

// DOES work!
componentDidUpdate(prevProps) {
  setTimeout(() => {
    for (const eventType in prevProps.eventHandlers) {
      this.audio.removeEventListener(eventType, prevProps.eventHandlers[eventType]);
    }
    for (const eventType in this.props.eventHandlers) {
      this.audio.addEventListener(eventType, this.props.eventHandlers[eventType]);
    }
  });
  // ...
}

render() {
  return <audio ref={a => this.audio = a} />;
}
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Unfortunately I can't reproduce in a simple example but you can check out and build the [`next`](https://github.com/benwiley4000/react-responsive-audio-player/tree/7235ba9908bbd493e431d123406fcee063a1eefc) branch of react-responsive-audio-player and run `npm run dev` to see the behavior (example.html adds a listener which should run when volume toggles from muted to unmuted). [`componentDidUpdate`](https://github.com/benwiley4000/react-responsive-audio-player/blob/next/src/AudioPlayer.js#L245) 

**What is the expected behavior?**

Listener adding should work fine

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I tested React 16.3-alpha.1. I think the issue also exists in React 15 - I was able to reproduce the problem locally with React 15 but I had to make some manual tweaks to create-react-context to make it backward compatible (I've now [published a polyfill](https://github.com/benwiley4000/react-dot-fragment) to make this sort of thing easier).",Other
https://github.com/facebook/react/issues/12361,12361,question about setTimeout effect of two  react demo,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,FALSE,,4,2018-03-13T11:42:46Z,2018-03-27T22:25:31Z,2018-03-27T22:25:21Z,NONE,completed,,"I am a react learner. I'm counfuse by two react demo
[demo1](https://8nv081l708.codesandbox.io/)
[demo2](https://xj4j54lk9z.codesandbox.io/)

>[demo1](https://8nv081l708.codesandbox.io/)

```js
import React from ""react"";

let num = 0;
export default class Hello extends React.Component {
  state = {
    loading: false,
    data: 0
  };
  componentDidMount() {
    // setTimeout(() => {
    // const button = document.getElementById('button');
    const button = this.button;
    console.log(""button first click"");
    button.click();
    console.log(""button second click"");
    button.click();
    // }, 3000);
  }
  delay = () => {
    const count = num++;
    console.log(""out"", count);
    this.setState({
      loading: true
    });

    setTimeout(() => {
      const data = Math.random() * 10;
      console.log(""in"", count);
      this.setState({
        data: data,
        loading: false
      });
    }, 1000);
  };
  render() {
    const { loading, data } = this.state;
    if (loading) {
      return <p>this is loading</p>;
    }
    return (
      <div>
        <p>{`data: ${data}`}</p>
        <p>
          <button
            id=""button""
            ref={ref => (this.button = ref)}
            onClick={this.delay}
          >
            update
          </button>
        </p>
      </div>
    );
  }
}
```

> [demo2](https://xj4j54lk9z.codesandbox.io/)
```js
import React from ""react"";

let num = 0;
export default class Hello extends React.Component {
  state = {
    loading: false,
    data: 0
  };
  componentDidMount() {
    setTimeout(() => {
      // const button = document.getElementById('button');
      const button = this.button;
      console.log(""button first click"");
      button.click();
      console.log(""button second click"");
      button.click();
    }, 3000);
  }
  delay = () => {
    const count = num++;
    console.log(""out"", count);
    this.setState({
      loading: true
    });

    setTimeout(() => {
      const data = Math.random() * 10;
      console.log(""in"", count);
      this.setState({
        data: data,
        loading: false
      });
    }, 1000);
  };
  render() {
    const { loading, data } = this.state;
    if (loading) {
      return <p>this is loading</p>;
    }
    return (
      <div>
        <p>{`data: ${data}`}</p>
        <p>
          <button
            id=""button""
            ref={ref => (this.button = ref)}
            onClick={this.delay}
          >
            update
          </button>
        </p>
      </div>
    );
  }
}

```

the only different code is in **componentDidMount()**
the console message is aslo different about two demo
> [demo1](https://8nv081l708.codesandbox.io/) result
![image](https://user-images.githubusercontent.com/17786362/37339919-3e4bf352-26f7-11e8-8c38-06064ba3b466.png)

> [demo2](https://xj4j54lk9z.codesandbox.io/) result
![image](https://user-images.githubusercontent.com/17786362/37339948-55f0bd6c-26f7-11e8-93b6-6a6e79df986d.png)
",Support
https://github.com/facebook/react/issues/12364,12364,Porting libraries from Preact [Question],[],closed,FALSE,,4,2018-03-13T17:55:20Z,2018-03-14T09:53:44Z,2018-03-13T18:51:27Z,NONE,completed,,"Hi, I just want to ask a question

Im a Preact user, never tryed React, I only did a course a couple of months ago. But now I have to use React for a project and I'm trying to port one of my libraries: https://github.com/k1r0s/preact-bind-group

This library aims for easy form setup
```jsx

<FormGroup watch={change => this.setState({ ...change })}>
      <div className=""field"">
         <label className=""label"">Email</label>
         <div className=""control"">
            <input data-bind=""mail"" className=""input""/>
         </div>
      </div>
     <div className=""field"">
      <label className=""label"">Contraseña</label>
      <div className=""control"">
         <input data-bind=""pass"" type=""password"" className=""input""/>
     </div>
  </div>
  <div>
     <a onClick={_ => this.doLogin(this.state)} className=""button is-primary"">Submit</a>
  </div>
</FormGroup>
```

My code works perfecly on Preact but Im facing issues on React, for example input is loosing focus everytime I time on the form rather than update field value.

This is the React example: https://codesandbox.io/s/9jv6n8mnrp

This is the Preact which is working: https://codesandbox.io/s/wmpv1o4z8

This library keeps an internal state to manage field values and events.. what Im doing wrong? help appreciated

",Support
https://github.com/facebook/react/issues/12372,12372,react 16.3 new context API basic intent,[],closed,FALSE,,1,2018-03-14T10:53:16Z,2018-03-14T13:25:59Z,2018-03-14T11:22:59Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
misunderstanding

**What is the current behavior?**
Impossible to render a component which is a provider furnished by createContext function
trying to follow those articles :  
[whats new in react](https://medium.com/@baphemot/whats-new-in-react-16-3-d2c9b7b6193b)
[react new context API](https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b)


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
[code sandBox example](https://codesandbox.io/embed/k591mqw98o)
sourceCode of codeSandBox :  
```
import React, { Component, createContext } from ""react"";
import { render } from ""react-dom"";

const CartState = createContext({
  open: false
});

class CartStateProvider extends Component {
  state = { open: false };

  render() {
    return (
      <CartState.Provider value={this.state.open}>
        {this.props.children}
      </CartState.Provider>
    );
  }
}

class App extends Component {
  render() {
    return (
      <div>
        <CartStateProvider>
          <CartState.Consumer>
            {({ open }) => {
              return <div>{open ? ""open"" : ""closed""}</div>;
            }}
          </CartState.Consumer>
        </CartStateProvider>
      </div>
    );
  }
}

render(<App />, document.getElementById(""root""));
```

**What is the expected behavior?**
It should render ""closed""

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
i'm testing with react 16.3.0-alpha.1, as it is new feature, it cannot work in previous releases
",Other
https://github.com/facebook/react/issues/12390,12390,Could we get more friendly error stack from ErrorBoudary?,[],closed,FALSE,,7,2018-03-16T12:16:51Z,2018-03-26T12:42:57Z,2018-03-18T22:54:27Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Maybe a feature?

**What is the current behavior?**

Currently the error Component Stack(i.e. `arguments[0]` of `componentDidCatch`) is something like:
```
in Foo
in Connect(Foo)
in Bar
in div
in ...
```
But in production, they would be formatted to:
```
in t
in Connect(t)
in s
in t
in ...
```
This is almost **useless for our debugging.**

**What is the expected behavior?**

I want to request a feature which allow us to define our **own** static **componentName field**, the reason why don't use `displayName` is that the `displayName` is used by react-devtools or others libs, if we use this static field for our components, **everyone** could see our components/project structure(maybe there is others potential risk) , that's not what we expect.

So, if react could support custom static **componentName field**, e.g. `myDisplayName`, then we could set `myDisplayName` field for our components and react-devtools **can't inspect this**. And react read `myDisplayName` field rather than `displayName` to get the component name and insert they into the error stack string and then call the `componentDidCatch`.

I know that if we implement this, we **still** could get the components/project structure by using some libs like babel to decompile or just make react-devtools to support this field. But that increase the cost.
",Support
https://github.com/facebook/react/issues/12406,12406,Circle Ci failing test,[],closed,FALSE,,1,2018-03-20T11:46:41Z,2018-03-20T14:59:09Z,2018-03-20T14:59:09Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug 

**What is the current behavior?**
Broken build process due to invalid response from http://react.zpao.com/

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Any new PR will have the ""facebook-open-source-bot"" post something similar to this:
<img width=""775"" alt=""screen shot 2018-03-20 at 6 39 41 am"" src=""https://user-images.githubusercontent.com/943606/37652617-1614ef8e-2c0a-11e8-8185-c6405aa07b8f.png"">
this error will also cause the CircleCI tests to fail
<img width=""768"" alt=""screen shot 2018-03-20 at 6 43 38 am"" src=""https://user-images.githubusercontent.com/943606/37652610-0ebc9138-2c0a-11e8-90f2-905652100621.png"">
```
Error:  { FetchError: invalid json response body at http://react.zpao.com/builds/master/_commits/e1ff342bf7f451fb995e0ea2bfb10889deef022f/results.json reason: Unexpected token < in JSON at position 0
    at /home/circleci/project/node_modules/node-fetch/lib/body.js:48:31
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
  name: 'FetchError',
  message: 'invalid json response body at http://react.zpao.com/builds/master/_commits/e1ff342bf7f451fb995e0ea2bfb10889deef022f/results.json reason: Unexpected token < in JSON at position 0',
  type: 'invalid-json' }
```

**What is the expected behavior?**
Valid json response",Support
https://github.com/facebook/react/issues/12418,12418,Wrong `backgroundColor` value after changing from valid to invalid color,[],closed,FALSE,,3,2018-03-21T17:16:18Z,2018-03-21T17:37:36Z,2018-03-21T17:32:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When changing the backgroundColor from a valid color to `null`, the valid color persists.

**Steps to reproduce:**
https://codesandbox.io/s/56j748w8l

**What is the expected behavior?**
After changing the backgroundColor to an invalid format, the backgroundColor should be set to `null`, so then CSS is going to ignore the value due to it's an invalid value

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
* React 16.2.0
* Chrome 65.0.3325.162 (Official Build) (64-bit)
",Other
https://github.com/facebook/react/issues/12462,12462,itemProp and itemType incorrectly rendered using react-dom/server,[],closed,FALSE,,1,2018-03-27T10:55:42Z,2018-04-08T00:16:46Z,2018-03-27T16:21:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
A bug.


**What is the current behavior?**
When ""server side"" rendering elements with the [microdata](https://www.w3.org/TR/microdata/) props `itemProp` or `itemType`, the outputed HTML attributes remain in camel case.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/jjn2wnq6jy

**What is the expected behavior?**
The HTML attributes should be lowecase.

The react-dom renderer does not suffer from this issue.

The `itemScope` microdata attribute does not suffer from this issue.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
At least React 16.1 and 16.2 are affected, React 15.x does not appear to be.

This is not a browser related issue.",Support
https://github.com/facebook/react/issues/12465,12465,What is the future of React prop-types?,[],closed,FALSE,,2,2018-03-27T18:26:22Z,2020-03-12T13:13:15Z,2018-03-27T18:28:24Z,NONE,completed,,"
What is the future of React `prop-types` dynamic (runtime) type checker?

1) Will it be shifted by static type checkers like TypeScript or Flow and will be deprecated in future?
2) Do I need to migrate my actual React projects to TypeScript or Flow for long-term perspective?",Support
https://github.com/facebook/react/issues/12481,12481,[SVG] Enable focusable to accept boolean values,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-03-29T08:35:33Z,2018-08-07T18:39:57Z,2018-08-07T18:39:57Z,NONE,completed,,"Moved discussion from https://github.com/facebook/react/issues/6212.

## Situation

The [`focusable` attribute](https://www.w3.org/TR/SVGTiny12/interact.html#focusable-attr) from the SVG specifications is an [enumerated attribute](https://html.spec.whatwg.org/#keywords-and-enumerated-attributes) accepting values `""true""`, `""false""` and `""auto""`. Because it is technically not a boolean attribute (although it certainly somehow looks like it), React expects the value to be passed as a string. See the following example:

```diff
-<svg focusable>I should be focusable</svg>
-<svg focusable={true}>I should be focusable</svg>
+<svg focusable='true'>I should be focusable</svg>
```

The thing is, the `focusable` attribute is often used in conjunction with elements from the ARIA specification, in which attributes are booleans and not enumerated attributes with `""true""` and `""false""` values. The [`aria-hidden` attribute](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) is a good example of that.

For instance, [following a good practice for icon-buttons](https://fvsch.com/code/svg-icons/#section-html):

```html
<button type=""button"">
  <svg aria-hidden=""true"" focusable=""false"">
    <use xlink:href=""#icon-play""></use>
  </svg>
  <span class=""access-label"">Start playback</span>
</button>
```

From an authoring perspective, the above snippet would likely be written like this in JSX:

```jsx
<button type='button'>
  <Icon icon='play' aria-hidden={true} focusable={false} />
  <span class='access-label'>Start playback</span>
</button>
```

The problem is that `focusable` **cannot** be authored as a boolean, otherwise it will **not** be printed out in the DOM. On the other hand, `aria-hidden` is perfectly fine being written as a boolean at it gets coerced by React.

## Proposal

Given the default value for the `focusable` attribute is `""auto""`, this is very likely this attribute gets authored to change its value to `true` or `false`. In that regard, it is confusing that it has to be specified as a string, when other attributes accepting booleans can be authored as such.

The suggestion would be to make it possible for `focusable` to be specified as either a boolean or a string, like other similar attributes. In other words, all the following should work:

```jsx
<svg focusable>I should be focusable</svg>
<svg focusable={true}>I should be focusable</svg>
<svg focusable='true'>I should be focusable</svg>
<svg focusable={false}>I should not be focusable</svg>
<svg focusable='false'>I should not be focusable</svg>
<svg focusable='auto'>I should be focusable</svg>
```

From an authoring perspective, I believe this would be the most straightforward and less confusing.",Feature
https://github.com/facebook/react/issues/12485,12485,Error still logged to console when caught by error boundary in testing,[],closed,FALSE,,1,2018-03-29T19:15:13Z,2018-04-01T01:11:43Z,2018-04-01T01:11:42Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

I'm not quite sure if feature/bug... I have an error boundary, and I want to test that it works correctly, but it produces a big `console.error` and there doesn't seem a great way to get around it.

**What is the current behavior?**

When an error is captured by the error boundary, it still logs to console during tests, making it look like something failed but it is expected (because I am testing error boundary) in this case.

```
    console.error node_modules/react-dom/cjs/react-dom.development.js:9747
      The above error occurred in the <Child> component:
          in Child (at ErrorBoundary.test.jsx:20)
          in ErrorBoundary (created by WrapperComponent)
          in WrapperComponent

      React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Error  Boundary:
```jsx
import React from ""react"";
import PropTypes from ""prop-types"";

export default class ErrorBoundary extends React.Component {
  static propTypes = {
    children: PropTypes.oneOfType([
      PropTypes.node,
      PropTypes.arrayOf(PropTypes.node)
    ]).isRequired,
    render: PropTypes.func.isRequired
  };

  state = {
    hasError: false,
    error: null,
    errorInfo: null
  };

  componentDidCatch(error, errorInfo) {
    this.setState({ hasError: true, error, errorInfo });

    // if we have Bugsnag in this environment, we can notify our error tracker
    if (window.Bugsnag) {
      window.Bugsnag.notify(error);
    }
  }

  render() {
    if (this.state.hasError) {
      return this.props.render(this.state.error, this.state.errorInfo);
    }
    return this.props.children;
  }
}
```

ErrorBoundary.test.jsx
```jsx
import ErrorBoundary from ""./ErrorBoundary"";

const Child = () => {
  throw ""error"";
};

it(""catches error and renders message"", () => {
  const wrapper = mount(
    <ErrorBoundary render={() => <div>Error has occurred</div>}>
      <Child />
    </ErrorBoundary>
  );

  expect(wrapper.text()).toEqual(""Error has occurred"");
});
```

**What is the expected behavior?**

I'm not sure exactly... here is a way I can sort of temporarily pause `console.error` logging during the course of the test, but it seems messy. How should error boundaries be tested?

Here is a *hacky* solution:
```jsx
import ErrorBoundary from ""./ErrorBoundary"";

const Child = () => {
  throw ""error"";
};

const pauseErrorLogging = codeToRun => {
  const logger = console.error;
  console.error = () => {};

  codeToRun();

  console.error = logger;
};

it(""catches error and renders message"", () => {
  pauseErrorLogging(() => {
    const wrapper = mount(
      <ErrorBoundary render={() => <div>Error has occurred</div>}>
        <Child />
      </ErrorBoundary>
    );

    expect(wrapper.text()).toEqual(""Error has occurred"");
  });
});
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.2 (with enzyme 3.3)
",Other
https://github.com/facebook/react/issues/12491,12491,Provide a better error on React.cloneElement(null/undefined),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,FALSE,,4,2018-03-30T06:21:12Z,2018-04-10T01:16:56Z,2018-04-10T01:16:56Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
![image](https://user-images.githubusercontent.com/5977311/38124026-a0984a98-3411-11e8-838f-2d6f3dc97046.png)
",Support
https://github.com/facebook/react/issues/12494,12494,Invalid DOM property `frameborder`. Did you mean `frameBorder`?,[],closed,FALSE,,1,2018-03-30T17:35:57Z,2018-04-01T01:08:33Z,2018-04-01T01:08:23Z,NONE,completed,,I'm using [react-safe-html](https://github.com/brigand/react-safe-html) to render HTML from editor on website. The thing is that when it renders `iframe` it causes **Invalid DOM property `frameborder`. Did you mean `frameBorder`?** error. But when I use `frameBorder` in component it **DOESN'T** affect rendered iframe's border. However `frameborder` does (but it throws this warning).,Support
https://github.com/facebook/react/issues/12500,12500,Warning in IE 11 when using React.Fragment,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,14,2018-03-31T11:00:44Z,2018-06-06T08:51:31Z,2018-04-01T00:14:37Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

With React 16.3.0, when using `<React.Fragment>` IE 11 gives the following warning:

```
Warning: Invalid prop `children` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.
```

Steps to reproduce:
1. Use `create-react-app` to create a new React app.
2. Add `<React.Fragment>` to `App.js`. For example:

```
import React, { Component } from ""react"";
import logo from ""./logo.svg"";
import ""./App.css"";

class App extends Component {
  render() {
    return (
      <div className=""App"">
        <React.Fragment>
          <header className=""App-header"">
            <img src={logo} className=""App-logo"" alt=""logo"" />
            <h1 className=""App-title"">Welcome to React</h1>
          </header>
          <p className=""App-intro"">
            To get started, edit <code>src/App.js</code> and save to reload.
          </p>
        </React.Fragment>
      </div>
    );
  }
}

export default App;
```

3. Open the app in IE 11.
4. Open IE dev tools and refresh the browser.
5. You should see the above mentioned warning message in the console window.

No warnings with Chrome, Firefox, and Edge.

**What is the expected behavior?**

There should be no warnings shown.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.3.0
Browser: IE 11
OS: Windows 10",Bug
https://github.com/facebook/react/issues/12516,12516,Warning `Unsafe legacy lifecycles will not be called for components ...` keeps appearing,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,9,2018-04-02T03:23:47Z,2020-05-19T13:25:08Z,2018-04-04T17:25:51Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Might be a bug?

**What is the current behavior?**
Replaced componentWillReceiveProps() with a newly added getDerivedStateFromProps() but the warning keeps appearing in the console.

I doubted the higher order component at first sight, so removed all the coupling with this component's higher order wrapper. I also removed `children` in render() in an effort to remove all the side effects.

Apparently there's no componentWillReceiveProps() in this component but I cannot get rid of this warning. The only thing I could do was to explicitly assign null to `this.componentWillReceiveProps`, then the warning was gone.

Am I missing something or is it a bug? I also wish this warning could be optionally turned off in development environment. (Considering the legacy React libraries still use them and can be injected by e.g. HOC)

![image](https://user-images.githubusercontent.com/13134658/38181829-29968f48-3670-11e8-8cd5-be24fe2d6d1e.png)


```javascript
class RootContainer extends React.Component {
  constructor() {
    super();
    this.state = {
    };
    this.componentWillReceiveProps = null; // Only way I can turn that warning off
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    // ...
    return prevState;
  }

  render() {
    return (
      <div>1</div>
      // <Root>
      //   {this.props.history 
      //     ? this.props.children 
      //     : null}
      // </Root>
    );
  }
}

// ...

export default RootContainer;
// export default withRouter(connect(makeMapStateToProps)(RootContainer));

```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
No warning (or at least to turn that off by option even in `development` environment)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- React 16.3.0
- React-DOM 16.3.0
- React-Redux 5.0.7
- React-Router-DOM 4.2.2

**UPDATE Apr 4** 
- React-hot-loader 4.0.0 **(CAUSE OF WARNING)**",Other
https://github.com/facebook/react/issues/12548,12548,Upgrade to Babel 7,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,28,2018-04-04T23:26:20Z,2019-09-05T15:25:16Z,2019-08-09T00:50:20Z,MEMBER,completed,,"Babel 7 is still in beta, but presumably it will be released soon. We should get a head start on upgrading. Perhaps it's stable enough for us to upgrade even before the final release.

One benefit is we could use JSX fragment syntax in tests. Yay!

@reznord has volunteered to pick this up.",Feature
https://github.com/facebook/react/issues/12551,12551,New Context Provider may block Old context propagation if children are constant,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,6,2018-04-05T09:18:08Z,2018-05-24T01:22:31Z,2018-04-26T19:59:18Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

It seems that, if the children of a new-style `React.createContext()` context `Provider` are constant, the `Provider` can block updates from old-style `this.context` context providers from propagating to `this.context` consumers.

This sandbox demonstrates the issue. Clicking the button with a number will correctly increment the `Root`'s `state` and `context`, but the update is only propagated to the `Child3`'s `context` (and its button) when the ""Colors!"" button is clicked, as it causes an update to the `value` of the new-style `Provider`:

https://codesandbox.io/s/ol4lpokpjy

<details>
<summary>Copy of the source code in the sandbox</summary>

```jsx
import PropTypes from ""prop-types"";
import React from ""react"";
import ReactDOM from ""react-dom"";

class Root extends React.Component {
  constructor(props: {}) {
    super(props);
    this.state = {
      count: 0
    };
    this.countUp = this.countUp.bind(this);
  }

  getChildContext() {
    return {
      ...this.context,
      count: this.state.count,
      countUp: this.countUp
    };
  }

  render() {
    return this.props.children;
  }

  countUp() {
    this.setState(({ count }) => ({ count: count + 1 }));
  }
}

Root.childContextTypes = {
  count: PropTypes.number.isRequired,
  countUp: PropTypes.func.isRequired
};

const ctx = React.createContext();

class Child1 extends React.Component {
  constructor(props: { onClick(): void }) {
    super(props);
    this.state = {
      color: randomHexColor(),
      newColor: this.newColor.bind(this)
    };
  }

  render() {
    return (
      <ctx.Provider value={this.state}>{this.props.children}</ctx.Provider>
    );
  }

  newColor() {
    const color = randomHexColor();
    this.setState(() => ({ color }));
  }
}

function randomHexColor() {
  const colorStr = Math.floor(Math.random() * (Math.pow(2, 24) - 1)).toString(
    16
  );
  return ""#000000"".slice(0, -colorStr.length) + colorStr;
}

class Child2 extends React.Component {
  render() {
    return (
      <ctx.Consumer>
        {ctx => (
          <React.Fragment>
            <Child3 color={ctx.color} />
            <button onClick={ctx.newColor}>Colors!</button>
          </React.Fragment>
        )}
      </ctx.Consumer>
    );
  }
}

class Child3 extends React.Component {
  render() {
    return (
      <button
        style={{ color: this.props.color }}
        onClick={this.context.countUp}
      >
        {this.context.count}
      </button>
    );
  }
}

Child3.contextTypes = {
  count: PropTypes.number.isRequired,
  countUp: PropTypes.func.isRequired
};

ReactDOM.render(
  <Root>
    <Child1>
      <Child2 />
    </Child1>
  </Root>,
  document.getElementById(""root"")
);

```

</details>

**What is the expected behavior?**

Both old-style and new-style context updates should coexist.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.1; also broken in 16.3.0.

---

This seems to only happen if the `children` of the `Provider` are constant, which is what happens when the children are provided on the first and only `ReactDOM.render` call. If `Child1` is updated to directly use `<Child2/>` instead of `{this.props.children}`, the problem does not happen.

This can also be a problem when using a production optimization that hoists constant elements outside the Component if the specified children are constant, which would even defeat the fix/workaround for the example above.",Bug
https://github.com/facebook/react/issues/12554,12554,"""setState()"" always triggers ""componentWillReceiveProps()""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-04-05T19:57:09Z,2018-04-05T22:37:34Z,2018-04-05T22:37:34Z,NONE,completed,,"Hi there.
Since React v16.3.0 every `this.setState()` triggers `componentWillReceiveProps()`. Before v16.3.0 there is no such behavior. 
It is a very breaking change for my project, it causes a lot of problems.
Is it a normal behavior or a bug?

Also,  `this.setState()` triggers new method `getDerivedStateFromProps()` too.",Support
https://github.com/facebook/react/issues/12567,12567,Silence noisy missing-key warning when it doesn't apply,[],closed,TRUE,,7,2018-04-07T09:17:15Z,2018-08-18T14:28:22Z,2018-04-07T14:20:14Z,NONE,completed,,"I'd like to request a feature that would enable us to silence the missing-key warning (https://fb.me/react-warning-keys) since it doesn't apply to server-side applications.

For example, I have a library for using React for server-side templating (https://github.com/danneu/react-template-render) and I'm using it in this demo app: https://github.com/danneu/koa-skeleton

Ideally I'd be able to set a property on `require('react')` to silence it. 

It's quite noisy and crowds out my dev logs:

```
Listening on http://localhost:3000
  <-- GET /users/user-1000
  --> GET /users/user-1000 200 224ms 2.02kb
  <-- GET /users?page=5
Warning: Each child in an array or iterator should have a unique ""key"" prop.

Check the top-level render call using <tbody>. See https://fb.me/react-warning-keys for more information.
    in UserRow
    in UsersList
    in div
    in body
    in html
    in Master
Warning: Each child in an array or iterator should have a unique ""key"" prop.

Check the top-level render call using <ul>. See https://fb.me/react-warning-keys for more information.
    in li
    in Paginate
    in UsersList
    in div
    in body
    in html
    in Master
    in span
    in a
    in li
    in ul
    in nav
    in Paginate
    in UsersList
    in div
    in body
    in html
    in Master
  --> GET /users?page=5 200 68ms 6.69kb
  <-- GET /users?page=7
  --> GET /users?page=7 200 12ms 6.77kb
  <-- GET /users?page=4
  --> GET /users?page=4 200 16ms 6.58kb
  <-- GET /users/testing
Warning: Each child in an array or iterator should have a unique ""key"" prop.

Check the top-level render call using <h1>. See https://fb.me/react-warning-keys for more information.
    in a
    in UsersShow
    in div
    in body
    in html
    in Master
  --> GET /users/testing 200 9ms 2.07kb
  <-- GET /users
  --> GET /users 200 22ms 6.46kb
  <-- GET /users/testing/edit
  --> GET /users/testing/edit 200 52ms 2.01kb
  <-- GET /
Warning: Each child in an array or iterator should have a unique ""key"" prop.

Check the top-level render call using <div>. See https://fb.me/react-warning-keys for more information.
    in p
    in Homepage
    in div
    in body
    in html
    in Master
    in button
    in div
    in div
    in form
    in NewMessagePanel
    in div
    in div
    in Homepage
    in div
    in body
    in html
    in Master
Warning: Each child in an array or iterator should have a unique ""key"" prop.

Check the top-level render call using <small>. See https://fb.me/react-warning-keys for more information.
    in a
    in MessagePanel
    in div
    in div
    in Homepage
    in div
    in body
    in html
    in Master
  --> GET / 200 101ms 14.25kb
  <-- GET /users/user-113
  --> GET /users/user-113 200 13ms 2.92kb
  <-- POST /sessions/be3b0440-742f-461a-808d-896a420023f2
  --> DELETE /sessions/be3b0440-742f-461a-808d-896a420023f2 302 32ms 33b
  <-- GET /
  --> GET / 200 21ms 14.15kb
```
",Support
https://github.com/facebook/react/issues/12583,12583,Anchor KeepDefault ?,[],closed,FALSE,,1,2018-04-09T10:01:31Z,2018-04-09T15:16:48Z,2018-04-09T15:16:48Z,NONE,completed,,"Is there a way to keep anchor default click handling, *along* with using onClick ?

I'm trying to make a controlled link open a new tab :)",Support
https://github.com/facebook/react/issues/12616,12616,"Uncaught TypeError: Super expression must either be null or a function, not undefined while importing react and react-dom","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,20,2018-04-15T16:47:03Z,2022-07-06T05:12:10Z,2018-04-15T17:11:53Z,NONE,completed,,"This are my dependencies and there version ( if it helps ) 
```
 ""dependencies"": {
    ""react"": ""^16.3.1"",
    ""react-dom"": ""^16.3.1"",
    ""webpack"": ""^2.1.0-beta.25""
  },
```
I have the most simplest code for the hello world using react component
````
import React from 'react';
import ReactDOM from 'react-dom';

class Hello  extends React.Component{
  render(){
    return (
      <h1>hello  world</h1>
    )
  }
}
ReactDOM.render(
  <Hello />,
  document.getElementById('root')

)
```
`


using bundle.js in the html script to bundle up everything 
**getting error**

`Uncaught TypeError: Super expression must either be null or a function, not undefined
    at _inherits (script.js:2)
    at bundle.js:7830
    at Object.<anonymous> (script.js:11)
    at __webpack_require__ (bootstrap d328d05e6065876b9d70:19)
    at bootstrap d328d05e6065876b9d70:63
    at bootstrap d328d05e6065876b9d70:63`

thanks in advance",Support
https://github.com/facebook/react/issues/12640,12640,How to traverse the React tree?,[],closed,FALSE,,13,2018-04-18T12:44:04Z,2019-11-07T08:16:42Z,2018-04-18T15:59:44Z,NONE,completed,,"I would like to propose to add a `walkTree` method in React. Today a lot of libraries relies on walking the React tree for SSR. It is used to preload data, styles or whatever.

I am asking because I found a [bug in Loadable Components](https://github.com/smooth-code/loadable-components/pull/65) and I fixed it, but [the bug is also in React Apollo](https://github.com/apollographql/react-apollo/issues/1937) and probably in other libraries that use this strategy.

I have several questions:

- Is `walkTree` the good strategy? If not can you tell me how to do it?
- If `walkTree` is the good strategy, could you maintain it and expose it in React or another package?",Support
https://github.com/facebook/react/issues/12641,12641,React 16.3.2 - SSR Image onLoad hydrate does not work in Chrome,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,5,2018-04-18T15:45:36Z,2018-04-25T16:18:27Z,2018-04-25T16:18:26Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

In chrome, <img onLoad.../> does not seem to fire if the image is there on the initial server side html but it fires on both Safari and Firefox.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

An example can be seen here: https://github.com/MWGitHub/ssr-skeleton  
Pull down the repo `npm i`, `npm run dev` and go to `localhost:3000`.  
There should be a console log when the image is loaded.  
This does not occur in Chrome but you can see the log in Safari and Firefox.  

Changing the file `src/ClientRoot.jsx` from `ReactDOM.hydrate` to `ReactDOM.render` causes img onLoad to trigger properly.

**What is the expected behavior?**

The expected behavior is for onLoad to fire on images that are in the initial server side html.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Browsers: Chrome in OS X El Capitan
React versions: React 16.3.X, React 16.2

",Other
https://github.com/facebook/react/issues/12652,12652,Mute componentDidCatch and allow developers to log it themselves.,[],closed,FALSE,,3,2018-04-19T18:34:15Z,2019-10-30T20:27:44Z,2018-04-19T19:21:34Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
When a child throws an error inside an error boundary and hits it's `componentDidCatch` the error is still logged to the console regardless of any handling that you then do inside of your `componentDidCatch`.

**What is the expected behavior?**
Wouldn't it make more sense to give some more fine grated control over how errors get logged once they do bubble up all the way to an error boundary? My motivation for this is:

- When using an error logging service (rollbar, sentry, etc.) you normally don't really need/want your error to bubble through to the console in production.

- Testing an error boundary component feels a bit funky right now because for test runners like jest you have to mock jsDom's virtual console to suppress error showing up in your test results.

- The severity of an error caught by a specific error boundary might be just a warning, thus you would have to throw a console.warn along the already thrown error.

- When you try/catch outside of react you would also handle the logging in your catch by rethrowing a specific exception.

I wonder what your opinion is on this :)
",Feature
https://github.com/facebook/react/issues/12653,12653,createPortal fails silently if used outside or render method,[],closed,FALSE,,3,2018-04-19T18:50:47Z,2019-05-08T07:11:12Z,2018-04-19T19:20:31Z,NONE,completed,,"I updated a package to work with react 16.3.2. `unstable_renderSubtreeIntoContainer` was used there. When I replaced it with `createPortal`, nothing happened and no errors were displayed. I wasted several hours to understand that `unstable_renderSubtreeIntoContainer` could be used anywhere, for example in `componentDidUpdate` (as it was in my case). But `createPortal` can be used only in `render`. So it would be great to have a warning when it is used outside render to let people know what they are doing wrong. And maybe consider adding a note on this in the docs. Thanks.",Support
https://github.com/facebook/react/issues/12659,12659,[Bug] Clicked button error,[],closed,FALSE,,3,2018-04-20T06:22:52Z,2018-04-25T21:29:29Z,2018-04-25T21:29:29Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
button click

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
if clicked button, occur error then remove components.
![image](https://user-images.githubusercontent.com/12390185/39033733-74517588-44ae-11e8-89f2-b3bf2965a2cf.png)

onClick event is: 
```js
  closeTutorial = (e) => {
    e.stopPropagation();
    e.preventDefault();

    this.setState({
      showTutorial: false,
    });
  }
```

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react - 16.3.1
react - 16.3.1
browser - chrome
OS - window10
",Other
https://github.com/facebook/react/issues/12663,12663,Skip second argument in React.createElement(),[],closed,FALSE,,1,2018-04-20T16:51:35Z,2018-04-21T22:39:24Z,2018-04-21T22:39:24Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature

**What is the current behavior?**
`React.createElement(component, props, children)`, when `props` aren't needed, you still have to pass `null` or `{}` as a second argument.

**What is the proposal?**
Being allowed to omit the second argument, allowing this:
```es6
import React from 'react'
import Foo from './Foo'
import Bar from './Bar'

const o = React.createElement

const App = () =>
  o('div',
    o('h1', 'Hello'),
    o(Foo),
    'Ok!',
    o('p', 'How are you?'),
    o(Foo,
      o(Bar, { key: 'hi' },
        o('span', 'Heya!')
      )
    )
  )
```

**Demo code?**
I currently, very naively, use this:
```es6
function o () {
  var argumentsArray = Array.from(arguments)
  var x = argumentsArray[1]
  if (typeof x === 'string' || typeof x === 'number' || Array.isArray(x) || (typeof x === 'object' && Object.keys(x)[0] === '$$typeof')) {
    argumentsArray.splice(1, 0, {})
  }
  return React.createElement.apply(this, argumentsArray)
}
```",Feature
https://github.com/facebook/react/issues/12667,12667,Get State Of Parent From Child (without passing state as props),[],closed,FALSE,,2,2018-04-22T09:24:37Z,2018-04-22T18:45:09Z,2018-04-22T18:22:21Z,NONE,completed,,"Is it true to get state (and all of its methods) of parent component from child using **this** keyword?

```
class App extends Component {
	constructor (props) {
	super(props)
		this.state = {
			value: 0
		}
	}	
	render() {

		return (     
			<Child that = {this} />     
		   );
	}
}
```

And from the Child component

```
class Child extends Component {
	constructor (props) {
	        super(props)
        }		
	render() {
		alert(this.props.that.state.value)
		return (null);
	}
}

```




",Support
https://github.com/facebook/react/issues/12678,12678,Passing all props from a parent to children looks screwed up,[],closed,FALSE,,3,2018-04-24T10:48:16Z,2018-04-24T11:27:42Z,2018-04-24T11:07:17Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I guess a bug.

**What is the current behavior?**
I want to wrap children in a `div` and pass all the props to children that are now inside that `div`:
```
import React from ""react"";

// A div that passes its props to its direct children
const Div = props => {
  return (
    <div>
      {React.Children.map(props.children, child =>
        React.cloneElement(child, props)
      )}
    </div>
  )
};

const App = () => (
  <Div prop1=""look ma"" prop2=""no hands"">
    <div>div1</div>
    <div>div2</div>
    <div>div3</div>
  </Div>
)

export default App;
```
CodeSandbox: https://codesandbox.io/s/1omj86nlw7

**What is the expected behavior?**
Output should be
```
div1
div2
div3
```

**The actual output**
```
div1
div2
div3
div1
div2
div3
div1
div2
div3
```

For some reason every child contains three extra children.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.3.2, macOS 10.13.4
",Support
https://github.com/facebook/react/issues/12683,12683,"When unmounting a Fragment node, it's children are removed from the DOM one at a time instead of all at once","[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-04-24T23:54:56Z,2018-08-02T19:29:11Z,2018-08-02T19:29:11Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug (maybe! - or perhaps it's just a limitation of Fragments - let me know!)

**What is the current behavior?**

When unmounting a Fragment, it's children are removed from the DOM one at time top to bottom.

This means if during the unmounting step if I'm quickly calculating where it is in the DOM, its position can change before I can save that data. I also imagine it's less performant.

Look in your console for the outputs for these.

**1a) Using Fragment - Element can be found:**
https://codesandbox.io/s/k9jl6vo8yv

**1b) Using Fragment - Element can't be found:**
https://codesandbox.io/s/1omjz1m8l

**2a) Using div - Element can be found (expected behaviour for Fragment):**
https://codesandbox.io/s/l34o1kw8m

**2b) Using div - Element can't be found (when switching out parent with children, with parent with no children):**
https://codesandbox.io/s/w02yv3o4zw

**What is the expected behavior?**

1) That both the Fragments children would be removed from the DOM at the same time, instead of one after the other.

2) That both children of the div would be removed from the DOM at the same time when essentially removing the children.

These both look like they're part of the same problem.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3, unsure if it worked in previous versions.

----

Let me know if I can help with anything :).

Cheers",Support
https://github.com/facebook/react/issues/12688,12688,Unexpected behavior when use React.forwardRef with React.createContext ,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-04-25T14:16:43Z,2018-05-24T01:23:10Z,2018-04-26T18:47:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
example: https://codesandbox.io/s/04393o3k6w
If the `LogProps` is child of `M.Provider`, and `M.Consumer` is used in its children.
When the `M.Provider` is updating, even if the `LogProps` is wrapped in a component that  never updates, it can still be triggered by the callback of `React.forwardRef`, and updates the `LogProps`.

**What is the expected behavior?**
the `LogProps` shouldn't update when the root component had updated, whether or not  `M.Consumer` is used in its children;

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

it's used react@16.3
",Bug
https://github.com/facebook/react/issues/12691,12691,It's possible to do unlimited recursive rendering with an HOC,[],closed,FALSE,,3,2018-04-25T21:13:28Z,2018-04-26T18:54:58Z,2018-04-26T18:54:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

I would consider it a feature 😈 

**What is the current behavior?**

React does not put any limits on recursive rendering, using higher-order components. However it does so for calling `this.setState(...)`

It reproduces pretty easy with a pair of a Container and an HOC:
https://github.com/sergeysolovev/react-bomb/blob/master/src/index.js

I wouldn't try this on CodeSandbox or JSFiddle (I did). Here is the code:

```javascript
import React from ""react"";
import ReactDOM from ""react-dom"";

// Accepts a component as a prop and renders it
// passing the props through. In a real life scenario
// usually does something more than that
const Container = props => {
  const { component: Component } = props;
  return <Component {...props} />;
};

// An HOC-version of Container
const withContainer = WrappedComponent => props => (
  <Container component={WrappedComponent} {...props} />
);

// Though it looks a bit artificially here,
// it's pretty common to use something like `compose`
// which does the same thing but looks more innocent
const Bomb = withContainer(withContainer(() => null));

class Detonator extends React.Component {
  state = {
    wentOff: false
  };
  goOff = () => this.setState({ wentOff: true });
  render = () =>
    this.state.wentOff ? (
      <React.Fragment>
        <Bomb /> Oooppps... This text probably wont be rendered
      </React.Fragment>
    ) : (
      <button onClick={this.goOff}>Lets see</button>
    );
}

ReactDOM.render(<Detonator />, document.getElementById(""root""));
```

**What is the expected behavior?**

I would expect to have some limit on such kind of recursion, because it's blazing fast (like React's supposed to be), eating lots of RAM in short time and a bit difficult and annoying to stop.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Reproduces on Chrome 65. I've done it for React 16.3.1 and 16.3.2
",Other
https://github.com/facebook/react/issues/12693,12693,react-test-renderer.create does not work properly with forwardRef components,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-04-26T02:47:56Z,2018-05-02T13:26:56Z,2018-05-01T18:55:28Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If you try to access the `.root` of a component tree of a component created with `forwardRef`, you will get an error

> `Unexpected object passed to ReactTestInstance constructor`

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

A minimal example is simply a component created with `forwardRef`:

```js
import React from ""react"";

export default React.forwardRef(() => <div>hello</div>);
```

Now if you try to use `create` from `react-test-renderer` and access `.root`, you will get

> Unexpected object passed to ReactTestInstance constructor (tag: 14). This is probably a bug in React.

```js
import React from ""react"";
import { create } from ""react-test-renderer"";

import Hello from ""./Hello"";

it(""test forwardRef component"", () => {
  const tree = create(<Hello />);
  expect(tree.root);
});
```

https://codesandbox.io/s/vm98x95wx5

**What is the expected behavior?**
You should be able to create components created with forwardRef with the test renderer.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.3 using jest (forwardRef did not exist previously).",Bug
https://github.com/facebook/react/issues/12709,12709,The `ref.current` point to the wrong dom node,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,1,2018-04-28T10:00:43Z,2018-05-01T17:42:09Z,2018-05-01T17:42:09Z,NONE,completed,,"eg:
`
{this.state.a ? <div ref={this.myRef} className=""a""/> : <div className=""b""/>}
`
after state.a was set to false,when access this.myRef.current,it's point to the div with the className b.",Support
https://github.com/facebook/react/issues/12711,12711,setState callback fired with wrong state context when using ReactDOM.unstable_deferredUpdate,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,2,2018-04-28T14:42:02Z,2018-05-08T17:29:10Z,2018-05-08T17:29:10Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
`setState` callback is not functioning as expected when using `setState` directly and wrapped it in `ReactDOM.unstable_deferredUpdate` at same time. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/Luktwrdm/436/

If you open console, and click the `refresh` button, sometimes you may see the state in callback is smaller than it was before the `setState` was called. We definitely expect it would be bigger than it was.


**What is the expected behavior?**

As said above.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.3.2",Bug
https://github.com/facebook/react/issues/12712,12712,encoded character in table td tags showing as string incorrectly,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-04-28T14:45:37Z,2018-06-24T01:31:07Z,2018-06-24T01:31:07Z,NONE,completed,,"Encoded characters for example `&pound;`, `&#36;` can not show as £, $ if adding it into `<td>`. These characters are fine if put it into h1 tag for example as long as outside of table.

```js
<tr>
   <th scope=""row"">1</th>
   <td>USD</td>
   <td>&#36;</td>
   <td>United States Dollar</td>
   <td>9,120.6025</td>
   <td>9120.6025</td>
</tr>
```",Support
https://github.com/facebook/react/issues/12719,12719,"SyntaxError: Expected the ""svgName"" prop to be a string, What should I do?",[],closed,FALSE,,2,2018-04-30T09:54:52Z,2018-04-30T11:54:12Z,2018-04-30T11:49:12Z,NONE,completed,,"I assign a string to svgName, is ok.

```js
return (         
            { BENIF.map((v, k) => {
                return (<li key={k}>
                    <svg svgName=""webapp/src/assets/svg/local""  width='9' height='17' className=""svg-arr-l""/>
                    </li>)
            } )}
```                

But I assign a variable to svgName, is bad.

``` js
  const BENIF = [
            'webapp/src/assets/svg/crown',
            'webapp/src/assets/svg/discount',
            'webapp/src/assets/svg/earth'
           ];
 return (         
            { BENIF.map((v, k) => {
                // svgName={v} ""webapp/src/assets/svg/local""  svgName={str}
                let str = v.toString() || ''
                return (<li key={k}>
                    <svg svgName={str}  width='9' height='17' className=""svg-arr-l""/>
                    </li>)
            } )}
```
<img width=""365"" alt=""string1"" src=""https://user-images.githubusercontent.com/5363176/39165279-429ba120-47b6-11e8-8d8b-3b104483e2f5.png"">
",Support
https://github.com/facebook/react/issues/12723,12723,The findByType method from react-test-renderer doesn't find ref-forwarding components,[],closed,FALSE,,2,2018-05-01T03:41:45Z,2018-05-01T11:49:19Z,2018-05-01T11:49:18Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
In tests, if the component passed to `root.findByType` was created using `forwardRef` it can't be found.

If I use `root.find` to loop over all the nodes and log `.type` I see that the ref-forwarding-component is skipped entirely.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/k0o70vjv07?module=%2Fsrc%2Findex.test.js

I expect the second test to work like the first, however the second test is failing.

**What is the expected behavior?**
This may just be the way that `forwardRef` works, but the reason I expected it to work is I'm using it to make wrapped controls, like the `<FancyButton>` example from the documentation. When writing tests I want to be able to find a `FancyButton` and test it's besing passed the correct props, and not have to check that the DOM rendered by `FancyButton` is correct; that's already being tested in `fancy-button.test.js`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Using React 16.3.2, failing in Chrome and Node 8.11.0

I've tried all the `16.3.x` versions in codesandbox and they all failed.",Bug
https://github.com/facebook/react/issues/12736,12736,forwardRef causes componentWillReceiveProps after setState,[],closed,FALSE,,2,2018-05-03T04:49:32Z,2018-05-24T01:23:13Z,2018-05-03T11:40:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

When inside of a `forwardRef`, calling `setState` causes `componentWillReceiveProps` to be called after the `setState` has completed.

See https://codesandbox.io/s/n59k2v25r0 for demo

**What is the expected behavior?**

The docs don't seem to forbid this behavior (""Calling this.setState() *generally* doesn’t trigger UNSAFE_componentWillReceiveProps().""), so I'm not sure this is technically a bug.

However, it does cause older code that doesn't yet use the reducer syntax for `setState` to stop working when wrapped in `forwardRef`. It caused a few headscratchers for me while refactoring old code, so I'm reporting it just in case.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This appears in 16.3.2. Given that it is specific to forwardRef, it shouldn't apply to older versions.",Bug
https://github.com/facebook/react/issues/12758,12758,Open the react application with your phone browser， show error,[],closed,FALSE,,5,2018-05-07T11:35:20Z,2018-05-08T00:43:47Z,2018-05-07T12:55:23Z,NONE,completed,,"**Current Behavior：
Open the react application with your phone browser， show error：**

Warning: Failed prop type: Invalid prop `children` supplied to `Switch`, expected a ReactNode.
    in Switch
Warning: Failed prop type: Invalid prop `children` supplied to `HashRouter`, expected a ReactNode.
    in HashRouter
Warning: Failed prop type: Invalid prop `children` of type `object` supplied to `Provider`, expected a single ReactElement.
    in Provider

my Environment：
    ""react"": ""^16.3.2"",
    ""react-dom"": ""^16.2.0"",
    ""react-redux"": ""^5.0.7"",
    ""react-router-dom"": ""^4.2.2"",
    ""redux"": ""^4.0.0"",
",Support
https://github.com/facebook/react/issues/12759,12759,Typos in React.PureComponent very hard to debug,[],closed,FALSE,,2,2018-05-07T19:01:56Z,2018-05-07T20:04:27Z,2018-05-07T19:10:07Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
If you have a typo in a `React.PureComponent`you get a very unhelpful error message that doesn't give any idea where the error is occurring.

E.g.

```
class MyReact extends React.PuteComponent
```

Will generate this error:

<img width=""817"" alt=""screen shot 2018-05-07 at 15 57 24"" src=""https://user-images.githubusercontent.com/384959/39719507-c502ccca-520f-11e8-96ff-2cdc6991f11f.png"">

Normally you would notice right away but if for some reason this typo occurs and you don't see the immediate render result, good luck in finding it. Took me hours.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

I would expect an error message that identifies the location of the syntax error.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.3
Chrome
Mac Os",Other
https://github.com/facebook/react/issues/12761,12761,How to add twitter card meta tag using react-helmet to render data dynamically in react app,[],closed,FALSE,,1,2018-05-07T19:43:29Z,2018-05-07T22:42:02Z,2018-05-07T22:42:02Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/12774,12774,this.state doesn't  get the current state properly,[],closed,FALSE,,3,2018-05-10T08:20:49Z,2018-05-10T10:14:33Z,2018-05-10T08:45:50Z,NONE,completed,,"Related to this issue 
https://github.com/dmtrKovalenko/material-ui-pickers/issues/396#issuecomment-387972773

I found a work around by checking the state out of the onChange. But i can't figure out why it behaves like that in the first place.

Example:
https://codesandbox.io/s/2zrx49zwjj",Support
https://github.com/facebook/react/issues/12775,12775,Getting error while using component into another component in separate files,[],closed,FALSE,,5,2018-05-10T08:29:34Z,2018-05-10T10:02:32Z,2018-05-10T08:50:13Z,NONE,completed,,"
![screenshot from 2018-05-10 13-17-12](https://user-images.githubusercontent.com/29413411/39859788-7f80d52e-5454-11e8-8b58-a7de26c674bb.png)


**Uncaught TypeError: Cannot read property 'schema' of undefined**

**What is the current behavior?**

** JSFiddle  https://jsfiddle.net/Luktwrdm/439/

",Support
https://github.com/facebook/react/issues/12781,12781,The strange lifecycle of  forwardRef children,[],closed,FALSE,,1,2018-05-11T06:40:57Z,2018-05-11T14:02:39Z,2018-05-11T14:02:39Z,NONE,completed,,"**Do you want to request a feature or report a bug?**

bug

**Demo code**

```jsx
import React, { Component, forwardRef } from 'react';

class Inp extends Component {
  state = { value: '' }

  static getDerivedStateFromProps(nextProps, prevState) {
    console.log('3 --- receive props');
    return {
      value: nextProps.value,
    };
  }

  onChange = (e) => {
    console.log('1 --- onChange');
    this.setState({
      value: e.target.value,
    }, () => {
      console.log('2 --- after setState');
    });
  }

  render() {
    const { value, onChange, ...others } = this.props;

    return (
      <input type=""text"" value={this.state.value} onChange={this.onChange} {...others} />
    );
  }
}


const InpWithRef = forwardRef((props, ref) => (
  <Inp ref={ref} {...props} />
));


class Test extends Component {
  render() {
    return (
      <InpWithRef />
    );
  }
}

```

**What is the current behavior?**

When I type something in the ```Input```, will trigger ```onChange``` => ```setState``` => ```getDerivedStateFromProps``` => ```the callback of setState```.You can see it in the console.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here is a [demo](https://codepen.io/xiaoshuang/pen/OZZLVG?editors=0010).

**What is the expected behavior?**

The expected behavior: ```onChange``` => ```setState``` => ```the callback of setState``` => ```getDerivedStateFromProps```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
react: 16.3.2,
reacr-dom: 16.3.1,
```",Bug
https://github.com/facebook/react/issues/12794,12794,Deep-extend sequrity,[],closed,FALSE,,4,2018-05-13T03:43:06Z,2018-05-13T04:48:08Z,2018-05-13T04:14:03Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
See here:
https://github.com/webpack/webpack/issues/7285
The problem turns into mass. At the moment, this problem can be said in all projects of the world.
The fact is that these packages are at the kernel level. I think you need to fix and check the packages before publishing. Because it turns out that you are the core that converts packets into one single entity called React. I can not develop further...I can not study React! I like React!

**What is the expected behavior?**
There should not be such. Fearfully.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React latest
Windows 10
",Other
https://github.com/facebook/react/issues/12816,12816,Map is not defined ,[],closed,FALSE,,1,2018-05-15T11:37:49Z,2018-05-15T11:49:17Z,2018-05-15T11:48:27Z,NONE,completed,,"I am using react v16.3.2. The device is Galaxy Note 2 GT-N7100. I am using the native browser. The error is:

**<HOST>/static/js/bundle.js:45979**

**Uncaught ReferenceError: Map is not defined.**

It's working on other browsers on the same device. I have to load the page within the application and if I am not wrong it will use the default browser. ",Support
https://github.com/facebook/react/issues/12854,12854,Feature: need an error message when state modified because of misuse of spread operator,[],closed,FALSE,,3,2018-05-18T09:35:34Z,2018-05-21T06:21:04Z,2018-05-18T15:41:06Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
*Feature*

**What is the current behavior?**
See that fiddle : https://jsfiddle.net/arnaudambro/njzthx1v/
Click on any of the cities, and check the console. I didn't do any `this.setState()`, but I modified directly the state without knowing it because of a [misuse of the spread operator from my side](https://stackoverflow.com/questions/50391768/a-copy-of-an-array-with-spread-operator-modifies-the-copied-array-how-come). 
Thus no error came to me telling me I was modifying the state directly.


**What is the expected behavior?**
An error like `Do not mutate state directly. Use setState()`, or even maybe a lesson about the spread operator at the same time :)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I use the last version of React, and I expect to have the same in all the previous versions of React.
",Support
https://github.com/facebook/react/issues/12866,12866,Dynamic components rendering [Object object],[],closed,FALSE,,2,2018-05-19T14:48:32Z,2018-05-20T19:20:56Z,2018-05-20T19:11:12Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug.

**What is the current behavior?**

__Description__: I have done a small util to lazy load components. The approach is to store the lazy-component in the state and import it in the componentDidMount callback triggering a re-render. A simplified example can be seen here: https://github.com/isidrok/react-bug/blob/master/index.js.

__Problem__: When the lazy-component is loaded and the component is updated new children are being set as text instead of children, resulting in [Object object].

__Remarks__: This behaviour is different depending on the React version and the build tool:
* `React 16.0.0` with `any build tool`: works.
* `React 16.3.2` with `create-react-app`: works.
* `React 16.3.2` with `rollup` and __NODE_ENV === ""production""__: works.
* `React 16.3.2` with `rollup` and __NODE_ENV === ""development""__: __fails__.

Therefore I assume there is  something different in how `create-react-app` and `rollup` handle environment variables replacement but the thing is it works totally fine if using `React 16.0.0` so that's why I think this is a bug.

__Steps to reproduce__:
1. Download the sample repository https://github.com/isidrok/react-bug.
2. Install the dependencies `npm i`.
3. Run `npm start` to build the app, and `npm run serve` to start an http server in `localhost:8080`.
4. Go into the `index.html` file, there you can choose wich version of the app to load `build.dev.js`(fails) or `build.prod.js`(works).
5. Go into the file `index.js`, in the render method of component `App` you can choose to render the `Wrapper` or `LazyHello`. Rendering `LazyHello` will result in _Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node._
5. Navigate to the page and click on `Click me!`.

**What is the expected behavior?**

It should render the lazy-loaded component independently of the tool used for building the app or the `NODE_ENV` environment variable value. Moreover, it should keep working since it did in previous versions of React.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* This issue affectes version 16.3.2 of React, but it doesn't affect previous versions such as 16.0.0
* Browser: Google Chrome 66.0.3359.181 (Official Build) (64-bit)
* OS: Linux mint 18

Thanks!



",Other
https://github.com/facebook/react/issues/12915,12915,Suspense: timeout expiration and siblings rendering issues,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-05-26T23:38:59Z,2018-08-02T20:09:46Z,2018-08-02T19:12:09Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Code for reproducing is [here](https://github.com/alexeyraspopov/react-suspense-sandbox/tree/cb3b60be69523de8f720a474c965face2b521b9b). I've also deployed an example to Zeit Now: https://suspense-fpwoufdzfv.now.sh/.

This is a basic example of using React Suspense and Simple Cache Provider. Postponing text rendering and showing loading spinners when it's necessary.

I can see my use of `<Timeout />` doesn't really care about `ms` I'm passing — it always become expired right after the render. You can open a page and the loading bar appears immediately despite `1000ms` delay that it has.

There is content that is placed next to an async component (the one that's going to be suspended).

https://github.com/alexeyraspopov/react-suspense-sandbox/blob/cb3b60be69523de8f720a474c965face2b521b9b/src/index.js#L51-L56

Looking at React Suspense tests, it is assumed that sibling elements can be rendered in any way.

**What is the expected behavior?**

`<Timeout />` component only shows placehold when expired, sibling content is shown even if an async component was suspended.

I built sources for `react`, `react-dom`, and `simple-cache-provider` from the current master, updating `enableSuspense` flag. I also used `<unstable_AsyncMode />` but it didn't seem to make any difference.

I overall was really satisfied with this feature. I hope I did the code correctly so it shows the real bug. ",Support
https://github.com/facebook/react/issues/12917,12917,What you think about this used setState?,[],closed,FALSE,,1,2018-05-28T09:05:46Z,2018-05-28T15:02:48Z,2018-05-28T15:02:48Z,NONE,completed,,"I`m invented a new design pattern for work a async code in React. Look at example: 

this.setState({async: updateMember(gameId, thisPlayerId, data),}, closeDD);

I`m used setState because I`m need from the beginning performed updateMembers, and only after to run the closeDD.

What you think about pattern?",Support
https://github.com/facebook/react/issues/12927,12927,Preserve property getters in state updates,[],closed,FALSE,,1,2018-05-29T18:01:32Z,2018-05-29T20:33:36Z,2018-05-29T20:33:35Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
On state updates, property getters on `this.state` are transformed into literals.
E.g. `this.state = { en: 'hello', get english() { return this.en; } }` will be `{ en: 'bye', english: 'hello' }` after `this.setState({ en: 'bye' })`.

[Code example here](https://codepen.io/spbks/pen/OEJzzV?editors=0010)

**What is the expected behavior?**
Getters should still be available after state updates.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.3",Support
https://github.com/facebook/react/issues/12930,12930,Broken `fiber-triangle-demo` and `schedule` fixtures,[],closed,FALSE,,1,2018-05-29T23:01:14Z,2018-05-30T00:54:39Z,2018-05-30T00:54:39Z,CONTRIBUTOR,completed,flarnie,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
These two fixtures are both broken due to a reference to `global` in the bundle they reference.

This was introduced in a PR I just landed, so I'm fixing it. See https://github.com/facebook/react/pull/12900

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Open either fixture in Firefox, note the error in the console and the page doesn't update.

**What is the expected behavior?**
They should have React and/or the schedule module running JS on the page.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Just on master.
",Bug
https://github.com/facebook/react/issues/12938,12938,Client and server rendering desynchronized in documentation,[],closed,FALSE,,1,2018-05-30T15:58:03Z,2018-05-30T16:01:48Z,2018-05-30T16:01:48Z,NONE,completed,,"https://reactjs.org/docs/events

Server renders the page properly, and then the client overwrites it with 404 message.",Other
https://github.com/facebook/react/issues/12945,12945,react class strict mode reserved word,[],closed,FALSE,,2,2018-05-31T03:32:30Z,2018-06-07T18:02:36Z,2018-06-07T18:02:36Z,NONE,completed,,"webpack uglify 
![image](https://user-images.githubusercontent.com/16848523/40759741-f6430c78-64c5-11e8-996b-d77557aa49f3.png)

```javascript
				charset: ""charSet"",
				checked: ""checked"",
				children: ""children"",
				cite: ""cite"",
				class: ""className"",
				classid: ""classID"",
				classname: ""className"",
				cols: ""cols"",
				colspan: ""colSpan"",
```

With tools after compression, appeared class reserved word ? 

code in android 4.0 “strict mode reserved word”
",Support
https://github.com/facebook/react/issues/12952,12952,.flowconfig for editing in vscode,[],closed,FALSE,,1,2018-05-31T16:00:18Z,2018-05-31T16:07:28Z,2018-05-31T16:07:28Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Neither I think...? Just ask a question relating to the codebase and flow/editor config.

**What is the current behavior?**

1) git pull react
2) yarn install
3) navigate to project root directory
4) `code .`

Upon doing this, flow type checking does not work at all in vscode, even though
1) 'flow-for-vscode' extension is installed and enabled
2) Typescript has been *disabled* per docs
3) ""flow.useNPMPackagedFlow"" setting is set to *true*

The reason seems to be the lack of a `.flowconfig` file in the project root. Adding an empty `.flowconfig` and reloading vscode makes it work, albeit with loads of linting errors (mainly `__DEV__ not found` errors).

I saw that in `scripts/flow` there are several different `.flowconfig`s along with scripts that appear to get run when you do `yarn flow`. I understand that this is all as it should be and that `yarn flow` functions fine. I just want flow to work in-editor when I open up the project from the root directory.

What is the correct way for generating the necessary `.flowconfig` file? I tried just copy-pasting the one from `scripts/flow/dom/` but that still resulted in a bunch of `__DEV__ not found` errors.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

In-editor Flow type checking, code referencing, etc., should all work on opening a fresh pull of the code, and there should be zero linting errors.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

N/A
",Support
https://github.com/facebook/react/issues/12962,12962,fetch is never executed in componentWillMount when getDerivedStateFromProps present,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-06-01T16:57:57Z,2018-06-20T19:31:20Z,2018-06-20T19:31:19Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

I found 2 suspicious behavior.
Both happen when a component has `static getDerivedStateFromProps()` method.

1. if `componentWillMount` has `fetch`, then `fetch` is never invoked, no request sent, its `.then` never called. Method itself gets called, but not `fetch` in it.
2. `UNSAFE_componentWillMount` is not invoked at all.

  | w/o `getDerivedStateFromProps` | with `getDerivedStateFromProps`
-- | -- | --
`UNSAFE_componentWillMount` | is called; `fetch.then` works OK | is not called at all; Warning: Unsafe legacy lifecycles will not be called for components using new component APIs.
`componentWillMount` | is called; `fetch.then` works OK | is called; `fetch` doesn’t send request, `.then` is not called

**What is the expected behavior?**

Same as for `componentWillMount` alone

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React Hot Loader version: ^4.2.0
React: 16.4.0
node -v: v8.9.4
npm -v: 5.6.0`
Operating system: Ubuntu 16.04.4 LTS xenial
Browser and version: Chrome Version 63.0.3239.132 (Official Build) (64-bit)

**Component**
```javascript
export class Foo extends React.Component {
    render() {
        return (
            <div className={'Foo'}>
            </div>
        );
    }
    constructor( props, context ) {
        super( props );
        this.state = {
            color: '#fff'
        }
    }
    // UNSAFE_componentWillMount() {
    componentWillMount() {
        return fetch( 'https://jsonplaceholder.typicode.com/posts/1' )
            .then( res => res.json() )
            .then( json => {
                console.log( '[json]', json );
            } )
    }
    static getDerivedStateFromProps( props, state ) {
        return { backgroundColor: 'green' }
    }
}
```",Support
https://github.com/facebook/react/issues/12964,12964,Returning an empty fragment throws a confusing error,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,5,2018-06-01T21:11:00Z,2018-08-03T23:34:56Z,2018-06-11T13:43:31Z,CONTRIBUTOR,completed,,"https://codesandbox.io/s/40j50607y0

Rendering a component like:

```js
const Foo = () => <React.Fragment />
```

Throws the error:

> Foo(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.

The error is confusing because clearly `Foo` _is_ returning a value. I don't know if we want to support rendering empty fragments, but in any case this error is confusing.

If this isn't allowed it should explicitly call out that a component cannot return a fragment with no children.

cc @gaearon ",Bug
https://github.com/facebook/react/issues/12967,12967,Allow the second parameter of ReactDOM.render() to be a CSS Selector,[],closed,FALSE,,3,2018-06-02T08:57:53Z,2019-10-06T07:37:38Z,2018-06-03T23:14:58Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Request a feature. It would be lovely to allow for the second parameter of `ReactDOM.render()` to be a string like this:

```js
ReactDOM.render(<MyComponent />, '#root');
```

I can try to implement it if it's a wanted feature. I estimate the bare basics can be done in 10-15 LoC, plus all the testing and documentation.

**What is the current behavior?**
You need to specify the HTML Element as the second parameter of `ReactDOM.render()`, while there is a great API that would allow for a lot more flexibility and cleaner code. If you try to pass a string, the `Target container is not a DOM element.` error is thrown (as expected).

**What is the expected behavior?**
The second parameter can accept a string, which would then be used with `querySelectorAll()` internally.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All of them so far.",Other
https://github.com/facebook/react/issues/12977,12977,why modify state directly works?,[],closed,FALSE,,3,2018-06-04T14:03:31Z,2018-06-05T19:43:29Z,2018-06-05T19:43:29Z,NONE,completed,,"I want report a bug, maybe.

#### Current behavior:

```javascript
componentDidMount() {
    this.state.star = 1000;
    this.setState({ star: this.state.star + 1 }); // 1001
}
```

```javascript
componentDidMount() {
    this.state.star = 1000;
    // this is especially strange
    this.setState(prevState => ({ star: prevState.star + 1 })); // 1001
}
```

```javascript
componentDidMount() {
    const { star } = this.state;
    this.state.star = 1000;
    this.setState({ star: star + 1 }); // 1
}
```

#### Expected behavior:

> Do Not Modify State Directly

But why modify state directly works?

setState is strange.",Support
https://github.com/facebook/react/issues/12988,12988,ReactDOM - Internet Explorer  - ie11 exception thrown and not caught (notFoundError - SCRIPT5022 ),"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-06-06T22:42:38Z,2018-06-24T01:18:43Z,2018-06-24T01:18:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A bug
**What is the current behavior?**
For some reason just IE 11 is raising an exception and pointing to this:
```
ReactBatch.prototype._onComplete = function() {
  if (this._didComplete) {
            return;
  }

  this._didComplete = true;
  const callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }

  // TODO: Error handling.
  for (let i = 0; i < callbacks.length; i++) {
    const callback = callbacks[i];
    callback();
  }
};
```

**What is the expected behavior?**
My guess is that it wouldn't throw an exception if the callback call is handled.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Not sure, started seeing it in the last month and a half or more.

The thing is, the exception just pops up randomly. I can see that it happens on a project a lot lately from the logs. Ill make a fork, this seems very easy to handle, posting for visibility, any insight of what this code actually does and why it would break on ie 11 is welcome.

Thanks",Other
https://github.com/facebook/react/issues/12992,12992,Access SSR rendered markup for component,[],closed,FALSE,,1,2018-06-07T11:01:01Z,2018-08-02T18:52:53Z,2018-08-02T18:52:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I'd like to request a feature: Access SSR rendered markup for component.

I'm working on a custom pagination `HOC`. 
This `HOC` can be rendered on the server side, and should then be dynamically connected on the client.

For example, the SSR sends me this markup:
```html
<div data-pagination-hash=""provider:categories:${hash}"" data-provider-name=""CategoryProvider"">
```

And I want to grab those `data-attributes` in order to hydrate my pagination component with websocket.
Once I've got the hash I can perform a quick query to the server to connect my component to websocket pushes.

However when calling `ReactDOM.findDOMNode(this)` in `componentDidMount` I see this:

```html
<div data-provider-name=""CategoryProvider"">
```

This is because the component renders first without pagination information and lazy loads it in.

I solved this issue by creating a list of hashes on the server, and sending them to the client in a `<script/>` blob, but this seems a little unwieldy and could be far simplified if one was able to access the `data-attributes` from the SSR rendered markup.

I'd like to propose that calling `ReactDOM.findDOMNode(this)` in `componentWillMount` should return the SSR rendered markup (if any).",Feature
https://github.com/facebook/react/issues/12995,12995,can't yield children from a generator in render(),"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,12,2018-06-07T21:44:55Z,2018-08-02T18:49:44Z,2018-08-02T18:49:44Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug.

**What is the current behavior?**

via this thread https://twitter.com/aweary/status/1004837394439290880
passing the result of a generator as a child doesn't 'work'. it renders no children, without an error or warning. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

repro - https://codesandbox.io/s/5zp0j8389x


**What is the expected behavior?**

for the above example, a hundred `<span>`s, numbered 100 -> 1

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.x, all browsers 


(It appears the validation logic drains the iterator, so when we finally try to 'get' the children again, it returns nothing.) ",Support
https://github.com/facebook/react/issues/13032,13032,What is Fabric?,[],closed,FALSE,,2,2018-06-13T00:12:16Z,2018-06-13T11:44:01Z,2018-06-13T11:44:01Z,NONE,completed,,"I found same issue mentioned `Fabric`.

So:
What is Fabric?
What is The difference between Fabric and Fiber?",Support
https://github.com/facebook/react/issues/13034,13034,Some means of determining component order in hierarchy,[],closed,FALSE,,5,2018-06-13T06:27:27Z,2018-06-19T07:16:36Z,2018-06-18T16:57:45Z,NONE,completed,,"I'm trying to build a container component and child component, whereby the children can sit anywhere in the hierarchy beneath the container, but know their relative order/index within that hierarchy.

My use-case is to build a helper wrapper for CSS grids, allowing subcomponents to themselves render a ""row"" component which knows it must be the next index, and may or may not progress the row counter for the next ""row"" component found in order.

I've looked into two possible avenues - recursing using `React.Children` on the component, which stops when it hits a component without `props.children` (e.g. a redux-`connect()`-ed one), and passing some means of counting via context, which fails because it seems the `render()` methods of the child components isn't always called in ""DOM order"".

More background here - https://stackoverflow.com/questions/50776933/react-get-component-order-within-hierarchy

It would be great to have some feature in React which might allow for this.",Support
https://github.com/facebook/react/issues/13035,13035,Does styling affect React's way of re-rendering?,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-06-13T08:53:05Z,2018-06-16T06:07:58Z,2018-06-16T06:07:58Z,NONE,completed,,"```
const Title = ({ length }) => {
  return (
    <div >
      <span>Number of coins on the list:</span>
      <span>{length} </span>
    </div>
  );
};
```

![image](https://user-images.githubusercontent.com/23175345/41339960-dff34c6a-6efe-11e8-8402-47c139725a23.png)

If the dynamic data changes, the browser re-renders both of the spans.

![image](https://user-images.githubusercontent.com/23175345/41339781-62949364-6efe-11e8-8640-d9ab8c09bdc4.png)

If the dynamic data changes, the browser re-renders only the second span, **if the spans are displayed as flex**.

I have read through the React's diff algorithm and it supposed to recurse on chilren before making changes to the changed DOM elements. But in the first image, both of the spans were re-render.






",Other
https://github.com/facebook/react/issues/13066,13066,Text input is doubled on any new character (Japanese language),[],closed,FALSE,,3,2018-06-18T08:25:14Z,2018-06-20T19:03:15Z,2018-06-20T19:03:15Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug.

**What is the current behavior?**
This happens in Safari 11.11 on MacOS 10.12.6 with Hiragana and Katakana keyboard layout.
When text is entered in textarea, on any new character the whole current text plus the new
character is appended to the text.

For example:
I enter 12345
The value or the textarea is:
112123123412345

Example: https://codesandbox.io/s/7z8jnxvok1

",Support
https://github.com/facebook/react/issues/13073,13073,error: possiblePlugin.extractEvents is not a function,[],closed,FALSE,,10,2018-06-19T11:38:02Z,2018-06-19T16:49:26Z,2018-06-19T12:15:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

i want to report a bug.

**What is the current behavior?**

Array.prototype.push([]);

I get an error when i trigger element event :

``` javascript
Uncaught TypeError: possiblePlugin.extractEvents is not a function
    at extractEvents (react-dom.development.js:704)
    at runExtractedEventsInBatch (react-dom.development.js:738)
    at handleTopLevel (react-dom.development.js:4203)
    at batchedUpdates (react-dom.development.js:12539)
    at batchedUpdates (react-dom.development.js:1941)
    at dispatchEvent (react-dom.development.js:4284)
    at interactiveUpdates (react-dom.development.js:12594)
    at interactiveUpdates (react-dom.development.js:1960)
    at dispatchInteractiveEvent (react-dom.development.js:4261)
```


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

Element Event trigger normally.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
i don't known.

** reason**

in this file : https://github.com/facebook/react/blob/master/packages/events/EventPluginRegistry.js

``` javascript?linenums
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) { // pluginIndex = 0  plugins[pluginIndex] = [] so containue
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}
```
when use in : https://github.com/facebook/react/blob/master/packages/events/EventPluginHub.js

``` javascript
    var possiblePlugin = plugins[i]; // when i =0 , possiblePlugin =[]
    if (possiblePlugin) {
      debugger
       //  possiblePlugin.extractEvents is undefined
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
```

![image](https://user-images.githubusercontent.com/19383755/41594879-81d83f34-73f7-11e8-8852-6ef3cc0a0457.png)

**suggest**
add Parameter check 

``` javascript
    if (plugins[pluginIndex] && typeof plugins[pluginIndex].extractEvents === 'function') { // pluginIndex = 0  plugins[pluginIndex] = [] so containue
      continue;
    }
```
",Support
https://github.com/facebook/react/issues/13079,13079,SompongKarnsanga@gmail.com,[],closed,FALSE,,0,2018-06-20T11:24:19Z,2018-06-20T11:40:09Z,2018-06-20T11:40:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/13083,13083,"Vuejs has more stars now. Wake up boiis, let's move to vue!!",[],closed,FALSE,,2,2018-06-21T09:26:08Z,2018-06-21T10:08:58Z,2018-06-21T10:08:57Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/13095,13095,cannot uninstall lodash from project,[],closed,FALSE,,3,2018-06-22T08:44:46Z,2018-06-22T09:56:47Z,2018-06-22T09:32:57Z,NONE,completed,,"Hi Guys,

I use create-react-app to create a project and run eject after. I noticed that if I install lodash, and I uninstall it then, npm start will failed with following message (note that I don`t use any lodash or import lodash in my codes):

Error: Cannot find module 'lodash'
         at Function.Module._resolveFilename (module.js:476:15)
         at Function.Module._load (module.js:424:25)
         at Module.require (module.js:504:17)
         at require (internal/module.js:20:19)
         at Object.<anonymous> (C:/ (my home path)/testweb/node_modules/http-proxy-middleware/lib/index.js:1:84)
         at Module._compile (module.js:577:32)
         at Object.Module._extensions..js (module.js:586:10)
         at Module.load (module.js:494:32)
         at tryModuleLoad (module.js:454:12)
         at Function.Module._load (module.js:445:3)


React version: 15.6.2
lodash: 4.17.10

",Other
https://github.com/facebook/react/issues/13101,13101,replacement for onChange to fire the event when choose selected option in select,[],closed,FALSE,,1,2018-06-23T14:26:01Z,2018-06-23T14:39:00Z,2018-06-23T14:39:00Z,NONE,completed,,"What event instead of onChange should I use for listening when the option was selected? I need it because I have to change state every time select changes even if the selected option was selected. Now I use onChange for select but it fires only when the unselected option was selected. I understand that it is logical behavior, that's why I'm looking for another event. Unfortunately, onClick for an option doesn't work :(

[Pure demo](https://codepen.io/SilencerWeb/pen/vrrJez?editors=0001) (for playing around)
[Demo](https://silencerweb.github.io/karma/storybook/?knob-content=Hi%2C%20I%27m%20button&knob-tag=button&knob-type=positive&knob-theme=primary&knob-title=Action%20name&knob-date=12.05.2018&knob-description=Music%20fan.%20Alcohol%20enthusiast.%20Creator.%20Devoted%20social%20media%20geek.%20Total%20analyst.%20Coffee%20lover.%20Beer%20junkie.%20Coffee%20maven.%20Avid%20alcohol%20lover.%20Twitter%20expert.%20Lifelong%20tv%20ninja.%20Creator.%20Passionate%20tv%20nerd.%20Problem%20solver.%20Proud%20alcohol%20evangelist.%20Lifelong%20web%20junkie.%20Coffee%20maven.%20Unapologetic%20social%20media%20advocate.%20Analyst.%20Tv%20trailblazer.%20Zombie%20geek.%20Twitter%20aficionado.%20Reader.&knob-executors=left&selectedKind=molecules%2FActionCard&selectedStory=default&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybooks%2Fstorybook-addon-knobs) (try to select the selected option, nothing will be changed)

Some pieces of code for better understanding:
```jsx
  handleSelectChange = (e, side) => {
    const state = { ...this.state };

    if (!state.members) state.members = {};

    const value = e.currentTarget.value;

    console.log(`changed! value: ${value}`);

    const newMember = state.persons.find((person) => {
      return person.name === value;
    });

    state.members[side].push({
      avatar: newMember.avatar,
    });

    state.persons = state.persons.map((person) => {
      if (value === person.name) {
        person.isSelected = true;
        person.side = side;
      }

      return person;
    });

    this.setState(state);
  };
```

```jsx
<Select onChange={ (e) => this.handleSelectChange(e, 'right') }>{ ...options }</Select>
```",Support
https://github.com/facebook/react/issues/13113,13113,Moving to React Portal after touchstart swallows future touch events,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,11,2018-06-26T23:55:39Z,2019-05-17T01:27:32Z,2018-08-03T20:24:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug 🐞

**What is the current behavior?**

When you move a component into a React Portal in response to a `touchstart` the `touchmove` and `touchend` events are swallowed for the rest of the interaction



**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Example: https://codesandbox.io/s/nr75vkklnm

> You will either need to be on touch device, or enable touch sensors in your browser to see this

Steps:

1. add a `onTouchStart` listener to a component
2. in response to `onTouchStart` move the component into a Portal
3. touchmove events and the touchend events are then blocked for the rest of the touch interaction

If the component is already in a component before the touchstart event then the events are emitted correctly: https://codesandbox.io/s/v54x54vp5

I have also created a vanilla js example that has a portal implementation. It moves the element into a portal after touch start. It is correctly allowing touch touchmove and touchend events: https://codesandbox.io/s/r4mn0yj6po

**What is the expected behavior?**

That the touchmove and touchend events are published

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Reproduced bug in Firefox and Chrome

React version: tested on 16.1, 16.3 and 16.4.1",Support
https://github.com/facebook/react/issues/13122,13122,static variable declaration  in node module.,[],closed,FALSE,,1,2018-06-28T08:13:11Z,2018-06-28T22:03:44Z,2018-06-28T22:03:44Z,NONE,completed,,"
###  I just made custom component and here a declare static variable. its working fine before publish but after publish my package its given me below error.
**ERROR in ./node_modules/react-js-validator/src/inputs/LetterInput.js 19:18
Module parse failed: Unexpected token (19:18)
You may need an appropriate loader to handle this file type.
```
|         }
|     }
>     static return = false
|    
|     Valid(data) {**
 
```

```
import {
    Valid,
    Letter,
    AlphaNumeric,
    Email,
    CustomRx, Numeric,
    Required, Dummy
} from '../Function'

import React, { Component } from 'react';
export class NumberInput extends Component {
    constructor(props) {
        super(props)
        this.state = {
            input: '',
            errorStatus: '',
            errorMsg: false
        }
    }
    static return = false
    numeric(e) {
        if (isNaN(e.target.value)) {
            NumberInput.return = false
            this.setState({ errorStatus: true, errorMsg: 'Please Enter number only ' })

        }
        else {
            NumberInput.return = true

        }

        if (this.props.onChange) {
            this.props.onChange()
        }
    }

    Valid(data) {
        let result = Numeric(data, 4, 8);
        console.warn(""result"", result)
        if (result.status) {
            this.setState({ errorStatus: false, errorMsg: '' })
        }
        else {
            this.setState({ errorStatus: true, errorMsg: result.msg })

        }
        if (this.props.onChange) {
            this.props.onChange()
        }
        NumberInput.return = result
    }
    render() {
        return (
            <div >
                <span className=""error-span"" style={this.props.styleError} >
                    {this.state.errorStatus ? this.state.errorMsg : null}
                </span>
                <input  {...this.props} onChange={(e) => this.Valid(e.target.value)} type=""text"" />
            </div>
        );
    }
}
```



** React version is here :""react"": ""^16.4.1"",
**

",Other
https://github.com/facebook/react/issues/13134,13134,history props push does not work,[],closed,FALSE,,1,2018-07-01T21:12:10Z,2018-07-01T23:04:26Z,2018-07-01T23:04:26Z,NONE,completed,,"Actually I am using ""react-router-dom"": ""^4.3.1"", If I try to use:

this.props.history.push('/');

And the error is: cannot read property 'push' of undefined.

currently, react-router-dom don't support this method ??

kind regards.
",Other
https://github.com/facebook/react/issues/13154,13154,DOM elements (DIVs) has incorrect properties in componentDidMount,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-07-06T08:01:18Z,2020-03-30T09:53:47Z,2018-07-16T16:45:46Z,NONE,completed,,"I need to render a list of items inside flex-box column. Every item is a div and has arbitrary height. The list of items can be huge so my tactics is to render initially one item and check available space. For that I save refs to parent div and to item's div and then access their **clientHeight** and **offsetHeight** properties. If there is a free space I add one more item and rerender whole thing. The process is repeated until whole column is filled.

The problem is that if I try immediately calculate available space in **componenDidMount** I've got incorrect value of child div's **offsetTop**. I.e. the following method:
```typescript
  public componentDidMount() {
    this.setState({ recalc: true });
  } 
```
Will not work. But if I add some small pause it works:

```typescript
  public componentDidMount() {
    setTimeout( () => this.setState({ recalc: true }), 100);
  }
```

The other method, **componentDidUpdate**, works excellently without any delays:

```typescript
  public componentDidUpdate() {
    this.calcVisibleCount();
  } 
```

Seems like there is some rendering in parallel going when **componentDidMount** is invoked and all refs could be incomplete/incorrect until this process is finished.

Just for the reference:

```typescript
  private calcVisibleCount() {
    const { nlpDialog } = this.props;
    const { showFrom, showTo, recalc } = this.state;

    if (recalc) {
      if (this.shownItems.length) {
        if (this.shownItems[0].offsetTop > 38) {
          if (this.shownItems.length < nlpDialog.items.size && showFrom > 0) {
            this.setState({ showFrom: showFrom - 1 });
          } else {
            this.setState({ recalc: false });
          }
        }
        else if (this.shownItems[0].offsetTop <= 0) {
          if (showFrom < showTo) {
            this.setState({
              showFrom: showFrom + 1,
              recalc: false
            });
          } else {
            this.setState({ recalc: false });
          }
        }
      } else {
        this.setState({
          showFrom: 0,
          showTo: 0,
          recalc: false
        });
      }
    }
  }

  public render() {
    const { nlpDialog } = this.props;
    this.shownItems = [];
    return (
      <Fragment>
        <div styleName=""NLPDialog"" ref={ elem => this.nlpDialogDiv = elem }>
          {
            nlpDialog && nlpDialog.items.map(
              (i, idx) => i && typeof idx === 'number' && idx >= this.state.showFrom && idx <= this.state.showTo &&
                <div key={idx} styleName=""NLPItem"" ref={ elem => elem && this.shownItems.push(elem) } >
                  <span styleName=""Circle"">{i.who}</span>
                  <span styleName=""Message"">{i.text}</span>
                </div>
            )
          }
          <div styleName=""NLPInput"">
            <textarea
              spellCheck={false}
              value={this.state.text}
              onKeyPress={this.onPressEnter.bind(this)}
              onChange={ (e: ChangeEvent<HTMLTextAreaElement>) => this.setState({ text: e.target.value }) }
            />
          </div>
        </div>
      </Fragment>
    );
  }
```
",Support
https://github.com/facebook/react/issues/13170,13170,SVG in <object> tag leads to Uncaught TypeError,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-07-08T06:51:18Z,2018-07-10T23:02:22Z,2018-07-10T23:02:22Z,NONE,completed,,"I have a coderpad which replicates the issue. Take a peek at the console when it runs: https://codepen.io/anon/pen/LrwmGZ#anon-signup

It outputs 2 errors:

`Cannot use 'in' operator to search for 'animation' in undefined`
`Uncaught TypeError: Cannot read property 'textContent' of null`

I can replicate it in the 2 versions I tried: 15.6.1 and 16.4.1.

I also popped the `<object>` tag into an ancient version I found in a coderpad template and it threw the error there as well. It was 0.13.0
",Other
https://github.com/facebook/react/issues/13183,13183,Hydrate injects content into wrong node,[],closed,FALSE,,1,2018-07-09T20:31:01Z,2018-07-10T16:32:42Z,2018-07-10T16:32:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
calling hydrate on a component injects content into wrong dom node

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codepen.io/shmargum/pen/ZjzVaN

**What is the expected behavior?**
I expect hydrate to correctly hydrate the component and not inject incorrect html.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react: 16.4.0
react-dom: 16.4.0
chrome browser
",Other
https://github.com/facebook/react/issues/13188,13188,"If console.error throws while reporting an error, React can enter an invalid internal state","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,8,2018-07-10T21:08:48Z,2018-08-02T17:16:56Z,2018-08-02T17:16:56Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

When `ReactFiberScheduler` exceeds the update count and throws the `Maximum update depth exceeded.` invariant, it did not update `nestedUpdateCount` (leaving it in a ""dirty"" state). This has been fixed in this PR yet to be released: https://github.com/facebook/react/pull/13160/files#diff-24152ba0b2ac251decb6a12f41bdf116R1478

But out of interest + further concern, I [began to explore](https://github.com/facebook/react/pull/13160#issuecomment-403919095) some concerns around whether ReactDOM (Fiber really) maintaining some ""state"" and in fact, being left dirty in at least some error cases was indeed a concern or had been considered in the community. While `nestedUpdateCount` might be fixed here, I can't imagine it was the only state value which could have issues.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I created a repo with `create-react-app` which demonstrates my concern: https://github.com/brokentone/react-dom-enzyme

Observe that you will have 2 test failures. ComponentOne is indeed poorly written, but ComponentTwo is quite simple and should be ""ok."" Skipping ComponentOne should should ComponentTwo passing.

**What is the expected behavior?**

Only `ComponentOne` should fail in my example.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Unclear",Bug
https://github.com/facebook/react/issues/13226,13226,using context to control user logged in  true or false ,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2018-07-17T23:20:09Z,2018-07-24T02:09:28Z,2018-07-24T02:09:28Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I am using Context to implement a user login/ log out feature and I am getting the following error : 

**What is the current behavior?**
warning.js:33 Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

I want to change my slide out menu to either Log In or Log out then link to another page through the menu. I also tried using a ternary but that did not work either ( in the menu) I get the word to change but not the link 


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I am using React 16.4/ React Context API 
What I am noticing though is Context is not robust enough to control state / the passing in through the render could be more straightforward ( esp. documentation). 


See code below: 


import React, { Component, Fragment } from 'react';
import './menu.css';
import { Link } from 'react-router-dom';
import SearchData, { SearchDataContext } from '../searchdata';



class Menu extends Component {
    constructor(props){
        super(props);
        this.userAuthentication= this.userAuthentication.bind(this); 
    }

    userAuthentication(context) {
        if (context.userLoggedIn) { 
            return(
                <Fragment>
                    {/* <div className=""menuLinkStyle""> Log Out </div> */}
                    <Link to=""/UserFavorites""> <div className=""menuLinkStyle""> User Profile </div> </Link>
                </Fragment>
            )
                
        }
        else {
            return(
                <Link to=""/LogIn""> <div className=""menuLinkStyle""> Log In </div> </Link>
            )              
        }
    }

    render() {
        // {context.userLoggedIn ?  <Link to=""/LogIn""> <div className=""menuLinkStyle""> Log Out </div> 
        // </Link>  : <Link to=""/LogIn""> <div className=""menuLinkStyle""> Log In </div> </Link> }

        // {context.userLoggedIn? <Link to=""/UserFavorites""> Favorites </Link> : <span> </span> }

        return (
            <SearchDataContext.Consumer>{(context) => (
                <div className={this.props.visible ? ""invisibleMenuContainer show"" : ""invisibleMenuContainer hide""} onClick={this.props.handleMenuClick}>
                    <div className={this.props.visible ? ""show"" : ""hide""} id=""menuContainer"" onClick={this.props.handleMenuClick}>
                        <Link to=""/""> <div className=""menuLinkStyle"">Home</div></Link>
                        {this.userAuthentication(context)}
                        {/* {context.userLoggedIn ? <Link to=""/UserFavorites""> <div className=""menuLinkStyle""> User Profile </div> </Link> : <Link to=""/LogIn""> <div className=""menuLinkStyle""> Log In </div> </Link>  } */}
                        <Link to=""/MultipleResults""><div className='menuLinkStyle'>Random Snack</div></Link>
                        <Link to=""/About""><div className=""menuLinkStyle"">About</div></Link>
                        <Link to=""/Contact""><div className=""menuLinkStyle"">Contact</div></Link>
                    </div>
                </div>
            )}
            </SearchDataContext.Consumer>
        );
    }
}

export default Menu;
",Other
https://github.com/facebook/react/issues/13238,13238,Using keyboard events impedes media recordings,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2018-07-19T07:56:04Z,2018-08-02T14:12:04Z,2018-08-02T14:11:54Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**  
Bug

**What is the current behavior?**  
When attaching an event handler to the window (or document or body, or anything else, it seems) that will fire on keyboard events (`keyup`, `keydown`) to start/stop a recording with a `MediaRecorder`, some recordings are trimmed at the beginning.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**  
CodeSandbox cannot use Web Audio API it seems so I hosted the app on GitHub pages [here](https://je4hel.github.io/mozrec-react-app/). You can access the source code on [the repository](https://github.com/Je4hel/mozrec-react-app).

Steps:

1. Click `Start` to start recording
1. Say a word
1. Click `Stop` and play the audio file
1. -> No problem

Using the arrow keys:

1. Use the left arrow key to start the recording
1. Say a word
1. Use the right arrow key to stop the recording
1. Play the audio file
1. -> The beginning of the speech is trimmed

*Note: it doesn't happen every time and it seems that it may depend on the word that is pronounced. In French, the following (fake) words induce the problem: `dul` (`/dyl/`) and `couciron` (`/kusiʁɔ̃/`). I don't know a word which causes the problem in English.*

**What is the expected behavior?**
The recordings should be the same whether I use the arrow keys or the buttons to start the recording.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
The sample I provided is version 16.4.1. Originally, I face the issue in a project using version 16.0.0. I am working on Windows  with Chrome.",Other
https://github.com/facebook/react/issues/13239,13239,"React : why state change when try to change it in immuable way , before calling the setState",[],closed,FALSE,,1,2018-07-19T10:09:59Z,2018-07-19T11:05:10Z,2018-07-19T11:05:10Z,NONE,completed,,"hi ,
i got some issu in my code , the state mutate when changing the copy (immuable way) of the object state , how could this happen when we are changing state immuable way , and the setState do not take effect either . thak's for helping

`share = (indexFolder) => { `
        `console.log(this.state.folderInfo);`
       `const updateFolderInfo = [...this.state.folderInfo];`
        `updateFolderInfo[indexFolder].isProcessing = false;`
        `console.log(this.state.folderInfo); // the state is already changed at this line `
        `this.setState({`
               ` folderInfo : updateFolderInfo, // this do not even take effect`
       `})`
    `}`",Support
https://github.com/facebook/react/issues/13245,13245,Grid display does not handle flexible lengths,[],closed,FALSE,,2,2018-07-20T20:21:30Z,2018-07-23T00:24:57Z,2018-07-23T00:24:57Z,NONE,completed,,"It looks like react ignores 'fr' grid flexible length attribute. 

The middle row should fill up the page from top and bottom row.

https://jsfiddle.net/69z2wepo/234996/
",Other
https://github.com/facebook/react/issues/13246,13246,build for production without using service-worker,[],closed,FALSE,,3,2018-07-20T21:31:57Z,2018-07-22T12:28:47Z,2018-07-22T12:28:47Z,NONE,completed,,"Due to on-going problems with React applications built using create-react-app not working in packaged versions of electron (see electron/electron#9705), I'm trying to find how to build production versions of the React application without using the service worker, is this possible?",Other
https://github.com/facebook/react/issues/13251,13251,Getting SSR to work with the React Context API,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,15,2018-07-23T18:56:35Z,2018-08-16T21:36:06Z,2018-08-16T21:36:06Z,NONE,completed,,"Basically we have a module that reads the client data on server side render and is supposed to provide the data to the renderToString with the data it found (and the client renders with a `window.__SOME_DATA__`, but I would not want to use a global on a express route)

Here is where we are:


    const contentService = new ServerService();
    const app = (
      <StaticRouter context={context} location={req.url}>
        <App/>
      </StaticRouter>
    );

    try {
      await contentService.getSomeData(app);
    } catch (error) {
      console.log('THERE WAS A MARKUP ERROR', error);
    }

    const markup = renderToString(
      contentService.withProvider(
        app
      )
    );

The server service looks like so:

    export class ServerService {
      items = {};
    
      getSomeData = async (app) => {
        // gets some server side data and saves it to the `items` object
      };
    
      withProvider = (app) => {
        const providedApp = (
          <ServerProvider data={this.items}>
            { app }
          </ServerProvider>
        );
    
        console.log('ITEMS provided', { data: this.items });
    
        return providedApp;
      };
    
      getScriptData() {
        return `
          <script>
              window. __SOME_DATA__ = ${JSON.stringify(this.items)};
          </script>
        `;
      }
    }

And then last but not least my provider:

    import * as React from 'react';
    
    const ServerContext = React.createContext(null);
    
    export class ServerProvider extends React.Component {
      render () {
        console.log('Providing data', { props: this.props });
    
        return (
          <ServerContext.Provider value={{ ...this.props.data }}>
            {this.props.children}
          </ServerContext.Provider>
        );
      }
    }
    export const ServerConsumer = ServerContext.Consumer;

The problem is that it seems to set the data in the `withProvider` function fine, but when I use the `ServerConsumer` component, it seems to contain **nothing** -- but it _should_ contain the data that was passed to the provider!

The context api has worked beautifully for when I need it on the client side, but it seems to be failing for me on the server side.

This is with react/react-dom `16.4.1`

(originally posted here: https://stackoverflow.com/q/51485320/561731)",Support
https://github.com/facebook/react/issues/13257,13257,Render single react component instead of complete application from server,[],closed,FALSE,,2,2018-07-24T05:13:20Z,2018-07-24T05:24:07Z,2018-07-24T05:19:02Z,NONE,completed,,"I went through many articles on server side rendering of react and the all of them has the following in common :-

- The server route renders a complete html page with a div which wraps the root react component, just like traditional react code
- it also includes reference to a bundle.js which is called by browser once the skeleton is loaded and the view re-renders with all javascript functionality.
This approach always leads me to download my whole frontend app in one go. Is there any way where I can selectively render react components in divs? . What I mean to say is, for example ""/graph"" only gives me graph component, ""/table"" only gives me table component etc so that :-

-I can embed react components into a pre-existing webapp.

The response from the routes are just smaller components instead of the whole outer root component. I know react can be embedded in other web apps in case of client side rendering, but I am wondering if same thing can be achieved in server side rendering. Thanks.",Support
https://github.com/facebook/react/issues/13286,13286,Discussion: Synchronous State Management and Async React,[],closed,FALSE,,3,2018-07-29T17:30:12Z,2018-08-03T01:13:26Z,2018-08-02T13:32:41Z,NONE,completed,,"The React team has put out a fair amount of info on the upcoming async React concepts, including time sliced rendering and Suspense.  They've also been in contact with the various state management library teams (Redux, MobX, and Apollo) to give us an early heads-up on how these libraries might need to change to work correctly with async React.

At this point I personally feel like I still have only a partial understanding of what types of changes are needed.  Quoting a discussion between Dan and myself in https://github.com/reduxjs/react-redux/pull/898#issuecomment-375790227 :

> To the best of my understanding, these are the problems that React-Redux faces when trying to work with async React:

> 1. React's time-slicing means that it's possible for other browser events to occur in between slices of update work. React might have half of a component tree diff calculation done, pause to let the browser handle some events, and something else might happen during that time (like a Redux action being dispatched). That could cause different parts of the component tree to read different values from the store, which is known as ""tearing"", rather than all components rendering based on the same store contents in the same diff calculation.

> 2. Because of time-slicing, React also has the ability to set aside partially-completed tree diffs if a higher priority update occurs in the middle. It would fully calculate and apply the changes from the higher-priority change (like a textbox keystroke), then go back to the partially-calculated low-pri diff, modify it based on the completed high-pri update, and finish calculating and applying the low-pri diff.
> In other words, React has the ability to re-order queued updates based on priority, but also will start calculating low-pri updates as soon as they're queued. That is not how Redux works out of the box. If I dispatch a ""DATA_LOADED"" action and then a ""TEXT_UPDATED"" action, the data load causes a new store state right away. The UI will eventually look ""right"", but the sequence of calculating and applying the updates was not optimal, because Redux pushed state updates into React in the order they came in.


There was also some relevant discussion on Twitter at https://twitter.com/dan_abramov/status/1010978574105567234 : 

> **swyx**: so if anything async react “absorbs into the platform” some tricky parts of state mgmt (more accurately, creates a priority queue for UI interactions, and pushes async deps to whatever cache lib people end up using). haha, i guess im too eagerly taking those for granted.

> **dan_abramov**: yeah. For the best desired experience, it needs control over when to apply updates, and what version of state to render with. So if a lib wants to own that, it’s missing out (although could work by getting “deoptimized” to sync mode).  

> **mweststrate**: For inspiration: Is there an abstract write down / complete overview of which conceptual operations need to be supported to fully support async? Fork + replay changes made in forks suffices? (hints about conflicts resolution?)  

> **dan_abramov**: Paging acdlite who’s currently working out how to make Relay work with it
> **dan_abramov**: I think the main idea is that either your thing is meant for UI state that changes with interactions (and then we need a way to “route” it through setState—so it needs to provide a reducer), or it's more like a data cache (in which case your own storage is fine if it’s immutable)
> **dan_abramov**: There is a third option too (a mutable data cache) which is what Relay will end up being for now. But this means it “deopts” to sync mode in some cases.

> **sebmarkbage**: Those are more downstream recommendations, not first principles. A first principles is that you need to be able to read consistent old versions so if a parent passes data, the child needs to be able to read the version that the parent passed even after it has changed later.
> **sebmarkbage**: Another first principle is that you need to be able to make edits to old versions and also make the same edit on the latest version (rebase).

> **dan_abramov**: How would you do it without letting React manage state for you? We don't explicitly tell libs “now is time to rebase”.

> **mweststrate**: Would need some kind of hooks were React tells: I want to fork / rebase this prop?

The phrase ""deopts to sync mode"" was explained by Brian in https://github.com/facebook/react/issues/13186#issuecomment-403959161 : 

> State updates scheduled from componentDidMount or componentDidUpdate are processed synchronously and flushed before the user sees the UI update. This is important for certain use cases (e.g. positioning a tooltip after measuring a rendered DOM element). In the case we're describing, this means that users of your application will never even see the temporary stale value because React will process the new value (synchronously) before yielding.

> That might sound like a good thing, but what if the re-render includes a lot of components or is slow for some other reason? Then it might impact the frame rate and cause your application to feel unresponsive. This is what we are referring to when we say that create-subscription de-opts to synchronous rendering mode in some cases.

Also, Andrew commented in https://twitter.com/acdlite/status/1015286450537951233 : 

> We've learned from our work making Relay interop with async React, will share more soon.

Finally, there's some related discussion in https://github.com/reduxjs/react-redux/issues/890 .

So, at this point what I would particularly appreciate is further info on exactly what constraints a normally-synchronous state management lib like Redux or MobX needs to comply with in order to work correctly with async React behavior, and any suggestions on possible implementations.  It would also be extremely beneficial if we could come up with some demo apps that specifically demonstrate problematic interactions between async React and synchronous state management logic, so that we can use those as points of reference for ensuring that new versions of our libraries work correctly going forward.

Paging @gaearon , @acdlite , @bvaughn , @timdorr , @jimbolla , @cellog , @mweststrate, @peggyrayzis , and @jbaxleyiii for their thoughts and participation.

",Support
https://github.com/facebook/react/issues/13316,13316,[Feature]React behaves bad performance when updating a very huge array,[],closed,FALSE,,5,2018-08-03T06:44:58Z,2018-08-03T14:18:31Z,2018-08-03T10:27:43Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
feature

**What is the current behavior?**
There's very bad performance if I only want to update a very small part of an array with the `setState` method, which causes the `render` method is triggered every time I update the array, and the entire array is traversed again and again . As the array gets larger and larger, react takes more resource of the computer, especially CPU. In such cases, calling the DOM  method `ParentNode.append` with the `ref` feature of react makes a lot better performance than the React's `setState` way. However, calling the DOM method a lot out of React is not the graceful solution.

I have come across such scenario a few times. Here is an example written in pseudocode.
```jsx
class DataList extends React.Component {
  constructor (props) {
    super(props);
    this.state = {
      dataSourceList = [],
    };
  }

  getData = () => {
    // Some data is being fetched from the server
    // This piece of data is assigned to a variable, say `newData`
    this.setState({
      dataSourceList: _.deepClone(this.state.dataSourceList).push(newData)
    });
  }

  render () {
    return (
      <div>
        {
          this.state.dataSourceList.map(v => {
            return <DataItem key={v.id} value={v.value} />
          })
        }
      </div>
    );
  }
}
```
Every time the `getData` method is invoked, the `render` method and `map` method are triggered in order to update the React element array. This does not bother much performance if you fetch these data manually by clicking some button to trigger the `getData` method.

However, there is a scenario where this costs a lot of CPU resource. I wrote a ""streaming log"" component with which a line of log was printed to the screen every time the ""websocket"" receive a message from the server. One piece of message renders the counterpart component `DataItem` above. Sometimes, the server sends hundreds of thousands of messages within one second, which causes the `render` method and `map` method has to be triggered thousands of times accordingly. This behavior even makes the current web page occupy 100% of the CPU and my computer got frozen until the updating process was finished.

In order to solve this issue, I have to use the web API's `append` method to mount a DOM node carrying those messages directly in to the DOM node of the ""steaming log"" component' wrapper `div`. This solution avoids the `render` part which is under the complexity of O(n) (*n* is the length of the array). A snippet of pseudocode is as below

```jsx
class DataList extends React.Component {

  getData = () => {
    // Some data is being fetched from the server
    // This piece of data is assigned to a variable, say `newData`
    dataItem = document.createElement('div');
    dataItem.innerHTML = newData.value;
    this.containerNode.append(dataItem);
  }

  render () {
    return (
      <div ref={node => this.containerNode = node} />
    );
  }
}
```
Even though using the DOM method `append` improves the behavior greatly, it is not always the elegant solution. Is it possible that we have a _""React""_ way to update a very small part of the array, or just to pushing an element to the array to be rendered?

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

It is not a bug. It probably be a flaw of the React architecture

**What is the expected behavior?**
The expected behavior is we may update the array in the above scenario with the original React API rather than directly calling the DOM node's method

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Present version: v16.x
Browser: All
OS: All
It did not work in previous versions either.
",Support
https://github.com/facebook/react/issues/13328,13328,props.children slot feature,[],closed,FALSE,,3,2018-08-06T12:21:37Z,2019-08-30T10:05:44Z,2018-08-06T12:55:47Z,NONE,completed,,"_Feature request_

I'm thinking about the need of a sort of [slot](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots) feature introduced inside the props.children existing feature.

My proposal would be to allow the use of a specific directive inside children markup, let's say `children-slot-slotname` then on JSX side we would be able to write `{this.props.children.slots[slotname]}` instead of the uniq `{this.props.children}` 

More than the syntaxe, my intent here is to open the discussion and have a feedback about this eventual feature.

Thx
",Support
https://github.com/facebook/react/issues/13331,13331,"[Question] RE: Rendering arrays of components, should these implementations behave the same?",[],closed,FALSE,,1,2018-08-06T18:18:43Z,2018-08-06T18:33:09Z,2018-08-06T18:33:09Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Possible bug, though it is likely this is an expected behavior that I'm misinterpreting.

**What is the current behavior?**
Say I have an array of components I'd like to render, but I also want to weave `<hr>` tags between each item. For example:

```jsx
const Delimited = props => (
  props.items.reduce((a, b) => (
    <React.Fragment>
      {a} <hr /> {b}
    </React.Fragment>
  ))
)

<Delimited items={[<One key=""one"" />, <Two key=""two"" />, <Three key=""three"" />]} />
/*
  <One />
  <hr />
  <Two />
  <hr />
  <Three />
*/
```

This works, however if the components in the array have state, **they forget their state when the parent refreshes**. Seems bad.

If I rewrite the **Delimited** component so that it produces the same result by inserting the `<hr>`'s into the array, the items keep their internal state.

```jsx
// Same render as above, and if the items have 
// state it is retained if the parent refreshes.
const Delimited = props => {
  const results = [...props.items]
  for (let i = results.length - 1; i > 0; i--) {
    results.splice(i, 0, <hr />)
  }

  return results
}
```

Adding a `key` prop to `<React.Fragment>` doesn't change the outcome.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**
https://codesandbox.io/s/n9158p8j9p

1. First, click on one or more of the Toggle buttons.
2. Click ""Add"", the toggled buttons should retain their state.
3. Click ""Use Reduce"", which renders the buttons using `.reduce()`
4. Repeat steps 1 and 2.
5. This time, all of the Toggle buttons forget their state.

<img width=""123"" alt=""screen shot 2018-08-06 at 12 25 45 pm"" src=""https://user-images.githubusercontent.com/2754163/43731387-f5afe014-9973-11e8-885f-8fc57f83a56b.png"">

**Click Add**

<img width=""140"" alt=""screen shot 2018-08-06 at 12 25 54 pm"" src=""https://user-images.githubusercontent.com/2754163/43731439-22d11a36-9974-11e8-9167-11e66420b30d.png"">

**What is the expected behavior?**
It seems like the component are getting re-mounted using `.reduce()`, but updates the existing component when you use the `for` loop. Shouldn't both implementations update the existing component?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- React 16.4.2
- Chrome 67
- OSX High Sierra",Support
https://github.com/facebook/react/issues/13338,13338,[Feature request] Unmount a component at will,[],closed,FALSE,,1,2018-08-07T08:38:08Z,2018-08-07T09:11:58Z,2018-08-07T09:11:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?** - Request feature

I want to be able to unmount a component at will. I think a life cycle could be good:

```jsx
class MyComponent extends React.Component {
  // the rest
  componentShouldUnmount () {
     return this.state.shouldUnmount;
  }
}
```

or maybe returning a special value provided by React on render can also be good:

```jsx
class MyComponent extends React.Component {
  // the rest

  render () {
    if (this.state.shouldUnmount) return React.shouldUnmount;

    // the rest
  }
}
```",Support
https://github.com/facebook/react/issues/13355,13355,Ability to use return value of React.Children.map with React.Children.only,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":139653724,""node_id"":""MDU6TGFiZWwxMzk2NTM3MjQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities"",""name"":""Component: Core Utilities"",""color"":""c5def5"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,4,2018-08-09T15:39:29Z,2020-01-19T01:49:00Z,2020-01-19T01:49:00Z,NONE,completed,,"As stated in the docs and shown in #4410, the return value of `React.Children.map` is incompatible with the `React.Children.only` function, and will return with the error message:
> Invariant Violation: Invariant Violation: React.Children.only expected to receive a single React element child.

if used. 

This incompatibility causes some fairly annoying restrictions, however. From what I understand, this means that you can't edit the properties of a component's children at runtime if they contain any component that requires a single child. (eg. you can't dynamically set the disabled prop of a child `TouchableNativeFeedback` component in the parent).

I believe this is due to the type differences between the `this.props.children` parameter and the `React.Children.map` return value, the former being a valid element and the latter not (see #4424 and https://github.com/reactjs/reactjs.org/issues/87). 

I'd like to make a request to have the return type of `React.Children.map` be the same as the type of `this.props.children`, which will fix these quirks and be much more intuitive. A separate static function that converts the return type of `React.Children.map` to the same type as `this.props.children` would also solve the issue. It feels like some sort of fix is in order, since it's a broad and strange restriction on the components you can use.",Feature
https://github.com/facebook/react/issues/13365,13365,"I want to use crypto module of node.js, but it does not work",[],closed,FALSE,,1,2018-08-10T14:58:13Z,2018-08-10T15:48:03Z,2018-08-10T15:47:42Z,NONE,completed,,"I want to use crypto.createDiffieHellman do some DH encryption in react code.

**I only the followed error in React.js, It can work fine in nodejs.**

the followed is my code in React.js : 
```
import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import crypto from 'crypto';

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      text : 112
    }
  }
  componentDidMount() {

    let start_time = new Date().getTime();
    let client = crypto.createDiffieHellman(128, 2);
    
  }
  render() {
    return (
      <div className=""App"">
        <header className=""App-header"">
          <img src={logo} className=""App-logo"" alt=""logo"" />
          <h1 className=""App-title"">Welcome to React</h1>
        </header>
        <p className=""App-intro"">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>
    );
  }
}

export default App;
```

**but I have a exception like :**

```
index.js:107 Uncaught Error: If encoding is specified then the first argument must be a string
    at new Buffer (index.js:107)
    at createDiffieHellman (browser.js:27)
    at Object.createDiffieHellman (browser.js:19)
    at App.componentDidMount (App.js:38)
    at commitLifeCycles (react-dom.development.js:14362)
    at commitAllLifeCycles (react-dom.development.js:15463)
    at HTMLUnknownElement.callCallback (react-dom.development.js:100)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:138)
    at invokeGuardedCallback (react-dom.development.js:187)
    at commitRoot (react-dom.development.js:15604)
    at completeRoot (react-dom.development.js:16619)
    at performWorkOnRoot (react-dom.development.js:16564)
    at performWork (react-dom.development.js:16483)
    at performSyncWork (react-dom.development.js:16455)
    at requestWork (react-dom.development.js:16355)
    at scheduleWork$1 (react-dom.development.js:16219)
    at scheduleRootUpdate (react-dom.development.js:16786)
    at updateContainerAtExpirationTime (react-dom.development.js:16813)
    at updateContainer (react-dom.development.js:16840)
    at ReactRoot../node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render (react-dom.development.js:17123)
    at react-dom.development.js:17263
    at unbatchedUpdates (react-dom.development.js:16680)
    at legacyRenderSubtreeIntoContainer (react-dom.development.js:17259)
    at Object.render (react-dom.development.js:17318)
    at Object../src/index.js (index.js:7)
    at __webpack_require__ (bootstrap e8414889095468667716:678)
    at fn (bootstrap e8414889095468667716:88)
    at Object.0 (registerServiceWorker.js:117)
    at __webpack_require__ (bootstrap e8414889095468667716:678)
    at ./node_modules/ansi-regex/index.js.module.exports (bootstrap e8414889095468667716:724)
    at bootstrap e8414889095468667716:724
```

",Other
https://github.com/facebook/react/issues/13369,13369,e.preventDefault() does not work with safari in ios11.3 and later,[],closed,FALSE,,1,2018-08-11T03:49:11Z,2018-08-11T09:38:52Z,2018-08-11T09:38:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
e.preventDefault() does not work with safari in ios11.3 and later
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Reproduction link
https://codesandbox.io/s/rwmw5536np
Steps to reproduce
1.scroll the page in safari under ios11.3
2.scroll the page in safari beyond ios11.3
**What is the expected behavior?**
the page can not be scrolled
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: ^16.4.2
browser: safari
OS: ios11.4.1",Other
https://github.com/facebook/react/issues/13405,13405,create-subscription: call getValue in the constructor is too early,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,16,2018-08-15T10:54:06Z,2018-08-21T15:36:41Z,2018-08-16T14:42:11Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

BUG

**What is the current behavior?**

https://codepen.io/intptr/pen/djEzbr?editors=1010

I made an example to show the execution order of some lifecycle functions while remounting a component:

```
newComponent.constructor() -> oldComponent.componentWillUnmount() -> newComponent.componentDidMount()
```

`create-subscription` calls `getValue` in `constructor` and save the result to its state. Before `componentDidMount` called, any changes will be ignored.

If I remount a component wrapped by `create-subscription` component, and do something in its `componentWillMount` which will modify the source value, I will get the wrong value in `componentDidMount` in the new component.

```
newComp.constructor -> oldComp.cWU -> newComp.cDM
state = A              A -> B         A !! (correct: B)
```

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.4.2 (latest)
",Support
https://github.com/facebook/react/issues/13410,13410,Investigate why select._wrapperState.initialValue is necessary,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-08-16T00:25:52Z,2018-08-16T14:56:24Z,2018-08-16T14:56:23Z,CONTRIBUTOR,completed,,"Uncovered during @raunofreiberg's select work (#13389).

`select._wrapperState.initialValue` is only ever assigned, never referenced. Can it be removed?

Example:
https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMFiberSelect.js#L191

It would be great if someone could investigate this, and figure out if it can be removed.",Bug
https://github.com/facebook/react/issues/13411,13411,KeyboardEvent.repeat is not normalized,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,7,2018-08-16T01:41:06Z,2020-01-17T09:59:24Z,2020-01-17T09:59:24Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Documentation of SyntheticEvent claims: ""React normalizes events so that they have consistent properties across different browsers."" https://reactjs.org/docs/events.html#supported-events

Documentation of Keyboard Events lists `boolean repeat` as a supported field: https://reactjs.org/docs/events.html#keyboard-events

IE11/Edge do not natively support `repeat`, but React does not normalize the event to set `repeat: true` when a keyDown event repeats (i.e. when a key is held down). (Edge has an open bug on this but of course IE11 is abandonware.)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

Tab to to the only div in this repro and hold down a key:
https://jsfiddle.net/acsr4ofu/

Bug: 'repeat!' alert does not appear in IE11

**What is the expected behavior?**
An alert dialog showing 'repeat!' should appear in any browser that React supports.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Current version of React, any browser which does not natively support `KeyboardEvent.repeat` but IE/Edge in particular (Chrome always supported; FF since 28; Safari since 10.1). Unknown if this worked in previous versions of React.",Feature
https://github.com/facebook/react/issues/13467,13467,Ability to intercept all SyntheticEvent.,[],closed,FALSE,,1,2018-08-23T05:40:16Z,2018-08-23T17:50:43Z,2018-08-23T17:50:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I think it's a feature. I would like to intercept all event trigger in order to record all events.
",Support
https://github.com/facebook/react/issues/13471,13471,no us,[],closed,FALSE,,0,2018-08-23T10:11:36Z,2018-08-23T11:22:20Z,2018-08-23T11:22:20Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/13487,13487,react-test-renderer: is possible to test lifecycle functions?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710400704,""node_id"":""MDU6TGFiZWw3MTA0MDA3MDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer"",""name"":""Component: Test Renderer"",""color"":""006b75"",""default"":false,""description"":null}]",closed,FALSE,,10,2018-08-26T13:10:45Z,2019-04-16T08:06:39Z,2018-08-26T15:38:16Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Question

**What is the current behavior?**

I am trying to use `react-test-renderer` and I notice that the lifecycles methods (ex: `componentDidMount`) need to be fired manually - `rendered.getInstance().componentDidMount()`, what solves my problem but reveals an other: I want to use shallow render, to test only the component under test, but then `react-test-renderer/shallow` API is minimal for rendering.

**What is the expected behavior?**

I was expecting that `react-test-renderer` would support testing my component reaction to the different lifecycles and be capable to use `shallow` rendering. Is there some way to use `react-test-renderer` in this scenario? Or is better I move to another library like `enzyme`?
",Support
https://github.com/facebook/react/issues/13496,13496,React code base coverage results appear incorrect,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,4,2018-08-28T05:33:06Z,2019-05-29T22:26:18Z,2019-05-29T22:26:18Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
In order to contribute to React, I was going through the coverage results to find code which needs additional testing. While doing that, I noticed that the coverage results appear incorrect

For example file `packages/create-subscription/src/createSubscription.js`, notice that coveralls says branches are not covered on [L16](https://coveralls.io/builds/18690124/source?filename=packages/create-subscription/src/createSubscription.js#L16) which is actually a function call.
![coveralls](https://user-images.githubusercontent.com/16024985/44702510-a1940600-aa48-11e8-89b7-3585693bb658.png)

When I ran jest in my workspace with `--coverage`, it gave if/else path are missing on the same line 16 as shown in the screenshot:
![coverage](https://user-images.githubusercontent.com/16024985/44702557-e3bd4780-aa48-11e8-8923-18b619b5dd93.png)

This appears to be a bug.",Other
https://github.com/facebook/react/issues/13500,13500,Angular 1.x to React,[],closed,FALSE,,1,2018-08-28T14:12:00Z,2018-08-28T16:05:17Z,2018-08-28T16:05:17Z,NONE,completed,,Is there any way to migrate existing Angual app to Completely in React,Other
https://github.com/facebook/react/issues/13512,13512,Node/UMD bundles are broken on master,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,6,2018-08-29T19:29:58Z,2018-09-02T00:58:46Z,2018-09-01T19:00:00Z,MEMBER,completed,bvaughn,"See https://github.com/facebook/react/pull/13509#pullrequestreview-150683126.
We'll need to remember to fix it one way or the other before cutting a release.",Bug
https://github.com/facebook/react/issues/13523,13523,Provide a way to throw error (maybe asynchronous) that can be handled by componentDidCatch,[],closed,FALSE,,5,2018-08-31T07:21:41Z,2021-08-06T05:45:04Z,2018-09-11T17:20:06Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature request.

**What is the current behavior?**
`componentDidCatch` can only handle synchronous error.

**What is the expected behavior?**
The capability of error boundaries to handle asynchronous error.

The error boundaries example in the docs is very similar with how an asynchronous error is handled in React.

```javascript
class WithAsyncData extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null, value: null };
  }

  // using componentDidMount instead of componentDidCatch
  componentDidMount() {
    doAsynchronousThing()
      .then(value => this.setState({ value }))
      .catch(error => this.setState({ error }))
  }

  render() {
    if (this.state.error) {
      return <h1>An error occured.</h1>;
    }
    return this.props.children;
  }
}
```

Unfortunately, the new `componentDidCatch` lifecycle only aware of synchronous error. I think, it will be
good to provide a way to throw an error asynchronously, like:

```javascript
class WithAsyncData extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null, value: null };
  }

  componentDidMount() {
    doAsynchronousThing()
      .then(value => this.setState({ value }))
      .catch(error => this.throwError(error)) // throwing error asynchronously
  }

  render() {
    if (this.state.error) {
      return <h1>An error occured.</h1>;
    }
    return this.props.children;
  }
}
```

With that, a network error can be handled in single place with a NetworkErrorBoundary component for example.",Support
https://github.com/facebook/react/issues/13527,13527,Uncaught SyntaxError: Unexpected token <,[],closed,FALSE,,9,2018-09-01T05:04:55Z,2018-09-02T20:32:42Z,2018-09-01T19:57:49Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
  *bug*
**What is the current behavior?**
  - The app doesn't render at all

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
[Link to broken App](https://react-client-panel-1e6bd.firebaseapp.com/)
**What is the expected behavior?**
  - The app should render

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react v16
chrome

*Notes* I am using firebase. my public directory is `build`. I have had scenarios where It just worked when I wrote `./build/`. I'm frustrated please help.",Support
https://github.com/facebook/react/issues/13563,13563,Document fragments cannot respond to events.,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2018-09-05T10:01:15Z,2020-01-19T01:49:04Z,2020-01-19T01:49:04Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug.

**What is the current behavior?**

Due to https://github.com/facebook/react/blob/ff93996028acb55b4f76aa11e29eef210a213e20/packages/react-dom/src/client/ReactDOMComponent.js#L225-L233 event listeners are added to the `DocumentFragment`, which we cannot access or modify.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```jsx
import React from ""react"";
import ReactDOM from ""react-dom"";

import ""./styles.css"";

function doSomething() {
  alert(""Something happens!"");
}

function App() {
  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2 onClick={doSomething}>Click me and nothing would happen.</h2>
    </div>
  );
}

const rootElement = document.getElementById(""root"");
var frag = document.createDocumentFragment();
ReactDOM.render(<App />, frag);
rootElement.appendChild(frag);
```

https://codesandbox.io/s/71znk844nj

**What is the expected behavior?**

We could manually call `manageEvents(element)` in some other element or the document, so that our components could still respond to the events.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
v16.4.2.",Other
https://github.com/facebook/react/issues/13601,13601,react-dom/profiling TypeError: Cannot read property 'current' of null,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,2,2018-09-08T19:17:46Z,2018-09-10T15:32:56Z,2018-09-10T15:32:56Z,MEMBER,completed,bvaughn,"I can't quite figure out how to use the profiling build. I aliased `react-dom` to `react-dom/profiling` but I get this error:

<img width=""448"" alt=""screen shot 2018-09-08 at 20 17 02"" src=""https://user-images.githubusercontent.com/810438/45257816-2d405780-b3a4-11e8-9615-0b27abd0442b.png"">
<img width=""272"" alt=""screen shot 2018-09-08 at 20 17 06"" src=""https://user-images.githubusercontent.com/810438/45257817-2d405780-b3a4-11e8-8a08-f5a0650debfe.png"">

I didn't want interactions, I just want profiling. What am I doing wrong?

To repro, use CRA, then eject, then add `react-dom` -> `react-dom/profiling` to alias in webpack prod config and build.",Bug
https://github.com/facebook/react/issues/13617,13617,[React 16.5] - NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2018-09-11T14:06:31Z,2018-09-11T17:23:08Z,2018-09-11T17:13:51Z,NONE,completed,,"I am having a bug using wijmo 5.20182.500 with react. It appears that react is attempting to redraw a control when it has not changed. I have a TreeView control that when selected changes a state property and reveals some other controls on screen. The logic to render both the TreeView and the other content exists together in a single render call. It appears that even though the TreeView has not changed react is re-rendering it, because when I click on a TreeView checkbox the whole control blinks and resets all the checkboxes (which is the default state). I found some related posts, which all indicated wrapping the control in a div, but that has not worked for me. I've included a screenshot but basically what happens is that when checkedItemsChanged is called it updates state, which of course triggers render. However the TreeView control should not re-render but it does every time for some reason and I think that's at least part of reason for the error I included below (chrome browser). 

```js
checkedItemsChanged = (s, e) => {
        const self = this;
        const currentItem = this.reportsTreeView.selectedItem;

        if (currentItem.report) {
            if (currentItem.report === 'MarketingMaterials') {
                const selectedReport = ""MarketingMaterial"";
                self.setState({ selectedReport });
            } else if (currentItem.report === 'DataPak') {
                const selectedReport = ""DataPak"";
                self.setState({ selectedReport });
            }
        }
    }

render() {
        if (!this.props.user.id)
            return null;

        const reportsTreeViewItems = this.securetizeScreen();

        let paramView = this.getParamView();

        return (
            <main className=""container"">
                <div className=""row PageTitle"">
                    <b>Select Report:</b>
                </div>

                <div className=""row pm-form-container"">
                    <div className=""col-md-3"">
                        <label className=""dropdown-label label-inline pm-label pm-label-top""></label>
                        <div className=""dropdown dropdown-left pm-treeview-container"">
                            <TreeView
                                initialized={this.reportsTreeViewInitialized}
                                itemsSource={reportsTreeViewItems}
                                displayMemberPath={'header'}
                                childItemsPath={'items'}
                                showCheckboxes={Boolean(true)}
                                formatItem={this.formatItem}
                                checkedItemsChanged={this.checkedItemsChanged}
                                isCheckedChanged={this.itemChecked}
                            />
                        </div>
                    </div>

                    {paramView}

                </div>
            </main>
        );
    }
```

![image](https://user-images.githubusercontent.com/1474935/45365174-ef148500-b5a9-11e8-8d88-70992c9af0e1.png)

",Support
https://github.com/facebook/react/issues/13635,13635,Event delegation in React,[],closed,FALSE,,2,2018-09-13T04:32:59Z,2021-05-04T20:37:20Z,2018-09-13T17:22:42Z,NONE,completed,,"Given that [React does attach event handlers to the nodes themselves](https://github.com/facebook/react/issues/13625), does the React team recommend app developers to do event delegation when working with large lists for saving memory? Something like:

```jsx
import React from 'react';
import ReactDOM from 'react-dom';

class App extends React.Component {
  render() {
    return (
      <ul onClick={(e) => console.log(`ID: ${e.target.dataset.id} was clicked`)}>
        <li data-id=""1"">Item 1</li>
        <li data-id=""2"">Item 2</li>
        <li data-id=""3"">Item 3</li>
        ...
      </ul>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('root'));
```",Support
https://github.com/facebook/react/issues/13653,13653,React 16.5.0 causes all Jest unit tests to fail,[],closed,FALSE,,2,2018-09-14T16:34:59Z,2018-09-14T16:50:12Z,2018-09-14T16:50:12Z,NONE,completed,,"I'm using Jest/ Enzyme to do unit tests in a project I'm working on, but recently upgrading to 16.5.0 has caused errors to appear in almost all of my unit tests.  The error occurs when use enzyme in a unit test to mount a component.  I've given an example of this code below:

```
const wrapper = mount(<ComponentName value='test' />);
```

However, since upgrading to 16.5.0, this always fails with the following error:

```
Invariant Violation: Unable to find node on an unmounted component.    
      at invariant (node_modules/fbjs/lib/invariant.js:42:15)
      at findCurrentFiberUsingSlowPath (node_modules/react-reconciler/cjs/react-reconciler-reflection.development.js:155:30)
      at toTree (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:96:60)
      at Object.getNode (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:239:33)
      at new ReactWrapper (node_modules/enzyme/build/ReactWrapper.js:100:33)
      at mount (node_modules/enzyme/build/mount.js:19:10)
```
I've since downgraded to React 16.4.0 since it was not causing issues, but I think this should be looked at further.

Thanks!
",Support
https://github.com/facebook/react/issues/13655,13655,"""Cannot update during an existing state transition"" exception is not caught by componentDidCatch","[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,3,2018-09-14T22:24:28Z,2018-09-15T11:19:47Z,2018-09-15T11:19:47Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

I'm working with `react-apollo` right now and there was a mistake in my code which could re-render the inner query at the same time with the outer query (this was an integration test). I can see this React error in the console (which perfectly makes sense), but the problem is that I expect it to be caught by top-level boundary component with componentDidCatch() but it didn't get executed in this case. As a result, `jest` hangs up and bitbucket pipelines stop the build for the PR after 2 hours of inactivity.

**What is the expected behavior?**

I guess componentDidCatch() could've caught this exception.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

We're using React@16.4.1",Support
https://github.com/facebook/react/issues/13664,13664,Is it possible to react skip some dom nodes on hydrate which are different from server render.,[],closed,FALSE,,3,2018-09-15T19:27:11Z,2022-04-02T13:23:17Z,2018-11-01T18:58:39Z,NONE,completed,,"if my server component is for example:

    class Test extends React.Component { 
    ...
    render() {
    return <React.Fragment>
            <div> {this.props.server_data} </div>
            <div onClick={make_this_div_update_on_client}> {this.state.client_staff} </div>
        </React.Fragment >
       }
    }

and on server i will render with props which are not available on client

    ReactDOMServer.renderToString(<Test server_data=""Hello from server!"" />)

but on frontend when i rehydrate app with:

    ReactDOM.hydrate(<Test />, document.querySelector("".app""));

It updates this DOM node because this.props.server_data is empty.

How can i make react to not touch some DOM nodes that are created on server and only hydrate other parts of the tree? Is this kind of behaviour possible?

For example something like this:
      
    class Test extends React.Component { 
     ...
    render() {
    return <React.Fragment>
            <div donTouchThisOnClient> {this.props.server_data} </div>
            <div onClick={make_this_div_update_on_client}> {this.state.client_staff} </div>
        </React.Fragment >
       }
    }
    ",Support
https://github.com/facebook/react/issues/13685,13685,The Input render by createProtal will blur when input,[],closed,FALSE,,3,2018-09-19T02:28:27Z,2018-09-19T09:51:04Z,2018-09-19T09:38:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**

the input render by portal will blur when input

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

see [https://codesandbox.io/s/j7vy574wny](https://codesandbox.io/s/j7vy574wny)
types in diff input

**What is the expected behavior?**

just change value, but not blur


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

latest version",Support
https://github.com/facebook/react/issues/13690,13690,unmountComponentAtNode works async ?,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,12,2018-09-19T16:46:54Z,2020-01-17T07:00:02Z,2020-01-17T07:00:02Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

i tried to use `ReactDOM.unmountComponentAtNode` and `ReactDOM.render` to manage my multi roots. i found that if i use them in sync code, i get an error just like this when i change route pages:
```
Warning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. Instead, have the parent component update its state and rerender in order to remove this component.
```

```
Warning: render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.
```

i use browserHistory to change route.
my code is written in componentDidMount method of a root React component:

Page1.js
```
  componentDidMount() {
    const a = document.getElementById('root2');
    ReactDOM.unmountComponentAtNode(a);
    ReactDOM.render(
      <A />,
      a
    );
    ReactDOM.render(
      <B />,
      document.getElementById('root3')
    );
  }
```

Page2.js
```
  componentDidMount() {
    const a = document.getElementById('root2');
    ReactDOM.unmountComponentAtNode(a);
    ReactDOM.render(
      <C />,
      a
    );
    ReactDOM.render(
      <B />,
      document.getElementById('root3')
    );
  }
```

And then, if i use `setTimeout` to wrap `ReactDOM.render` after `ReactDOM.unmountComponentAtNode(a);`, the result can be success.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 16.5.2
react-dom 16.5.2",Support
https://github.com/facebook/react/issues/13696,13696,JSX whitespace not consistent if line starts with an expression,[],closed,FALSE,,2,2018-09-19T21:33:32Z,2018-09-20T10:37:43Z,2018-09-20T10:37:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When a JSX content (text) line starts with an expression, the whitespace rules are not followed.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codepen.io/anon/pen/JaBLVq

**What is the expected behavior?**
Whitespace JSX rules should be respected always.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.3
",Support
https://github.com/facebook/react/issues/13715,13715,Improved stack trace,[],closed,FALSE,,3,2018-09-24T08:59:09Z,2018-10-09T11:20:13Z,2018-10-09T11:20:13Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**

* The usability of the current stack trace for components with native dom elements can be improved.
![image](https://user-images.githubusercontent.com/43165983/45943746-33217400-c005-11e8-953b-2e016bd10f9d.png)
* In this example it tells me that there are 3 divs, followed by a select tag (Not sure why select's display name is showing as the components' name itself) and then option tag. But this same structure exists in lot of places in the component.

**What is the expected behavior?**
* Stack trace with line number/some other way to pinpoint it's location (like id/class if provided??) is desired

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
OS: Ubuntu 18.04
React: 16.2.0",Support
https://github.com/facebook/react/issues/13719,13719,Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined,[],closed,FALSE,,7,2018-09-24T21:17:42Z,2018-09-26T12:54:57Z,2018-09-24T23:10:00Z,NONE,completed,,"I'm dealing with a JSON response in React Native that's coming from the WordPress REST API, containing pages with each an (profile page) ID, title and featured image.

Using a FlatList, I have created a screen with featured images and titles for each (Artist) page. I want to add the functionality to navigate to each individual page by clicking on an item in the FlatList, and passing the title, featured image and (later) the content of the regarding page to the next screen to display this information (probably based on the ID). 

LinksScreen.js

```
import React, {Component} from 'react';
import PropTypes from 'prop-types';
import Artist from './Artist';
import { createStackNavigator } from 'react-navigation';
import {
  ScrollView,
  StyleSheet,
  View,
  Text,
  Image,
  FlatList,
  ActivityIndicator,
  TouchableHighlight,
} from 'react-native';

export default class LinksScreen extends React.Component {

constructor(props) {
        super(props);
        this._onAlertTypePressed = this._onAlertTypePressed.bind(this);
        this.state = {
            data: [],
        }
    }

  _onAlertTypePressed(typeId: any, typeName: any, imageUrl: any){

        this.props.navigator.push({
            screen: 'Artist',
            title: 'Artist',
            passProps: {
                alertId: typeId,
                alertName: typeName,
                alertImage: imageUrl,
            }
        });
    }

    _renderListItem = ({ item }) => (
        <Artist
            itemName={ item.title.rendered }
            itemId={ item.id }
            itemImageUrl={ item.better_featured_image.source_url}
            onPressItem={ this._onAlertTypePressed }
        />
    );

  static navigationOptions = {
    title: 'Links',
  };

  state = {
    data: [],
    isLoading: true,
    isError: false,
  };

  static propTypes = {
    navigation: PropTypes.shape({
      navigate: PropTypes.func.isRequired,
    }).isRequired,
  }

  componentWillMount() {
    fetch('http://54.168.73.151/wp-json/wp/v2/pages?parent=38&per_page=100')
      .then(response => response.json())
      .then((responseJson) => {
        responseJson.sort((a, b) => a.title.rendered < b.title.rendered ? -1 : 1);
        this.setState({
          data: responseJson,
          isLoading: false,
          isError: false,
        });
      })
      .catch(error => {
        this.setState({
          isLoading: false,
          isError: true,
        });
        console.error(error);
      });
  }

  renderRow = item => (
    <View style={styles.grid}>
      <Image
        style={styles.thumb}
        source={{
          uri: item.better_featured_image
            ? item.better_featured_image.source_url
            : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',
        }}
      />
      <Text style={styles.title}>{item.title.rendered}</Text>
    </View>
  );

  getKey = item => String(item.id);

  renderComponent() {
    if (this.state.isLoading) {
      return <ActivityIndicator />;
    } else if (this.state.isError) {
      return <Text>Error loading data</Text>;
    } else {
      return (
        <FlatList
          numColumns={3}
          contentContainerStyle={styles.elementsContainer}
          data={this.state.data}
          renderItem={({ item }) => this._renderListItem}
          keyExtractor={this.getKey}
        />
      );
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text
          style={{
            fontSize: 20,
            color: '#FFFFFF',
            marginLeft: 4,
            marginTop: 10,
          }}>
          RESIDENTS
        </Text>
        {this.renderComponent()}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  elementsContainer: {
    backgroundColor: '#000000',
  },
  grid: {
    marginTop: 15,
    marginBottom: 15,
    marginLeft: 5,
    height: 125,
    width: 115,
    borderBottomWidth: 1,
    borderBottomColor: '#191970',
  },
  title: {
    color: '#FFFFFF',
    textAlign: 'left',
    fontSize: 12,
  },
  thumb: {
    height: 110,
    width: 110,
    resizeMode: 'cover',
  },
});
```
Artist.js

```
import React, { Component } from 'react';
import { createStackNavigator } from 'react-navigation';
import {
  ScrollView,
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Image,
} from 'react-native';

export class Artist extends React.PureComponent {
  constructor(props) {
    super(props);
  }

  _onPress = () => {
    this.props.onPressItem(
      String(this.props.itemId),
      String(this.props.itemName),
      String(this.props.itemImageUrl)
    );
  };

  static navigationOptions = {
    title: 'Artist',
  };

  render() {
    // const artist = this.props.navigation.state.params.artist;
    return (
      <TouchableOpacity
        {...this.props}
        style={styles.container}
        onPress={this._onPress}>
        <Image
          style={styles.image}
          source={{
            uri: this.props.itemImageUrl
              ? this.props.itemImageUrl
              : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',
          }}
        />
        <Text style={styles.title}>{this.props.itemName}</Text>
      </TouchableOpacity>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#000000',
  },
  title: {
    color: '#FFFFFF',
    textAlign: 'left',
    fontSize: 12,
  },
  image: {
    height: 350,
    width: 350,
    resizeMode: 'cover',
  },
});

```
I'm getting an error at the moment - saying that the a string is expected, but an undefined type was found. I used to do it in a different way, but I'm unable to pass the ID (which should be the identifier to pass the data to the next screen) to open a specific generated screen for each artist.

Error:

![image](https://user-images.githubusercontent.com/25793350/45979413-5244f380-c04f-11e8-9f9c-737e48e45d3e.png)

Here is the edible code:

[https://snack.expo.io/@jvdl2711/artist-navigation](url)

It used to be like this:

[https://snack.expo.io/@jvdl2711/artists](url) (working grid version, but no navigation functionality. I'm sure it gives a good indication of how it's supposed to work.)

Notes

Please, don't mind the titles at the moment. I still have a small unsolved issue regarding unicodes, but I think this won't matter when passing the titles to another screen.",Support
https://github.com/facebook/react/issues/13735,13735,schedule/cjs/schedule.<env>.js thinks it is in the browser when run on the server,[],closed,FALSE,,5,2018-09-26T13:08:31Z,2018-10-04T21:12:48Z,2018-09-26T14:30:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Code meant to only run in the browser is running on the server. The error I'm seeing is:

```
UnhandledPromiseRejectionWarning: TypeError: window.addEventListener is not a function
      at ./node_modules/react-dom/node_modules/schedule/cjs/schedule.development.js:366:10
      at Object.<anonymous> (./node_modules/react-dom/node_modules/schedule/cjs/schedule.development.js:421:5)
      at Module._compile (module.js:653:30)
      at Object.Module._extensions..js (module.js:664:10)
      at Module.load (module.js:566:32)
      at tryModuleLoad (module.js:506:12)
      at Function.Module._load (module.js:498:3)
      at Module.require (module.js:597:17)
      at require (internal/module.js:11:18)
      at Object.<anonymous> (./node_modules/react-dom/node_modules/schedule/index.js:6:20)
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

We are using `import { findDOMNode } from 'react-dom'` in one of our components and the server render is broken due to this dependency/file being pulled in.

**What is the expected behavior?**

To not error, I guess. The root problem seems to be a faulty check of environment somewhere.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This has been narrowed down to just 16.5.2 -- doing nothing but downgrading to 16.5.1 using `npm install --save react@16.5.1 react-dom@16.5.1` fixes the issue.
",Bug
https://github.com/facebook/react/issues/13739,13739,React Context value propagation performance ,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,35,2018-09-27T01:16:24Z,2021-03-02T11:41:09Z,2020-01-17T07:00:14Z,NONE,completed,,"Hi there!

I have observed a performance issue with context providers and value updates. I have spoken with @gaearon with this on twitter, so he will have a bit more context

Let's say you have a provider:

```js
const CounterContext = React.createContext(1);
const Provider = ContextContext.Provider
```

And you update the value to the provider

```js
render() {
  return (
    return <Provider value={this.state.value}>{this.props.children}</Provider>
  )
}
```

All good so far.

Let's say you want to pass this value down the tree, but for performance reasons you do not want to render the tree. The only components you want to render are your consumer components (in our case `CounterContext.Consumer`)

A naive way would be to do something like this:

```js
class Blocker extends React.Component {
  shouldComponentUpdate() {
    return false;
  }
  render() {
    return this.props.children;
  }
}

// ...

render() {
  return (
    <Provider value={this.state.value}>
	 <Blocker>
          {this.props.children}
     </Blocker>
    </Provider>
  )
}
```

Even though no components in the tree are rendered except for the consumers, the update itself is very expensive. I suspect that the tree walking algorithm takes a while to run.

## Standalone example

https://codesandbox.io/s/61jnr811kr

This example has about a 20-30ms render time for a simple counter update. In a production app with a list of 500 nodes (~500 * 10 components, 5000 components) we were looking at update times similar to that of rendering the tree (150ms+)

## A bit more context

I was trying to replace `react-redux` with a root `StateProvider` that would create a subscription to a store and pass the latest state into the context. The consumers would then pick up this update, run a selector, and re-render if the result value had changed. I had this all working in `react-beautiful-dnd` but I found the updates through the context itself was too slow for usage (You can see the relevant files [here](https://github.com/atlassian/react-beautiful-dnd/tree/state-provider/src/view/state-provider) and [here](https://github.com/atlassian/react-beautiful-dnd/blob/state-provider/src/view/draggable/context-draggable.js))",Support
https://github.com/facebook/react/issues/13752,13752,"input[type='number'] event.target.value changes to empty string when . or , pressed and onChange not emitted when . and , used",[],closed,FALSE,,9,2018-09-29T18:55:53Z,2019-08-23T10:33:58Z,2018-10-09T20:32:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
onChange event changes value of an input to an empty string when . or , is pressed. Additionally it seems like it doesn't fire onChange after the dot and comma (example 1.234,000) at all 
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/7ox8qx2mn1
**What is the expected behavior?**
value stays as an Integer or as seen by the user 1. should be 1. and not """". Should fire onChange.
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16 +, Chrome, No
",Support
https://github.com/facebook/react/issues/13763,13763,Conditional Components,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,FALSE,,6,2018-10-03T12:13:22Z,2018-11-02T10:53:58Z,2018-11-01T19:23:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

Feature

**What is the current behavior?**

Often we will use expressions like this:

`{ !x ? null : <Component title={x.title} /> }`

**What is the desired behavior?**

We would like to have expressive components such as

```
<When c={x}>
   <Component title={x.title} />
</When>
```

In many cases this generic syntax is preferred over an explicit child component or pure function which knows about what it is supposed to render.

The issue is that this will evaluate the children, even if they ultimately are not returned (since they are passed as children to the When component).

What is desired is for the syntax above to be able to behave exactly like a conditional expression, in that the contained children are not actually processed at all unless a condition is met.  In reality the component could be something else entirely such as `<SuperUser />` which will only process and render the children if the current user is a super user, or `<Morning />` to only process and render items between 8 AM and 11 AM (or similar).  The key thing is that we do not want the props passed into the children, or the children themselves produced, unless a condition has been satisfied.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Presumably any version of React.",Feature
https://github.com/facebook/react/issues/13792,13792,the setTimeout and onClick don't work on SSR. what should I do for this?,[],closed,FALSE,,1,2018-10-08T01:27:43Z,2018-10-08T02:05:36Z,2018-10-08T02:05:36Z,NONE,completed,,,Support
https://github.com/facebook/react/issues/13819,13819,How to send a notification to specific user and handle it,[],closed,FALSE,,3,2018-10-10T17:52:22Z,2018-10-12T23:12:09Z,2018-10-12T08:51:10Z,NONE,completed,,"I'm an android and iOS developer. 
on android and ios programming I can open a ***specific page*** when user click on the notification.

for example, this is a sample JSON string from the server side to clients:

    ""data"":{
      ""pages"":""home""
    }

when I receive this notification I can open the `home` page.

I want to handle my react pages when a notification will receive.

Is it possible to handle this action? or on the web application, user just can see the message from notification?
",Other
https://github.com/facebook/react/issues/13828,13828,Support for classList,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-10-11T13:14:18Z,2018-11-01T19:31:01Z,2018-11-01T19:31:01Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

Only `className` exists right now.

**What is the expected behavior?**

I think adding `classList` property for DOM elements would be useful. As far as I understand React Fire will drop support for IE11 but even in IE11, you can add or remove classList from elements.

Another idea might be adding support for for array type for `className` (or future `class`, which will make more sense because array). If array is passed, `classList` will be used for DOM elements. Otherwise, `className` is used as usual in the real DOM side.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

All versions. I hope this is added in React Fire.",Feature
https://github.com/facebook/react/issues/13835,13835,`onChange` warning creates false positives,[],closed,FALSE,,3,2018-10-12T06:01:10Z,2018-11-01T19:39:36Z,2018-11-01T19:33:11Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When you set the `value` of an `input` field, you get a warning while development:

> Warning: Failed prop type: You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.

However, this is not always true. If your `onChange`-listener is further up the component tree, the warning is no longer true.

The same goes for checkboxes.

Here's a reproduction: https://codesandbox.io/s/6wjl48mjn (open the console tab to see the warning)

Here's the relevant piece of React source code: https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/ReactControlledValuePropTypes.js#L41-L46

**What is the expected behavior?**

If possible, I'd love React to not show this warning if this is the issue. Or at the very least change the wording. The warning is great when you've actually forgotten to add an onChange handler, so we probably shouldn't remove it all together.

Right now I'm passing a no-op onChange listener to silence the warning (yeah it's dev only, but I'm dev-ing all the time, and warnings are annoying), which probably isn't a great solution either.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

All versions I've ever tried the last three years

----

I'd love to work on this, but I'm not sure how to solve it.",Support
https://github.com/facebook/react/issues/13845,13845,[npm:create-react-class] Forwarding refs,[],closed,FALSE,,6,2018-10-13T12:21:02Z,2018-11-01T19:34:53Z,2018-11-01T19:34:53Z,NONE,completed,,"https://reactjs.org/docs/react-without-es6.html doesn't seem to explain how to use forwarding refs:

https://reactjs.org/docs/forwarding-refs.html

Does the render function in the class have to have the new props argument?",Support
https://github.com/facebook/react/issues/13853,13853,Can't access SyntheticEvent in setState function body,[],closed,FALSE,,5,2018-10-15T10:30:41Z,2018-10-15T16:22:07Z,2018-10-15T16:22:07Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When trying to access the event object inside setState's function body this working is shown:
```
Warning: This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the method `*` on a released/nullified synthetic event. This is a no-op function. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.
```
It works fine when passing a plain object to setState.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/5mrjwmlr8n

**What is the expected behavior?**
It should be possible to access event object in setState function.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
latest one, not sure",Support
https://github.com/facebook/react/issues/13867,13867,Need a react component function to check nextprops just before re-render to stop a redirecting action in react component. ,[],closed,FALSE,,1,2018-10-17T03:34:28Z,2018-10-19T18:54:27Z,2018-10-19T18:54:26Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Need help with an edge case. Not sure what is the good practice.

**What is the current behavior?**
Using react + redux + redux saga for my application.

I have a 'Home' screen with a search bar, where I search for a subscriber. The action is dispatched and the saga does the API call and the requirement is to redirect to the 'Subscriber' screen with the result. I read the good practice is not to redirect from the sagas/reducers and redirect from the component using `<Redirect>` of react-router-dom. 
So In my 'Home' component, I check for the props and if I have the result, I redirect to the 'Subscriber' results page.
The issue is Redux stores the state and every time I navigate to 'Home' it gets redirected because the store persist the results.

```jsx
class Home extends React.Component {
  render() {
    const { actions, subscriberDetails } = this.props;
    if (subscriberDetails) {
      return <Redirect to=""/subscriber-details"" />;
    }
    return (
      <div>
        <h1>Search subscriber</h1>
        <input type=""text"" name=""Subscriber"" />
        <button onClick={actions.getSubscriber}>Get Subscriber</button>
      </div>
    );
  }
}

Home.propTypes = {
  actions: PropTypes.object.isRequired,
  subscriberDetails: PropTypes.object
};

const mapStateToProps = (state, ownprops) => {
  return {
    subscriberDetails: state.subscriber.details
  };
};

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(subscriberActions, dispatch)
});

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Home);
```


**What is the expected behavior?**

The redirect should happen only when I search for the a 'Subscriber' and not every time I navigate to the Home screen (results are persisted).

To solve this I need a function which is called just before the component re renders on update to check the 'props' in my 'Home' component, where I can see if the props has the result and redirects to the required screen. The 'componentWillRecieveProps' function has made unsafe. 
I use shouldComponentUpdate function to solve this issue, where I check for nextprops and set a variable to redirect only when the component update. Which works fine. 

```js
shouldComponentUpdate(nextprops, nextstate){
        this.redir = nextprops.subscriberDetails? <Redirect to='/subscriber-details'/> : null;
        return true;
}
```

I just need to confirm is there any other way to solve this issue or can I use `shouldComponentUpdate` function for this?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Windows
`""react"": ""^16.5.2""`
 `""react-dom"": ""^16.5.2""`
`""react-router-dom"": ""^4.3.1""`
`""redux"": ""^4.0.0""`
`""redux-saga"": ""^0.16.2""`",Support
https://github.com/facebook/react/issues/13878,13878,文字错误,[],closed,FALSE,,0,2018-10-18T09:39:07Z,2018-10-19T18:44:56Z,2018-10-19T18:44:56Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/13940,13940,"Objects are not valid as a React child (found: object with keys {}). If you meant to render a collection of children, use an array instead.",[],closed,FALSE,,1,2018-10-24T07:23:32Z,2018-11-01T19:52:34Z,2018-11-01T19:52:34Z,NONE,completed,,"I am not able to pass the state 'book' to other components of react 

```
import React from 'react';
import ReactDOM from 'react-dom';
import Data from './Data';
import DataDisplay from './DataDisplay';
import Booking from './Booking';
import './cards.css';

class Show extends React.Component{
constructor(props)
{
  super(props);
  this.state = {
    shows: {},
    book: {}
  };
  this.loadShows = this.loadShows.bind(this);
  this.bookShow = this.bookShow.bind(this);
}
loadShows=()=>
{
  this.setState({
    shows:Data
  })
}

bookShow = (key)=>
{
  const copyBooking = {...this.state.book};
  this.state.book[key] = this.state.book[key] + 1 || 1;
  this.setState({
    book:this.state.book
  });
}

  render(){
    return(
      <div>
        <Cards loadShows={this.loadShows} displayShow={this.state.shows} />
        <div className=""container"">
          <div className=""shows"">
            <ul>
              {Object.keys(this.state.shows).map(key=> <DataDisplay key={key} index={key} bookShow={this.bookShow} details={this.state.shows[key]}/>)}
            </ul>
          </div>
          <Booking booked={this.state.book} />
        </div>
      </div>
   )
  };
}


export default Show;

```",Other
https://github.com/facebook/react/issues/13944,13944,Cannot be used new contextType API in constructor?,[],closed,FALSE,,9,2018-10-24T07:58:17Z,2022-07-13T21:25:10Z,2018-11-01T19:53:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?** *feature* 

**What is the current behavior?** Using `Component.contextType`, `this.context` keeps `null` in class component's constructor.

**What is the expected behavior?** 

-  `this.context` can be obtained in constructor
- if implementing of the feature is inappropriate, write in documentations that `this.context` cannot be used in constructor.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** React 16.6 (older React doesn't have `Component.contextType`) in Chrome 70 (Windows 7)
",Bug
https://github.com/facebook/react/issues/13951,13951,"npm start failed The react-scripts package provided by Create React App requires a dependency: ""babel-loader"": ""8.0.4"" following steps doesnt work ",[],closed,FALSE,,9,2018-10-24T12:31:17Z,2019-12-22T11:12:18Z,2018-11-01T19:55:07Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Support
https://github.com/facebook/react/issues/13963,13963,Expected subtree parent to be a mounted class component,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,14,2018-10-25T09:28:12Z,2019-10-22T17:53:13Z,2018-12-09T12:22:02Z,NONE,completed,,"Hi, 
Getting this error when trying to mount my component:
![image](https://user-images.githubusercontent.com/10330531/47490003-81b66e00-d850-11e8-9914-ddea9baa0ada.png)

The Component with the tooltip seems to be working fine on its own. 
when I tried to mount it as a child in this FeedCard it causes the crash.

Code:

FeedCard: 
```
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ListItem, Person, StayIndicator } from '@guestyci/atomic-design/dist/v2/components';
import FeedCardInfo from './FeedCardInfo';

class FeedCard extends Component {
  render() {
    const { isSelected } = this.props;
    return (
      <ListItem
        dense
        className=""bg-hover-white flex-column px-3 bb-1 border-gray""
        onClick={this.handleCardClick}
        isSelected={isSelected}
        selectedClassName=""bg-white box-shadow-light""
      >
        <FeedCardInfo lastMessageTimestamp=""2011-10-05T14:48:00.000Z"" />
        <div className=""flex-space-between-center"">
          <Person name=""Bob"" className=""mb-3"" />
          <StayIndicator status=""pre"" />
        </div>
      </ListItem>
    );
  }
}
export default FeedCard;

```

StayIndicator: 
```
import React from 'react';
import PropTypes from 'prop-types';
import { StayStatus } from '../../../constants/enums';
import Tooltip from '../tooltip/Tooltip';
import BaseStayIndicator from './BaseStayIndicator';

const tooltips = {
  [StayStatus.Reserved]: 'Reserved',
  [StayStatus.Planned]: 'Upcoming stay',
  [StayStatus.Staying]: 'Currently staying',
  [StayStatus.Complete]: 'Checked out',
};

const StayIndicator = ({
  status,
  large,
  className,
  style,
  dark,
  width,
  id,
  fill,
}) => (
  <Tooltip body={tooltips[status]} id={id} containerClassName=""d-flex-fill"">
    <BaseStayIndicator
      width={width}
      dark={dark}
      status={status}
      style={style}
      className={className}
      large={large}
      fill={fill}
    />
  </Tooltip>
);
StayIndicator.defaultProps = {
  status: StayStatus.Planned,
  large: false,
  className: '',
  style: {},
  width: undefined,
  dark: false,
  id: undefined,
  fill: false,
};

StayIndicator.propTypes = {
  /** Stay status - Enum (StayStatus- [Reserved, Planned, Staying, Complete,]) */
  status: PropTypes.oneOf([
    StayStatus.Planned,
    StayStatus.Staying,
    StayStatus.Complete,
    StayStatus.Reserved]),
  /** Indicator whether to use large component size */
  large: PropTypes.bool,
  /** Additional class to add to StayIndicator */
  className: PropTypes.string,
  /** Additional style to add to StayIndicator */
  style: PropTypes.shape(),
  /** Customize line width */
  width: PropTypes.number,
  /** Set theme to dark */
  dark: PropTypes.bool,
  /** Id for the stay indicator component */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Set the stay indicator to fill space */
  fill: PropTypes.bool,
};

export default StayIndicator;


```

Tooltip (if it helps):
```
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import StrapTooltip from 'reactstrap/lib/Tooltip';
import { uuid } from '../../../utils/commonUtility';
import { Theme } from '../../../constants/enums';
import './tooltip.scss';

class Tooltip extends Component {
  constructor(props) {
    super(props);
    this.state = { isOpen: false, id: props.id || uuid() };
  }
  onToggle = () => {
    this.setState(prevState => ({ isOpen: !prevState.isOpen }));
  };
  render() {
    const {
      children, className, body, style, autoHide, theme,
      placement, offset, containerClassName, ...props
    } = this.props;
    const { id, isOpen } = this.state;
    return (
      <div className={containerClassName}>
        <span className={containerClassName} id={`Tooltip-${id}`}>{children}</span>
        <StrapTooltip
          innerClassName=""box-shadow-heavy""
          target={`Tooltip-${id}`}
          isOpen={isOpen}
          toggle={this.onToggle}
          className={cn('mx-2', 'my-2', { 'light-theme': theme === Theme.Light }, className)}
          style={style}
          autohide={autoHide}
          placement={placement}
          offset={offset}
          {...props}
        >
          {body}
        </StrapTooltip>
      </div>
    );
  }
}
export default Tooltip;
```

using: 
React: 16.52,
React-DOM: 16.52,
ReactStrap: 6.3.1

Can someone please assist?
Issue only appears when hovering over component ",Support
https://github.com/facebook/react/issues/13967,13967,Shorthand for prop={false},[],closed,FALSE,,2,2018-10-25T14:43:52Z,2018-10-26T03:59:52Z,2018-10-26T03:59:52Z,NONE,completed,,"**Feature Request**

```jsx
<Foo bar/>
```
is the same as
```jsx
<Foo bar={true}/>
```

It would be nice to have something like
```jsx
<Foo !bar/>
```
meaning
```jsx
<Foo bar={false}/>
```",Other
https://github.com/facebook/react/issues/13980,13980,getting  Cannot read property '_warnedAboutRefsInRender' of null,[],closed,FALSE,,1,2018-10-26T06:14:22Z,2018-11-01T20:08:27Z,2018-11-01T20:08:27Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/13982,13982,Docs - Hooks: is that `const` a typo ?,[],closed,FALSE,,12,2018-10-26T09:25:28Z,2018-10-27T05:41:47Z,2018-10-26T09:55:38Z,NONE,completed,,"The very first example of the [hoks-intro](https://reactjs.org/docs/hooks-intro.html) shows the following code:

```js
import { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call ""count""
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
```

but since that `count` is _theoretically_ (and visually) scoped within `Example` as `const`, I wonder how that is supposed to work (I mean, ever showing anything different from 0) or if there is a typo so that the first line should be instead:

```js
let [count, setCount] = useState(0);
```

Thanks for clarifying and/or fixing that very first example.",Support
https://github.com/facebook/react/issues/13985,13985,Warn if ReactDOM.createPortal is inside a noscript or other text content tag,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,4,2018-10-26T13:10:22Z,2020-01-19T02:48:33Z,2020-01-19T02:48:33Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**

When calling `ReactDOM.createPortal` from within a `<noscript />`, nothing happens, no error is logged.

```javascript
ReactDOM.render(
  <noscript>
    {ReactDOM.createPortal(""yo"", modalNode)}
  </noscript>,
  appNode
);
```

**What is the expected behavior?**

Whether:
- warn that it doesn't work (it worked in the previous version)
- render the portal

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- React 16.5.0 & more recent
- Reproducible in every browser

**Repro**
https://jsfiddle.net/bloodyowl/n5u2wwjg/223296/",Feature
https://github.com/facebook/react/issues/14002,14002,Safari Devtools flooded with security errors on react-dom selection work with iframes with diff origins,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105358,""node_id"":""MDU6TGFiZWw2OTEwNTM1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20Safari"",""name"":""Browser: Safari"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,7,2018-10-27T19:09:31Z,2019-03-28T07:18:26Z,2019-03-20T13:11:54Z,NONE,completed,,"hey folks, looks like [this code](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b) added small issue with safari and it could flood devtools console output with messages like this:
<img width=""875"" alt=""screenshot 2018-10-26 at 15 25 33"" src=""https://user-images.githubusercontent.com/778908/47569863-0e3a5c80-d935-11e8-8e59-8d95d35ba131.png""> 
As I understand it happens [here](https://github.com/facebook/react/commit/b565f495319750d98628425d120312997bee410b#diff-a654f37b01573fc8006b426d56ad53ceR50) and I see you catch the error, but safari still adds the error message if you have iframes with different origin",Bug
https://github.com/facebook/react/issues/14009,14009,React + GSAP -> Animation doesn't work with Build production,[],closed,FALSE,,1,2018-10-28T16:26:13Z,2018-10-28T18:32:16Z,2018-10-28T18:32:15Z,NONE,completed,,"### Is this a bug report?
- Maybe Yes? || A doubt :)

### Did you try recovering your dependencies?
- Yes

### Which terms did you search for in User Guide?
- Yarn Build: Animation Failing

### Environment

`npx create-react-app gsapApp`

**package.json**

```javascript

""homepage"": ""."",
""dependencies"": {
  ""gsap"": ""^2.0.2"",
  ""react"": ""^16.6.0"",
  ""react-dom"": ""^16.6.0"",
  ""react-scripts"": ""^2.0.5""
},
""scripts"": {
  ""start"": ""react-scripts start"",
  ""build"": ""react-scripts build"",
  ""test"": ""react-scripts test --env=jsdom"",
  ""eject"": ""react-scripts eject""
},
""devDependencies"": {},
""browserslist"": [
  "">0.2%"",
  ""not dead"",
  ""not ie <= 11"",
  ""not op_mini all""
]

```

**manifest.json**
```javascript

""start_url"": "".""

```

### Steps to Reproduce

1. When running the project with the server with `react-scripts start`, the animation runs perfectly. : D
2. However ... when creating the bundle for production, using the react-scripts build command the animation simply does not work: :'(
3. I'll provide the code below to show it happening

### Expected Behavior

- That the animation works normally

### Actual Behavior

- Animation does not happen.
In the video below:
1) On the Left: project running with `yarn start`, adding 2 seconds of delay to view a console along with animation start.
2) On the Right: project running on a static server withe the build folder after run `yarn build`. The console after 2 seconds runs, the animation does not.

![react gsap](https://user-images.githubusercontent.com/15070031/47618498-8d08d400-dab2-11e8-8e28-2a147bf01eee.gif)

### Reproducible Demo

**App.js**

```javascript

import React, { Component } from 'react';
import { TweenLite } from 'gsap/all';

class App extends Component {

  componentDidMount() {
    setTimeout(() => {
      console.log('animate init', true)
      TweenLite.to(this.myPRef, 2, {
        x: 200
      })
    }, 2000)
  }

  render() {
    return (
      <p ref={ref => this.myPRef = ref}>React + GSAP</p>
    );
  }
}

export default App;

```
Any idea? :)

**p.s**: I'll post this behavior also on GSAP's and facebook/create-react-app's Github, to see if this could be a GSAP or Build with CRA bundle-related issue.

Thanks for the help, 
Alex.",Support
https://github.com/facebook/react/issues/14010,14010,State from useState hook inside a setTimeout is not updated,[],closed,FALSE,,7,2018-10-28T20:04:45Z,2021-12-06T09:46:31Z,2018-10-29T04:54:32Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug/Question

**What is the current behavior?**
When I retrieve a value from a useState hook inside a setTimeout function, the value is the one when the function was called and not when the code inside gets executed.

You can try here, just increase the counter then start the timeout and increase the counter again before the timeout expires.
https://codesandbox.io/s/2190jjw6op

**What is the expected behavior?**
Retrieving the updated state. 
If instead it's working as intended how I can retrieve the updated status?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.7.0-alpha.0
",Support
https://github.com/facebook/react/issues/14012,14012,Suspense ping shouldn't suspend if all suspended content is already in fallback mode,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109407645,""node_id"":""MDU6TGFiZWwxMTA5NDA3NjQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Suspense"",""name"":""Component: Suspense"",""color"":""8ffcd6"",""default"":false,""description"":""""}]",closed,FALSE,,10,2018-10-28T21:22:06Z,2020-06-29T18:50:09Z,2020-06-29T18:50:08Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

When using suspense and hooks - specifically `useState` and `useEffect` - nested async renders (using `react-cache`) cause state hooks not to be updated. Specifically this happens between the first promise settling and the last promise settling in a `Suspense` component. However the state updates concerned can be outside of the `Suspense` root: https://codesandbox.io/s/wznnxz9pvw

In the linked example, moving the mouse will update the displayed coordinates for the first 2000ms (the time at which the first thrown promise resolves) however, after this the UI will not show any updated coordinates until after the final nested promise in the adjacent `Suspense` root settles.

I may both be using Suspense wrong (given the understandable lack of documentation) as I've been having other bugs with this setup, specifically the above example will sometimes never render beyond the ""loading ..."" placeholder. This is especially noticeable with setting higher timeouts in the `Timeout` component.

react 16.7.0-alpha
react-dom 16.7.0-alpha
react-cache 2.0.0-alpha
",Bug
https://github.com/facebook/react/issues/14014,14014,useEffect fails with `Cannot set property 'lastEffect' of null` in production mode,[],closed,TRUE,,8,2018-10-29T02:16:00Z,2019-04-10T14:37:47Z,2018-10-29T05:26:47Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug.

**What is the current behavior?**
When rendering a component that calls `useEffect` in production mode, React crashes with `Cannot set property 'lastEffect' of null`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I’m still working on reproducing locally. Meanwhile, here’s the relevant error from Sentry:

<img width=""855"" alt=""image"" src=""https://user-images.githubusercontent.com/6031/47625939-9ceddb80-dae5-11e8-9865-8112dbe60f0d.png"">

**What is the expected behavior?**
No error.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.7.0-alpha.0.
",Bug
https://github.com/facebook/react/issues/14019,14019,useContext(Context.Consumer) doesn't receive updates properly,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,15,2018-10-29T12:07:10Z,2020-07-09T11:50:13Z,2019-01-18T03:38:10Z,NONE,completed,,"I think there's a bug in 16.7.0-alpha.0 unless this is intentional.

**What is the expected behavior?**
I've been using the context API to implement a dynamic loader where a parent component is responsible for triggering and loading some network data, and one or more grand-child components want to consume that data or show ""Loading..."" while that data is being fetched.

**What is the current behavior?**
When I migrated to useContext() I don't get a re-render, and can't quite see how this is going to come about.  

Can you update examples to show dynamic behaviour, or if not supported to highlight that we will still need to use Context.Consumer for that.

",Other
https://github.com/facebook/react/issues/14038,14038,eslint-plugin-react-hooks,[],closed,FALSE,,2,2018-10-30T22:39:26Z,2018-10-31T00:13:25Z,2018-10-31T00:13:25Z,NONE,completed,,"```js
function Editor({ data: { page } }: EditorProps) {
  if (page == null) throw Error('missing page data in editor')
  const [editorValue, setEditorValue] = useState(() => {
}
```

I believe this should be a valid case, because throw. ",Bug
https://github.com/facebook/react/issues/14066,14066,State variable not updating in useEffect callback?,[],closed,FALSE,,27,2018-11-01T22:20:39Z,2022-11-08T13:40:20Z,2018-11-02T17:48:19Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug, maybe? Although thinking about it more makes me think I've misunderstood something.

**What is the current behavior?**
`scroll` state variable updates in rendered output but not inside `handleScroll` event callback. 

I reckon this might be due to the fact that when `handleScroll` is defined `scroll` is `0`, but `scroll` is defined in the scope above and should be updated when the component is re-rendered.

```jsx
import React, { useState, useEffect } from ""react"";

const Scroller = () => {
  const [scroll, setScroll] = useState(window.scrollY);

  const handleScroll = () => {
    console.log(scroll); // scroll is always 0
    setScroll(window.scrollY);
  };

  useEffect(() => {
    window.addEventListener(""scroll"", handleScroll);
    return () => window.removeEventListener(""scroll"", handleScroll);
  }, []); // runs once

  return <div id=""scroll"">{scroll}</div>; // scroll is correct
};

export default Scroller;
```
Please have a play:
[![Edit yv8vwo44px](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/yv8vwo44px)

**What is the expected behavior?**
`scroll` to be updated inside `handleScroll` event callback and in render output.

**Which versions of React, and which browser / OS are affected by this issue?**
```
chrome        70.0.3538.77
react         16.7.0-alpha.0 - next
react-dom     16.7.0-alpha.0 - next
```
",Support
https://github.com/facebook/react/issues/14071,14071,<option> and <textarea> elements should be able to contain Components that return strings and render their output correctly,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2018-11-02T08:27:15Z,2020-01-17T10:59:13Z,2020-01-17T10:59:13Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature request

**What is the current behavior?**

If you use a Component that returns a string inside an option or textarea element, the Component will be rendered as '[object Object]'

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/38tz0ym2/

**What is the expected behavior?**

The string returned by the component should be rendered as the elements innerHTML.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This was working accidentally in react v16.0.0 - v16.4.2 but was apparently buggy and crash prone. It no longer works at all in react v16.6.0",Feature
https://github.com/facebook/react/issues/14073,14073,Suspense fallback remounts when each child resolves,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,15,2018-11-02T11:57:22Z,2021-03-31T22:20:28Z,2018-11-06T00:32:51Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Not sure if its a bug or a feature request.

**What is the current behavior?**
The component given as a fallback to Suspense is remounted each time a lazy child resolves.

https://codesandbox.io/s/z6v6x3n1np
This example shows how a fallback component, which counts up, is mounted more than once.

**What is the expected behavior?**
The fallback is mounted once and is only unmounted when all lazy children are resolved.
In the example the counter would run up to 9.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react@16.6.0
",Bug
https://github.com/facebook/react/issues/14077,14077,React onKeyDown not called in fullscreen in Chrome,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,1,2018-11-02T17:54:06Z,2018-11-05T21:37:26Z,2018-11-05T21:37:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If an element requests fullscreen but a parent element has a onKeyDown binding, when in fullscreen, the keydown events do not bubble up to the onKeyDown binding.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Reproduce: https://jsfiddle.net/a4dopckg/

Steps:

1. Click on the text and start typing
2. You will see the keyboard strokes appear below the text
3. You will also see the strokes being logged to the console
4. Click the toggle fullscreen button
5. You won't see anything (probably a limitation of jsfiddle) but type a few more strokes
6. You will see the strokes logged in the console.
7. Click 'Esc' to exit fullscreen and you will see that the latest keyboard strokes did not appear below the text

**What is the expected behavior?**
I would expect the React onKeyDown binding to receive the keydown events, just as the document.addEventListener does, even in fullscreen.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Chrome 70, Mac OSX 10.12.6 Sierra
React 16.5.1",Other
https://github.com/facebook/react/issues/14092,14092,getState() hook proposal,[],closed,FALSE,,16,2018-11-04T22:43:27Z,2022-05-04T16:59:13Z,2018-11-05T15:04:46Z,NONE,completed,,"`useState()` provided state value currently cannot be used in `useEffect(fn, [])` - (componentDidMount-like scenario) with asynchronous functions after state has been updated following the initial [] run.

Upon trying to give Hooks a try for a real world application I was initially confused with accessing state. Here is a little example what I tried to do:


```javascript
const UserList = () => {
    const [users, setUsers] = useState([])
    useEffect(() => {
        const socket = io('/dashboard')
        socket.on('user:connect', (user) => {
            setUsers([...users, user])
        })
        socket.on('user:update', (user) => {
            let newUsers = users.map((u) => u.id == user.id ? user : u)
            setUsers(newUsers)
        }) 
    }, [])

    return (
        users.map(({id, email}) => (
            <tr key={id}>
                <td>{id}</td>
                <td>{email}</td>
            </tr>
        ))
    )
}
```
Upon running this I instantly realised that inside the `socket.on()` handler the `users` initially obtained from useState() did not reflect the changes inflicted by `setUsers()` ran on `socket.on('user:connect')`. Passing `[users]` as the second argument of `useEffect()` wasn't an option as that would cause additional `socket.on()` binds. I became skeptical about Hooks for this use case and sadly thought this would be where my journey with using hooks instead of the class components would end.

Fortunately I then found a solution to this problem (with someone indirectly having helped me by accident in the reactflux channel) by using an updater function with `setState()` which made it all work: 
```javascript
  socket.on('user:update', (user) => {
            setUsers(users => users.map((u) => u.id == user.id ? user : u))
   })
```

The `setState()` problem was solved, but I am now wondering that if I will ever need to access `state` outside of an updater function, i.e. to just reply to a WebSocket message with some value from the state I will be unable to do so and this will force me and other users to revert to class components for such cases.

I therefore would like to suggest that a `getState()` hook would be an ideal solution to this problem.
                                                                                                                      
 
 
 
_Here is another mini example demonstrating the problem in a more concise manner:_ 
```javascript
const HooksComponent = () => {
    const [value, setValue] = useState({ val: 0 });

    useEffect(() => {
        setTimeout(() => setValue({ val: 10 }), 100)
        setTimeout(() => console.log('value: ', value.val), 200)
    }, []);
}
//console.log output: 0 instead of 10
```
And here is one with a proposed solution:

```javascript
const HooksComponent = () => {
    const [state, setState, getState] = useState({ val: 0 });

    useEffect(() => {
        setTimeout(() => setState({ val: 10 }), 100)
        setTimeout(() => {
            getState(state => {
                console.log('value: ', state.val)
            })
        }, 200)
    }, [])

```
",Support
https://github.com/facebook/react/issues/14098,14098,Alternatives to functional components,[],closed,FALSE,,1,2018-11-05T14:48:22Z,2018-11-05T15:17:47Z,2018-11-05T15:17:47Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

n/a

**What is the current behavior?**

It's quite convenient to wrap the parts of complex UIs in functional components, then simply compose them together, especially when different configurations repeat some of the elements.

Consider the following example:

```js
// class UserAccountPage {

render() {
  const UserAccount = () => {
    return <TheRealUserAccount userLogin={this.props.userLogin} />
  }
  const LoginButton = () => {
     return <TheRealLoginButton remember={this.props.remember}  />
   }

  const Quit = () => {
     return <TheRealQuit askToStay={this.state.askToStay} />
  }

  switch this.props.loggedIn {
    case .yep:
       return (
         <ComplexComponent>
            <UserAccount />
            <Quit />
         </ComplexComponent> 
       )

     case .nope:
       return (
         <ComplexComponent>
            <LoginButton />
            <Quit />
         </ComplexComponent> 
       )
  }
}

// }
```

So now what I see is that any change to state or props of `UserAccountPage` causes functional components to re-mount the underlying tree. Which is perhaps by design. 

What I wonder is, if there are any alternatives. The syntax using functional components is quite descriptive since it looks like regular HTML or JSX.

",Support
https://github.com/facebook/react/issues/14146,14146,ref callback not works as expected.,[],closed,FALSE,,1,2018-11-08T01:17:27Z,2018-11-08T01:34:20Z,2018-11-08T01:34:19Z,NONE,completed,,"**What is the current behavior?**
I used the ref callback in my code, I want to implement clicking a input and got that focused.
My main code was the belows.
```js
  handleFocus = name => event => {
    console.info(`handleFocus ${name}, ${this[name]}`);
    if (this[name]) {
      this[name].focus();
    }
  };

  itemRenderer = (item, index) => {
    return (
      <div className={this.props.classes.card} key={`${item.search}-${item.replace}`}>
        <div className={this.props.classes.cardContent}>
          <div className={this.props.classes.cardLeftContent}>
            {this.state.editMode[index] ? <Input onKeyDown={this.handleKeyDown(item, index)} autoFocus ref={input => { console.info(`set ref ${input} on ${this}`); this.searchInput = input }} value={this.state.searchEdit} onClick={this.handleFocus('searchInput')} onChange={this.handleChange('searchEdit')} className={this.props.classes.input} inputProps={{ 'aria-label': 'Description', }} /> : <div onClick={this.handleDoubleClick(item, index)} className={this.props.classes.cardSearch}>{item.search}</div>}
            <div className={this.props.classes.cardArrow}>{' -> '}</div>
            {this.state.editMode[index] ? <Input onKeyDown={this.handleKeyDown(item, index)} ref={input => { console.info(`set ref ${input} on ${this}`); this.replaceInput = input }} value={this.state.replaceEdit} onClick={this.handleFocus('replaceInput')} onChange={this.handleChange('replaceEdit')} className={this.props.classes.input} inputProps={{ 'aria-label': 'Description', }} /> : <div onClick={this.handleDoubleClick(item, index)} className={this.props.classes.cardReplace}>{item.replace}</div>}
          </div>
          <div className={this.props.classes.cardRightAction}>
            <Button variant=""contained"" color=""primary"" onClick={this.handleUpdate(item, index)} disabled={!this.state.editMode[index]}>修改</Button>
            <Button variant=""contained"" color=""primary"" onClick={this.handleDelete(item)}>删除</Button>
          </div>
        </div>
      </div>
    );
  };

```

But in the handleFocus, the `this.replaceInput` is not the actural one, I could not invoke `this.replaceInput.focus()` or `this.replaceInput.current.focus()` or `this.replaceInput.input.focus()` .

![image](https://user-images.githubusercontent.com/2276718/48171388-a7567380-e336-11e8-9260-14c1e534a9eb.png)

The full code is [here](https://github.com/liudonghua123/react-material-electron/blob/search-replace-example/src/pages/Configuration.js#L140).

I have read https://github.com/facebook/react/issues/8359 and https://reactjs.org/docs/refs-and-the-dom.html#callback-refs but still could not make it works as expected.",Other
https://github.com/facebook/react/issues/14154,14154,Portals created dynamically exist outside of main tree,[],closed,FALSE,,11,2018-11-08T17:50:05Z,2018-11-23T17:13:38Z,2018-11-22T16:05:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

When using a library that creates provided React Components dynamically and renders them using Portals then the components are rendered as expected, but exist outside of the main react tree.

See screenshot here:

![image](https://user-images.githubusercontent.com/1329081/48217006-1d31fd80-e37e-11e8-886b-2babec1d1db9.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I've create a repro of the problem here: https://github.com/seanlandsman/dynamic-react-components.git

yarn install
npm start

Then using react devtools inspect the created React components

This is a trimmed down/simplified example, but it illustrates the problem I'm seeing.

**What is the expected behavior?**

The dynamically rendered components should exist within the main/parent React application

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react: 16.6.1
react-dom: 16.6.1
react-scripts: 2.1.1
",Support
https://github.com/facebook/react/issues/14160,14160,XSS Protection: href Object not being html escaped as a props,[],closed,FALSE,,3,2018-11-08T23:48:22Z,2018-11-19T18:43:42Z,2018-11-19T18:43:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I would like to request a bug.

**What is the current behavior?**
From what I know, it is possible to inject object in props. However, this object seems to be html escaped when inserted into the DOM from my observation. 

Thus, if I try to add an onerror=alert('XSS') in a <img {this.props.dangerousAtt /> tag through a props, this is gonna be escaped when rendered. Then, I realized that inserting an id='test' is totally possible with a props. So I thought only dangerous javascript injectable attributes are escaped such as onerror,  onload, ...

However, I realized that the href=javascript:alert('1') is not escaped when inserted through a props. The javascript gets executed. Here, I thought it might a bug. 


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
class App extends Component {
  render() {
  const href = {href: ""javascript:alert('1')""};
    return (
      <div>
      <a {...href}>Click here</a>     
      </div>
    ); 
}

ReactDOM.render(<App />, document.getElementById('root'));

```


**What is the expected behavior?**

I would expect the href object to be escaped as a props, so being treated exactly like onerror or other javascript attributes. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React version: 16.6.0
Browser: Chrome 70.0.3538.77",Support
https://github.com/facebook/react/issues/14175,14175,yarn build core build nothing,[],closed,FALSE,,3,2018-11-09T16:46:22Z,2020-03-05T09:40:01Z,2018-11-12T16:27:46Z,CONTRIBUTOR,completed,,"Seems after this https://github.com/facebook/react/commit/051272f2012e1c2f75dc8ee9fe72a1d85cdac302 `yarn build core --type=UMD` is useless now.
So it should be `yarn build react --type=UMD` and [contribution-prerequisites](https://reactjs.org/docs/how-to-contribute.html#contribution-prerequisites) should be updated.",Other
https://github.com/facebook/react/issues/14179,14179,can i check which component triggers useEffect?,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,7,2018-11-09T20:12:07Z,2020-01-17T09:59:13Z,2020-01-17T09:59:13Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature (maybe i'm not sure)

**What is the current behavior?**
Can't find a way to check ""which component/function/method that updates state"" from ***useEffect***



**What is the expected behavior?**

I have a **range slider input** that takes **progress state** as value. That **progress state** updated from `<audio>:ontimeupdate()` event handler.

I need to arrange range that **slider** to update **progress state**. I'm trying to make this with `useEffect` but when `<audio>:ontimeupdate()` runs, `useEffect` gets triggered and **slider** got stuck.

Can i check what component, function or method changes state and get it from `useEffect`?

**Versions:**
React: 16.7.0-alpha.0
ReactDOM: 16.7.0-alpha.0
",Other
https://github.com/facebook/react/issues/14187,14187,Reusing refs,[],closed,FALSE,,4,2018-11-10T13:42:44Z,2018-11-12T19:35:33Z,2018-11-12T16:24:07Z,NONE,completed,,"There are some jquery-like, DOM-based libraries that depend on a specific DOM structure. Lets say an image slider, which has the items-list and controls.

```
componendDidMount() {
   $('#my-slider').slider.init()
}

<div id=""my-slider"" className=""slider"">
  <ul className=""slider-list"">{items.map(item =>
     <li className=""slider-item"">{item}</li>
  )}
  <div className=""slider-controls"" />
</div>
```

Note the `slider-controls` div is completely empty, this will be generated by the `slider` lib during initialisation in `componentDidMount`

The structure is closed, and you cannot just take the `slider-controls` and put them at another place, the `$.slider()` lib would not work. But I found another technique how to accomplish this, by using `refs`

The structure became:

```
controls = React.createRef()
componentDidMount = () => {
  $('#my-slider').slider.init()
  this.forceUpdate();
}
<div className=""page"">
  <div id=""my-slider"">
    <ul ... />
    <div className=""hide""> // hide this controls
      <div ref={this.controls} className=""slider-controls"" />
    </div>
  </div>
  { this.controls.current ? <div
        className=""reuse-controls-somewhere-else""
        dangerouslySetInnerHTML={{
          __html: this.controls.current.innerHTML
        }}
    /> : null
  }
</div>
```

This stuff works, its great, but I thought maybe there is a better technique to reuse `refs`? If so, I could't find anything in the docs, so maybe it would be a good idea to fill the gap.

Thanks!",Support
https://github.com/facebook/react/issues/14189,14189,State updates from useState hook not always collapsed?,[],closed,FALSE,,7,2018-11-11T10:06:28Z,2018-11-12T16:59:35Z,2018-11-12T14:25:57Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I'm hoping it's a bug, it at least bit me very unexpectedly when trying out the new react hooks.

**What is the current behavior?**
When multiple setters returned from useState are called in the same timeslice:
* sometimes they are collapsed into a single update, and a single rerender is triggered, the 'intermediate' state is not observable
* sometimes they are not collapsed into a single update, and multiple rerenders are triggered, the 'intermediate' state is observable from the first rerender

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**
See https://codesandbox.io/s/74nm51wv00
The `toggle` triggered from the button click will collapse the state changes, so the `a === b` console.log will never trigger.
However the `toggle` triggered from window.setInterval will not collapse the state changes, triggering the console.log.

**What is the expected behavior?**
I would expect the state changes to always be collapsed, a little bit for performance (less rerenders), but mostly because this makes logically 'impossible' states observable during rendering, which was very unexpected for me.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.7.0-alpha.0 with the new hooks.
",Support
https://github.com/facebook/react/issues/14200,14200,"React is removing critical vendor prefixes, breaking styles.",[],closed,FALSE,,1,2018-11-12T18:40:20Z,2018-11-12T18:44:33Z,2018-11-12T18:44:33Z,NONE,completed,,"Related: https://github.com/facebook/react/issues/7372

React is removing the vendor prefix from `-webkit-background-clip`, `background-clip` without the prefix is not supported in Chrome.

See https://jsfiddle.net/2mx8gqh4/ in Chrome, inspect the element and see that the invalid `    background-clip: text;` is applied.  (`style={{ WebkitBackgroundClip: 'text' }}` was requested.)

**What is the expected behavior?**

`-webkit-background-clip: text;` is applied

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested in Chrome 70, React 16.5.1, and 16.6.1 - occurs in all.
Only Chrome/Opera are impacted.",Support
https://github.com/facebook/react/issues/14214,14214,When using React.lazy to code-split an error occurs if not accessing root route,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,10,2018-11-13T08:37:43Z,2019-09-04T10:11:09Z,2019-09-04T10:11:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
🐛 Bug Report
**What is the current behavior?**
I'm using `React.Lazy` to code-split my page routes, when navigating between routes works fine as long as I start at `/`, if I start the app in another route I get the following:
```
Uncaught Error: Could not find ""store"" in either the context or props of ""Connect(Info)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(Info)"".

Warning: Unexpected Fiber popped.

Warning: Unexpected pop.

Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.
```
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I can't make a reproduction at the moment, will try to add it as a comment later. I also don't want to forget submitting this, so at least I'm adding it without repro for now.

**What is the expected behavior?**
When entering into a route different than root `React.lazy` should load the correct component.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.6.0
Chrome 70
Firefox 63",Other
https://github.com/facebook/react/issues/14220,14220,"When using React.lazy will cause the GPU/CPU to run overloaded, and the page is very slow.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,33,2018-11-13T17:30:14Z,2018-12-20T11:33:54Z,2018-12-14T19:03:24Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**

page is very slow.

As we can see from this picture, React has been executing a work loop during the rendering suspend.

![image](https://user-images.githubusercontent.com/4060976/48454245-83d97000-e7f1-11e8-9346-51ee4591cf9e.png)

![image](https://user-images.githubusercontent.com/4060976/48457425-a1143b80-e7fd-11e8-8ddd-5cd2682a1f09.png)


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

I expect the page not to be stuck

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React16.6.3
",Bug
https://github.com/facebook/react/issues/14229,14229,Error in JSdoc react versions 16.6.1 - 16.6.3,[],closed,FALSE,,5,2018-11-14T10:34:59Z,2018-11-16T15:40:45Z,2018-11-16T15:40:45Z,NONE,completed,,"Hello, looks like in file react.development.js exists some inconsistency between versions
![screenshot from 2018-11-14 12-30-42](https://user-images.githubusercontent.com/11429982/48477217-b0998180-e809-11e8-9abb-5330b6bb7a87.png)

",Bug
https://github.com/facebook/react/issues/14251,14251,Flow error with hooks,[],closed,FALSE,,3,2018-11-16T11:40:18Z,2018-11-17T12:53:40Z,2018-11-17T12:53:39Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
```javascript
$ npm run lint

Error ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ index.js:2:17

Cannot import useContext because there is no useContext export in react. Did you mean Context?

     1│ // @flow
     2│ import React, { useContext } from 'react';
     3│
     4│
```

**What is the expected behavior?**
It should not report an issue.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Clone https://github.com/hrasoa/flow-hook
```sh
$ npm install
$ npm run lint
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```sh
$ npm ls react flow-bin

├── flow-bin@0.86.0 
└── react@16.7.0-alpha.2 

",Feature
https://github.com/facebook/react/issues/14254,14254,React.lazy does not allow retrying a rejected promise,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,17,2018-11-16T18:02:00Z,2022-07-15T12:04:04Z,2020-01-16T20:59:52Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

It can be seen as a feature or a bug, depending on angle. Let's say it's an enhancement to how `lazy` works.

**What is the current behavior?**

When using `React.lazy`, if the given promise rejects while trying to asynchronously load a component, it's no longer possible to retry loading the component chunk because `lazy` internally caches the promise rejection.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

This does not seem to work great in CodeSandbox because it's using service workers, which get in the way when simulating offline mode, yet this small app illustrates the issue: https://codesandbox.io/s/v8921j642l

**What is the expected behavior?**

A promise rejection should not be cached by `lazy` and another attempt to render the component should call the function again, giving it the chance to return a new promise.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

AFAIK all version of React that include `lazy`.
",Feature
https://github.com/facebook/react/issues/14257,14257,Hooks don't work with yarn link,[],closed,FALSE,,36,2018-11-17T05:32:30Z,2022-07-29T11:40:57Z,2018-11-19T17:04:43Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When developing an external library locally and using `yarn link` to link the library to a local react app the ""hooks can only be called inside the body of a function component"" error comes up. However, after publishing to npm and using the published version in the local react app everything works as expected.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
1. Create a library that's built with hooks (my-hooks-lib)
2. Create a local app that uses the library (my-react-app) using CRA
3. `yarn link` in my-hooks-lib and in my-react-app run `yarn link my-hooks-lib`

**What is the expected behavior?**
`yarn start` in the react app should use hooks and render normally

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react and react-dom `16.7.0-alpha.2`
OSX
",Support
https://github.com/facebook/react/issues/14258,14258,How to update a component that is other root by reactDom.render ?,[],closed,FALSE,,10,2018-11-17T11:03:36Z,2018-12-19T04:04:05Z,2018-12-19T04:03:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
feature.

**What is the current behavior?**

When the parent component is updated, the child component is mounted to the body by detecting the visible property and via componentDidUpdate (note that the upper component is mounted to the #root div), but when my parent component is setState, the child component is The value is not updated. It seems that the subcomponent can be refreshed only once it is remounted.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
Child components are also updated when the parent component updates state, I want to find a great solution

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react 16.6
OSX

",Support
https://github.com/facebook/react/issues/14264,14264,Npm run eject? Its missing node-sass,[],closed,FALSE,,1,2018-11-18T04:17:35Z,2018-11-18T04:19:04Z,2018-11-18T04:19:04Z,NONE,completed,,"I think the script should add **node-sass** to **devDependencies**, after npm run eject I have to always type npm install node-sass --save-dev.",Other
https://github.com/facebook/react/issues/14266,14266,props with same key and value,[],closed,FALSE,,2,2018-11-18T15:01:46Z,2018-11-18T15:57:26Z,2018-11-18T15:57:26Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Short form for props key and value**
for example:
*Instead of this*:
```Javascript
......
const { name, age, photoURI } = this.state
return (
  <Person name={name} age={age} photoURI={photoURI} />
)
........
```
this:
```Javascript
.......
const { name, age, photoURI } = this.state
return (
  <Person *name *age *photoURI />
) 
........
```

or even other way so that we don't have to write same key and value.
maybe a doller ($) sign ``` <Person $name /> ``` and any other way

like in es2015 there is a fix for:
```Javascript
const person = {
  name: name,
  age: age,
  photoURI: photoURI
}
// to
const person = { name, age, photoURI }
```

Pardon my English",Support
https://github.com/facebook/react/issues/14273,14273,Start the mistake,[],closed,FALSE,,2,2018-11-19T07:31:45Z,2018-11-19T15:02:45Z,2018-11-19T15:02:45Z,NONE,completed,,"![image](https://user-images.githubusercontent.com/26972074/48692209-30f82200-ec10-11e8-8299-7b88130e42a5.png)
",Support
https://github.com/facebook/react/issues/14296,14296,Install all imported libraries on save,[],closed,FALSE,,2,2018-11-21T09:30:53Z,2018-11-21T15:05:21Z,2018-11-21T15:05:21Z,NONE,completed,,"
I would like to propose a new feature and work on it's implementation. 

Currently, it is required for a developer to install a library using 'npm install $library_name' before the library can be imported and used.

I propose that once the developer imports and saves the .js file all the uninstalled imports are 'npm install'ed. I would like to work on this change.

",Other
https://github.com/facebook/react/issues/14304,14304,I wonder if there are plans to support tslint for hooks like eslint-plugin-react-hooks,[],closed,FALSE,,4,2018-11-22T06:43:37Z,2019-06-05T05:28:08Z,2018-11-22T14:41:21Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/14321,14321,getDerivedStateFromProps is user-hostile,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2018-11-24T20:56:14Z,2020-01-17T10:59:21Z,2020-01-17T10:59:21Z,NONE,completed,,"So I think `getDerivedStateFromProps` as designed turns out to be user-hostile. The short summary is that it makes the pattern described in the docs, https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns, impossible for non-trivial cases. 

Imagine implementing an HOC that listens to change events on a DataSource, but where a simple shallowEqual() on the resultant state isn't sufficient to prevent rendering. I.e., what if you need more complex logic to determine if new data from the DataSource should be applied? 

In my case, I have a DataSource that doesn't guarantee that it will give out objects of the same identity, so a `===` check will always return false and cause a re-render. BUT, I can do a little bookkeeping on the side and determine whether the data is actually new and should therefore be loaded into state. 

This leads to some problems: 
1) Because `getDerivedStateFromProps` is static, it's not possible to store some internal bookkeeping data on the Component instance that gets used to determine whether to query the DataSource. Worst case, this bookkeeping information could be stuffed in the state object, but that's unnecessarily constraining and a bit ugly from a code organization perspective. 
2) More importantly, it's not possible to determine why `getDerivedStateFromProps` is being called. Is it because of a props change? Or is it because of a ""change"" event firing on the `DataSource`? 

This matters because if props have changed, data must be fetched and the Component re-rendered unconditionally, but if the props haven't changed, then it's possible all the data loaded is the same as last time, and so `render()` can be skipped. 

Here's an example using the deprecated API that's no longer possible, lightly edited from the HOC example I mention above: 
```
function withDataLoading(Component, DataSource, getDataFunc) {

  return class extends React.PureComponent {
    componentDidMount() {
      // Subscribe to changes
      DataSource.addChangeListener(this.handleChange);
    }
  
    componentWillUnmount() {
      // Clean up listener
      DataSource.removeChangeListener(this.handleChange);
    }

    componentWillReceiveProps(props) {
      //Unconditionally update state and rerender since the props changed
      const possiblyNewData = getDataFunc(DataSource, props, this)
      this.setState(possiblyNewData);
      //Remember some metadata about what we fetched for next time
      this.bookkeeping = DataSource.bookkeepingData();
    }
  
    handleChange() {
      // Update component state whenever the data source changes
      const possiblyNewData = getDataFunc(DataSource, this.props, this)
      if(DataSource.didIFetchNewData(this.bookkeeping)) {
        //The DataSource had updated data in it, so rerender
        this.setState(possiblyNewData);
        //Remember some metadata about what we fetched for next time
        this.bookkeeping = DataSource.bookkeepingData();
      } else {
        //No new data was fetched, so don't update State and don't rerender
        //Do nothing…
      }
    }

    render() {
      <Component data={this.state}/>
    }
  }
}
```

Notice that the behavior is different between `componentWillReceiveProps` and `handleChange`. There's no way to make that distinction with the new API. ",Support
https://github.com/facebook/react/issues/14338,14338,Knowing when a component has been mounted for the last time,[],closed,FALSE,,5,2018-11-27T22:10:30Z,2018-11-28T00:49:41Z,2018-11-28T00:49:41Z,NONE,completed,,"Hello,

I am writing an application that keeps track of a bunch of component instances. For context, each mounted or could-be-mounted component instance requires reserved memory on a server. In the interest of saving memory, I would like know when a component has been unmounted for the last time (i.e. will never be re-mounted). Is it possible to know this from user-land? And does React even know this information?

Ideally this could be exposed as a ""destructor"" method call, though I understand why that would be discouraged.",Support
https://github.com/facebook/react/issues/14353,14353,npm error `npm ERR! extraneous: react@16.6.3` while attempting to insall react@16.6.3,[],closed,FALSE,,1,2018-11-29T03:13:18Z,2018-11-29T03:15:30Z,2018-11-29T03:15:30Z,NONE,completed,,"`npm i -S react@16.6.3`

`npm ERR! extraneous: react@16.6.3` What do I do wrong?",Other
https://github.com/facebook/react/issues/14355,14355,[Mouse Events] onMouseDownCapture is not stopping capture phase propagation,[],closed,FALSE,,4,2018-11-29T05:54:26Z,2019-06-09T23:30:04Z,2019-06-09T23:30:04Z,NONE,completed,,"**Bug report**

**The current documentation has and I quote https://reactjs.org/docs/events.html**
** -To register an event handler for the capture phase, append Capture to the event name; for example, instead of using onClick, you would use onClickCapture-**

**I tried with this https://jsbin.com/hilome/edit?js,output and**

`<div id=""grandparent"" onClickCapture={this._handleClickCapture}>
          <div id=""parent"" onClick={this._handleClickBubble}>
            <button id=""elem"" onClick={this._handleClick}>Click me!</button>
          </div>
        </div>`

**if I change onClickCapture with onMouseDownCapture the stopPropagation() method does not prevent capture phase any more**


**What is the expected behavior?**

**I would expect that stopPropagation() stops the propagation to its children as it works with onClickCapture event**
",Support
https://github.com/facebook/react/issues/14360,14360,useReducer: dispatched actions are reduced twice,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,4,2018-11-30T01:29:19Z,2018-11-30T15:02:52Z,2018-11-30T15:02:20Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Report a *bug*

**What is the current behavior?**
There are cases where actions dispatched by `useReducer`'s dispatch function are reduced twice (in concurrent mode).

As far as I can tell from my first quick read of the code of react-dom (so I might be totally wrong!), this happens, when a higher priority action is added to a queue that already contains lower priority actions.

On the first run, that is caused by for example an onClick handler (higher priority), the dispatched action is appended to the queue. On processing the queue the lower priority actions (for example from setInterval events)  are _ignored_ and the ""onClick action"" is reduced, but stays on the end of the queue, so that on the next time the queue is processed, that action gets reduced a second time.

See a testcase at:
https://codesandbox.io/s/nxq3w7rwl

Pressing the button increments the button (most of the time not always, depending if 'TICK' actions are in the queue) by two.

**What is the expected behavior?**
I'd expect a dispatched action to be only reduced once.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested with React 16.7.0-alpha.2 on Chrome (70.0.3538.110) and Safari (12.0.1) both on macOs
",Bug
https://github.com/facebook/react/issues/14366,14366,업데이트 좀 그만 하세요 !!!,[],closed,FALSE,,3,2018-12-01T03:00:37Z,2018-12-03T00:12:19Z,2018-12-01T03:38:46Z,NONE,completed,,"React 개발팀:

업데이트 좀 그만 하세요!!! 써글넘들...
이전 버전과 현재 버전 사이에는 항상 연관성이 있고, 공통성이 있어야지!!!
업데이트 할 때마다, 대량으로 수정을 해놓으면..
사용자들이 React 각 버전마다 새로 공부를 해야 되잖아요!!!
너무 변득스럽네요. 맨날 이랬다. 저랬다! 
React가 그렇게 불안전한 플랫폼인가요? 
매뉴얼도 좀 간단하게 만드세요. 
링크가 너무 많아서, 사용자들이 이리 갔다, 저리 갔다 하면서 헷갈리게 하지말고..

Angular 나 vue 로 갈아타던가 해야지! 
React 업데이트가 정말 짜증나네요.",Other
https://github.com/facebook/react/issues/14377,14377,[Scheduler] Add support for delayed scheduling of callbacks.,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1155972012,""node_id"":""MDU6TGFiZWwxMTU1OTcyMDEy"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Scheduler"",""name"":""Component: Scheduler"",""color"":""9de8f9"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,2,2018-12-03T01:04:57Z,2020-01-17T10:59:20Z,2020-01-17T10:59:20Z,NONE,completed,,"Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. ",Feature
https://github.com/facebook/react/issues/14402,14402,Disable react-devtools to track component tree,[],closed,FALSE,,0,2018-12-07T15:13:17Z,2018-12-07T16:49:50Z,2018-12-07T16:49:50Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*feature*

**What is the current behavior?**

I saw question on StackOverflow which is about user is able to edit component state and props which stores credentials  via `react-devtools` extension [secure-payment-with-paypal](https://stackoverflow.com/questions/53545118/secure-payment-with-paypal).

Currently any user who has `react-devtools` extension can edit Component props or state easily. I love this feature which is very handy for developing.

I know that developer should not depend on only client side validation and should validate any credentials both client and server. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

 I thought how about disabling `react-devtools` to tack component tree and editing components if user does not wants any changes in production. Maybe to pass some flag?

Sorry if it is silly issue 🙈",Other
https://github.com/facebook/react/issues/14403,14403,"Hooks does not work inside browser? (natural ES5, no babel)",[],closed,FALSE,,3,2018-12-07T23:51:39Z,2018-12-08T17:53:13Z,2018-12-07T23:54:03Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Hooks does not work inside browser.

**What is the expected behavior?**
There is no error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Google Chrome

react@16.7.0-alpha.2
react-dom@16.7.0-alpha.2


```
<!DOCTYPE HTML>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Hello World! Site Title</title>

    <script crossorigin src=""https://unpkg.com/react@16.7.0-alpha.2/umd/react.development.js""></script>
    <script crossorigin src=""https://unpkg.com/react-dom@16.7.0-alpha.2/umd/react-dom.development.js""></script>
</head>

<body>
    <div id=""app""></div>
</body>

<script>
function Clock() {
    const [count, setCount] = React.useState(0);

    return 
        React.createElement(""div"", {}, 
            React.createElement(""p"", {}, ""You clicked me"")
        )
    ;
}

ReactDOM.render(Clock(), document.getElementById(""app""));
</script>

</html>
```

The following code fails with an error ""Uncaught Error: Hooks can only be called inside the body of a function component."".

Do hooks not work naturally inside the browser and require webpack?
",Other
https://github.com/facebook/react/issues/14404,14404,eslint-plugin-react-hooks should report errors inside unnamed functions,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,16,2018-12-08T04:31:01Z,2020-01-17T08:00:13Z,2020-01-17T08:00:13Z,NONE,completed,,"I want to report a bug for the hooks plugin.

**What is the current behavior?**
There was no error report after running eslint, but the component failed when running in the browser.
From the chrome dev console it reported ""Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement."" 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.
Here is a link to the github repo:
https://github.com/paboulos/react-hooks-eslint

**What is the expected behavior?**
Followed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. 
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Using window 10 OS and Chrome browser.
1. First ran npx create-react-app Hooks
2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2
3. Installed eslint dev dependencies:
 ""babel-eslint"": ""9.0.0"",
    ""babel-loader"": ""8.0.4"",
    ""eslint"": ""5.9.0"",
    ""eslint-config-airbnb"": ""17.1.0"",
    ""eslint-loader"": ""2.1.1"",
    ""eslint-plugin-import"": ""2.14.0"",
    ""eslint-plugin-jsx-a11y"": ""6.1.2"",
    ""eslint-plugin-react"": ""7.11.1"",
    ""eslint-plugin-react-hooks"": ""0.0.0""
4. Created the .eslintrc.json following the instructions from the Hooks API Doc
Then ran package script lint as follows: ""npm run lint""
no errors reported.
Then ran package script start as follows: ""npm start""
The React component CountHooks calls useState incorrectly and reports error in the browser dev console.",Bug
https://github.com/facebook/react/issues/14413,14413,useMemo gets called twice with Suspense,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,1,2018-12-10T14:52:02Z,2019-01-18T03:13:41Z,2019-01-18T03:13:41Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Possible (future) bug

**What is the current behavior?**

I have a feeling this might be a known tradeoff because of how the reconciler throws away an unfinished subtree when a Promise is thrown, but since it surprised me and wasn't documented I felt I should report it anyway. If it is known/intended, feel free to close.

If a component with useMemo re-renders because of a thrown Promise (Suspense), function is not memoized and gets called twice.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/72o4mznvr1

**What is the expected behavior?**

useMemo gets called once?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.7.0-alpha.2",Other
https://github.com/facebook/react/issues/14414,14414,How to fix react run issue,[],closed,FALSE,,1,2018-12-10T15:27:52Z,2018-12-10T17:04:05Z,2018-12-10T17:04:05Z,NONE,completed,,"After installing react-router-dom i am not able to run react application, Below are the errors, I am getting, didn't find any solution to fix that, I have this issue after installing react-router-dom

E:\PC\AboutMe\client>npm start

> client@0.1.0 start E:\PC\AboutMe\client
> react-scripts start

'react-scripts' is not recognized as an internal or external command,
operable program or batch file.
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! client@0.1.0 start: `react-scripts start`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the client@0.1.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:

**When i try to run **npm install** getting below issue**

npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.
npm ERR! Unexpected end of JSON input while parsing near '...h"":""^1.2.12"",""yargs"":'

Please help me out to fix it i am new to react",Support
https://github.com/facebook/react/issues/14417,14417,React project as a widget,[],closed,FALSE,,1,2018-12-11T09:29:13Z,2018-12-11T19:51:09Z,2018-12-11T19:51:09Z,NONE,completed,," I need to my app act just like a widget, just like what [crisp](https://crisp.chat/en/?ta=XHKkRDPfp6&gclid=EAIaIQobChMIy4Tln7yB3wIVSwOGCh2mlgOLEAAYASAAEgK2GvD_BwE) chat widget does on other websites and be accessible through CDN link. I trying to build a CRM and I found nothing to make this happen.
",Other
https://github.com/facebook/react/issues/14426,14426,CSS animations not triggered when modifying className prop elements with the same key,[],closed,FALSE,,1,2018-12-12T19:04:55Z,2019-02-08T17:21:40Z,2019-02-08T17:21:39Z,NONE,completed,,"## Example
https://codesandbox.io/s/pkn15wl0xq

## Expected Behavior
Clicking on both side buttons should result in a Carousel like animated transition.

## Actual Behavior
Only the left button click results in correct transitions. Right button clicks just render the new color without animation.

## Details
CSSTransitions are located in `public/CSSTransitions.css`. When manually added to an elements class property using the debugger, the animation behavior is correct.

AFAIK, I have taken into account React reconciliation algorithm with the current implementation of keys. If not, please let me know.

## Relevant Code
### CSSTransitions.css
```
.animated {
  transition: transform 1100ms cubic-bezier(0.82, 0, 0.63, 1),
    opacity 1100ms linear;
}

.left {
  transform: translateX(-81.8vw) translateZ(47vw) rotateY(72deg);
  opacity: 0.4;
}

.center {
  transform: translateX(0vw) translateZ(0vw) rotateY(0deg);
  opacity: 1;
}

.right {
  transform: translateX(81.8vw) translateZ(47vw) rotateY(-72deg);
  opacity: 0.4;
}
```

### index.js
```
const Background3D = ({ children }) => (
  <div
    style={{
      position: ""fixed"",
      background: ""black"",
      height: ""100vh"",
      width: ""100vw"",
      overflow: ""visible"",
      perspective: ""1000px"",
      transformStyle: ""preserve-3d""
    }}
  >
    {children && children}
  </div>
);

const CarouselSide = ({ color, className }) => (
  <div
    className={className}
    style={{
      backgroundImage: `linear-gradient(to right,gray, ${color})`,
      position: ""absolute"",
      height: ""inherit"",
      width: ""inherit"",
      top: 0,
      overflow: ""hidden""
    }}
  />
);

class Carousel extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      centerIndex: 1,
      rightTransition: false,
      leftTransition: false
    };
  }

  rotateLeft() {
    this.setState({
      centerIndex: mod(this.state.centerIndex + 1, this.props.colors.length),
      rightTransition: false,
      leftTransition: true
    });
  }

  rotateRight() {
    this.setState({
      centerIndex: mod(this.state.centerIndex - 1, this.props.colors.length),
      rightTransition: true,
      leftTransition: false
    });
  }

  render() {
    return (
      <React.Fragment>
        <Background3D>
          <CarouselSide
            key={mod(this.state.centerIndex - 1, this.props.colors.length)}
            className={this.state.leftTransition ? ""animated left"" : ""left""}
            color={
              this.props.colors[
                mod(this.state.centerIndex - 1, this.props.colors.length)
              ]
            }
          />
          <CarouselSide
            key={this.state.centerIndex}
            className=""animated center""
            color={this.props.colors[this.state.centerIndex]}
          />
          <CarouselSide
            key={mod(this.state.centerIndex + 1, this.props.colors.length)}
            className={this.state.rightTransition ? ""animated right"" : ""right""}
            color={
              this.props.colors[
                mod(this.state.centerIndex + 1, this.props.colors.length)
              ]
            }
          />
        </Background3D>

        <CarouselButton type=""left"" onClick={e => this.rotateLeft()} />
        <CarouselButton type=""right"" onClick={e => this.rotateRight()} />
      </React.Fragment>
    );
  }
}
```
",Other
https://github.com/facebook/react/issues/14438,14438,Suspense and flash of white screen,[],closed,FALSE,,2,2018-12-14T00:10:00Z,2018-12-14T09:55:25Z,2018-12-14T02:13:37Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

I guess bug, but this is not stable feature, so not sure

**What is the current behavior?**

Here is the classical issue with async components in React.

When React application boots (`ReactDOM.render`) and some components are not loaded, it will flush current available components, which can be some loader or empty screen (`null`). If there was some HTML before (SSR or prerendered with react-snap) user will see flash of white screen.

![filmstrip 3](https://user-images.githubusercontent.com/179534/49975003-1fb6e280-ff3c-11e8-881b-d34eda33bd07.png)

I expected that `Suspense` would solve this issue, because it suppose to pause rendering. So I hopped it will not flush placeholder while it waits for subcomponent to load.

On the other side - I know that Suspense and asynchronous rendering is not finished yet, so I hope it will be fixed in the future.

**Demo**: https://github.com/stereobooster/react-async-issue

Steps:

```
git clone git@github.com:stereobooster/react-async-issue.git
cd react-async-issue
yarn
# remove homepage from package.json otherwise it will not work locally
yarn build
npx serve -s build
```

Or you can check online version https://stereobooster.github.io/react-async-issue/

**What is the expected behavior?**

I expect that `Suspense` will pause rendering of React until `maxDuration` times out or all components get loaded (whatever comes first), and before this no DOM changes would be flushed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.6.3. Feature is fresh so no sense to check in previous versions.

",Support
https://github.com/facebook/react/issues/14449,14449,"Allow the ""dusk"" tag in DOM elements",[],closed,FALSE,,4,2018-12-17T10:53:17Z,2018-12-20T17:04:26Z,2018-12-20T17:04:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature Request

**What is the current behavior?**

The ""dusk"" tag is stripped out of DOM elements.
( as expected: https://reactjs.org/docs/dom-elements.html#supported-attributes)

Dusk is a Browser testing environment for the popular php framework Laravel.
https://laravel.com/docs/5.7/dusk

The ""dusk"" tag allows you to easily select dom elements. 
https://laravel.com/docs/5.7/dusk#dusk-selectors

It is convenient as you do not need to worry about DOM elements having their classes or IDs changed in the future, or you can use more descriptive names in projects that are already using less descriptive IDs.
",Other
https://github.com/facebook/react/issues/14458,14458,getDerivedStateFromProps cannot be used to react to changes in props,[],closed,FALSE,,4,2018-12-18T15:30:31Z,2018-12-18T16:27:25Z,2018-12-18T15:39:50Z,CONTRIBUTOR,completed,,"## Problem

The [blogpost](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) and [docs](https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops) on this method explicitly say:

> getDerivedStateFromProps exists for only one purpose. It enables a component to update its internal state as the result of changes in props.

> This method exists for rare use cases where the state depends on changes in props over time. 

Also the RFC states:

> Note that React may call this method even if the props have not changed.

**But how one can react to *changes* in props when no previous props or state are available and this method is invoked both when props change and not? (and also [after setState](https://github.com/facebook/react/issues/13480)).**

## Use case

My component is a filter button that upon clicking show popover dialog (something like [this](https://www.w3schools.com/bootstrap/bootstrap_popover.asp)) with ability to change inside popover, e.g. price of product.

The [blogpost](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) recommends following solutions:

> Recommendation: Fully controlled component

I don't want fully controlled component as I want to encapsulate behavior of opening and closing popover within filter button itself. I don't want to put this logic anywhere else than the component.

> Recomendation: To reset all internal state, use the key attribute.

I don't want to reset all internal state as popover should remain opened (i.e. its `state.opened` property should not be changed). It should only react to change in props, what are maximum and minimum values possible to select with price slider or ""defaultPrice"" value that is passed from model as prop after `onChange` prop is triggered by button.

> Recommendation: Fully uncontrolled component with a key

Again, I cannot use `key` because I want `state.opened` to be preserved and reset to ""default"" or ""managed"" values only other properties like selected price or currency if they change as props.

> Alternative 1: Reset uncontrolled component with an ID prop

In my case the the ""id"" is the price that should be shown as default, and indeed I tried following:

```js
static getDerivedStateFromProps (props, state) {
  if (props.distance !== state.distance) {
    return {
      distance: props.distance
    }
  }

  return null
}
```

Unfortunately this won't work because I want to use `setState({ distance: xxx })` to update current value of slider in real time within component itself (component triggers onChange only when slider is dropped). It turns out that `setState({ distance: xxx })` is overridden by logic `getDerivedStateFromProps` that sets state.distance to props.distance because `props.distance !== state.distance`.

> Alternative 2: Reset uncontrolled component with an instance method

Again, I don't want to reset anything, and I want to encapsulate popover logic and not rely on something like `ref` that has lots and lots of quirks and requires me to write custom code when to call this instance method and when just to pass property like I do everywhere for default values.

Memoization is not needed for this this use case so I'll skip it.

## Solutions?

Sincerely I don't know, but one thing for sure, the documentation should be changed.

getDerivedStateFromProps **cannot** be used to react to changes in props, it can be **only** be used to derive new state from current props and current state which is indeed very rare use case.

Also React deprecated perfectly good API that actually can react to changes in props, because it receives both props and prevProps, so maybe it's time to re-introduce this API and recommend it for this use case",Support
https://github.com/facebook/react/issues/14482,14482,Hooks performance problem when passing only event handler into component,[],closed,FALSE,,4,2018-12-21T19:51:33Z,2018-12-21T23:33:18Z,2018-12-21T22:42:46Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
No.

**What is the current behavior?**
When I pass a eventHandler memoized with useCallback it forces component render every time when a memoization parameter is changed. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here is link to [sandbox ](https://codesandbox.io/s/l5wrq94y37)
Every time we click on the button the Content is rendered when it should not.

**What is the expected behavior?**
Event handler should not force a component to render every time when a memoize parameter is changed.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

OS: any
""react"": ""^16.7.0-alpha.2"",
""react-dom"": ""^16.7.0-alpha.2"",
",Support
https://github.com/facebook/react/issues/14484,14484,TypeError: Object(...) is not a function,[],closed,TRUE,,44,2018-12-22T12:58:18Z,2020-09-21T10:40:22Z,2019-01-09T14:25:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug 🐛🐛 (May be 🤔🙄)

**What is the current behaviour?**

I have created react functional component and implement state full logic using `useState` method but it throws an `TypeError: Object(...) is not a function`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Installed packages
```json
""dependencies"": {
  ""@reach/router"": ""^1.2.1"",
  ""formik"": ""^1.4.1"",
  ""prop-types"": ""^15.6.2"",
  ""react"": ""^16.7.0-alpha.2"",
  ""react-dom"": ""^16.7.0-alpha.2"",
  ""react-scripts"": ""2.1.1"",
  ""styled-components"": ""^4.1.3"",
  ""yup"": ""^0.26.6""
},
```
Github repository : https://github.com/sagar-gavhane/workbench-client
Website: https://wonderful-allen-a3058d.netlify.com/
Screenshot: 
![screenshot](https://i.ibb.co/VLKVtNZ/Screenshot-from-2018-12-22-18-19-56.png)",Support
https://github.com/facebook/react/issues/14492,14492,Setting less in create-react-app 2.0 does not work,[],closed,FALSE,,1,2018-12-25T07:06:44Z,2019-01-09T14:24:54Z,2019-01-09T14:24:54Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
Setting less in create-react-app 2.0 does not work
```
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;

```


```
{
            test: lessRegex,
            exclude: lessModuleRegex,
            use: getStyleLoaders({ importLoaders: 2 }, 'less-loader'),
          },
          // Adds support for CSS Modules, but using SASS
          // using the extension .module.scss or .module.sass
          {
            test: lessModuleRegex,
            use: getStyleLoaders(
              {
                importLoaders: 2,
                modules: true,
                getLocalIdent: getCSSModuleLocalIdent,
              },
              'less-loader',
            ),
 }
```
I have installed less-loader by ` npm install --save-dev less-loader less `",Other
https://github.com/facebook/react/issues/14496,14496,Local environment is not a problem after the line Error: Minified React error #31; visit,[],closed,FALSE,,3,2018-12-26T08:11:12Z,2019-01-18T23:39:45Z,2019-01-18T23:39:45Z,NONE,completed,,"react-dom.production.min.js:179 Error: Minified React error #31; visit https://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7Bmodule%2C%20planList%2C%20taskList%7D&args[]= for the full message or use the non-minified dev environment for full errors and additional helpful warnings.
",Support
https://github.com/facebook/react/issues/14500,14500,diff algorithm,[],closed,FALSE,,2,2018-12-28T08:09:43Z,2018-12-28T11:26:41Z,2018-12-28T11:26:41Z,NONE,completed,,"In React, if the internal state of a subcomponent changes, does the diff algorithm occur within the component or from the topmost component?",Support
https://github.com/facebook/react/issues/14504,14504,"css-loader@1.0.0: The engine ""node"" is incompatible with this module. Expected version "">= 6.9.0 <7.0.0 || >= 8.9.0"".",[],closed,FALSE,,2,2018-12-29T03:24:45Z,2019-01-24T18:22:03Z,2018-12-29T14:20:39Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/14509,14509,What does dangerouslySetInnerHTML prop do? How is it achieved?,[],closed,FALSE,,3,2018-12-30T07:48:59Z,2019-01-02T07:36:21Z,2019-01-02T07:27:03Z,NONE,completed,,"   
 I understand the most basic xss. I used this property in my project  and found this feature is no different from innnerHtml.
   I read the source code, but because of the level and Time is limited.I have not been able to find the relevant code.  I want to know if it can avoid the risk of xss? Are there other risks?  At the same time, if someone knows the location of the relevant code, can you help me to point it out? I have no plans to read the entire code for the moment.",Support
https://github.com/facebook/react/issues/14514,14514,Proposal: Add top level useMount/useUnmount to improve scannability/prevent fragmentation,[],closed,FALSE,,8,2019-01-01T19:03:38Z,2019-01-02T22:33:56Z,2019-01-02T21:02:19Z,NONE,completed,,"This is a feature request.

The current hooks API provides everything that is necessary to create sophisticated and elegant applications. However, the current api is something of a step backwards in terms of scannability - e.g. Understanding when various code will execute in the component's lifecycle. 

As a trivial example, suppose I simply want to log some information everytime a component unmounts for some analytics purpose. That's it. Right now, the simple implementation is:

```javascript
useEffect(() => {
  return () => {
    fetch('some-analytics-api.com');
  }
}, [])
```

There's no issue with whether this code works. Clearly it does. However, when developers are scanning the code base littered with multiple `useEffect` invocations, all of which have different memoization arrays, it takes a second to realize what this code is supposed to be doing - _""Hmm, I see we're sending some analytics request. Okay, it's a callback returning a callback, so it's a disposer function. Oh, and there's an empty array as the final parameter, so the disposer only fires when the component unmounts""_. That fraction of a second to make that determination is just a bit too long in my opinion. With a new topLevel API `useUnmount` it is grokkable almost instantly:

```javascript
useUnmount(() => {
  fetch('some-analytics-api.com');
})
```

This proposal is to add a set of top level primitives that map more directly to the API's that developers are already familiar with and that correspond more closely to the lifecycle events developers think about when reasoning about application flow. The proposed top level hooks include `useMount`, `useUnmount` with either an optional flag to run inside a layout effect, or else two additional top level hooks `useLayoutMount`, `useLayoutUnmount`. 

A likely concern with this proposal is that it will  unnecessarily bloat the top level API. The reasoning goes: _Why add to the top level API convenience wrappers that can be coded in userland?_ It's a legitimate concern. In this case however, I argue that the use case is _so_ common that the benefits outweigh the cost. To borrow an analogy, developers have been able to perform `Array.map` since the invention of Javascript, but once it's usefulness and ubiquity was established, it was added to the language proper. I'm making this same argument for `useMount` and `useUnmount`. 

As evidence that these convenience wrappers are going to become extremely popular, simple Github searches for uses of `useUnmount` and `useMount` (https://github.com/search?q=useUnmount+react&type=Code and https://github.com/search?q=useMount+react&type=Code) return some 100+ repos already declaring their own convenience wrappers for these effects. Unless added to core, this number will expand drastically once hooks leave alpha. Clearly developers want these convenience wrappers, and will either write them themselves or import an external library (lodash for React? Please no...) that does it for them. 

Another likely concern with this proposal is that developers will use these syntactic sugar functions to write less optimized and self contained code. To borrow an example from the documentation, the fear is that instead of:

```javascript
useEffect(() => {
  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
  // Specify how to clean up after this effect:
  return function cleanup() {
    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
  };
}, []);
```

Devs will inefficiently do: 
```javascript
useMount(() => {
  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
})

useUnmount(() => {
  ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);      
})
```
From a practical performance perspective though, these two implementations are basically identical and not worth worrying about. Function definitions and invocations are cheap in modern javascript. As to the issue of the code being less self contained, in most instances I believe that won't be a problem since developers will simply extract the logic into a self contained custom hook like `useFriendStatus` that encapsulates all the logic into an atomic piece. 

One small additional benefit: With `useMount`/`useUnmount` being in React Core, instead of dozens of different snowflake implementations, there may feasibly be future optimizations on the hooks that React core will then be able implement on an ecosystem wide basis. 

So in summary, it seems to me that React can either fight the inevitable or embrace it. 

As a purely stylistic (for now at least) question, there's no real right or wrong answer to this proposal and barring extremely strong technical reasons against the proposal, I'm not sure how it can be discussed cooly and objectively. Maybe a developer survey? ",Support
https://github.com/facebook/react/issues/14537,14537,Suggestion: make version of react only with hooks to reduce bundle size,[],closed,FALSE,,1,2019-01-06T07:48:15Z,2019-01-09T14:26:52Z,2019-01-09T14:26:52Z,NONE,completed,,"I think that should be a version of react without component stuff to reduce bundle size and another version with component and hooks 
Is that would make a big effect of the bundle size or they are just some KBs ?",Other
https://github.com/facebook/react/issues/14542,14542,`useReducer` does not honor reducer function's default state value,[],closed,FALSE,,10,2019-01-08T03:18:17Z,2019-02-08T17:16:17Z,2019-02-08T17:16:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Please see the CodeSandBox here: https://codesandbox.io/s/v8y72ky0o5

Consider the following reducer:

```js
function reducer(state = 5, { type }) {
  switch (type) {
    case 'INCREMENT':
      return state + 1
    case 'DECREMENT':
      return state - 1
    default:
      return state
  }
}
```

Suppose we are trying to use the reducer in a component like so:

```jsx
function Counter() {
  const [count] = useReducer(reducer)
  return <span>{count}</span>
}
```

When rendered,  `count` is `undefined`.

**What is the expected behavior?**

One would expect `count` to be equal to `5`, because that is the default value for state in the reducer.

IMO, it would make sense if `initialState` argument for `useReducer` is undefined, to call `reducer(undefined, undefined)` to initialize the internal state.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.7.0-alpha.2",Bug
https://github.com/facebook/react/issues/14544,14544,`yarn flow` stuck at merging on Window10,[],closed,FALSE,,1,2019-01-08T10:08:27Z,2019-01-09T14:24:41Z,2019-01-09T14:24:41Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
a bug

**What is the current behavior?**
See #14519 first.

And i tested on a Linux machine,same node version,same yarn version,same npm version,and same operation.
On Linux,`yarn flow` works well.
I tested on another Window10 machine,also fail.

So i think this is a **bug** related to flow,win10 and react source code,not my own problem.

",Other
https://github.com/facebook/react/issues/14547,14547,are 2 files in phpstorm,[],closed,FALSE,,0,2019-01-08T15:37:06Z,2019-01-08T21:58:52Z,2019-01-08T21:58:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/14552,14552,"ignore this issue, posted to wrong repo :-)",[],closed,FALSE,,0,2019-01-09T01:25:59Z,2019-01-09T01:30:12Z,2019-01-09T01:28:56Z,NONE,completed,,"It would be good to notify people making issues and PRs to this package that it is now considered legacy and no longer actively maintained so they can stop wasting their time (unless new maintainers step up and are giving publish rights of course)

For context, this is from @sebmarkbage at Facebook regarding this package:

```
We had considered fixing them but instead we moved them out of the core package.
The whole mechanism is considered legacy and not part of core React.
It could be further improved in third party if people find enough value.
The general recommendation is to use TypeScript instead.
```

(From this twitter thread: https://mobile.twitter.com/sebmarkbage/status/1074736468503842817?s=21)",Other
https://github.com/facebook/react/issues/14561,14561,available free pre-paid gift cards for learning React  1-on-1 with experts,[],closed,FALSE,,1,2019-01-10T10:26:39Z,2019-01-10T10:47:26Z,2019-01-10T10:47:25Z,NONE,completed,,"FYI: 
I have available $20 pre-paid gift cards that you can use for learning React/Node and Javascript 1-on-1 with experts on the Experty learning platform. Just leave the comment and I will send it to you - via using contact details on your profiles - FOR FREE.

This will help you improve your react skills.",Other
https://github.com/facebook/react/issues/14564,14564,React.Children.count returns invalid number of children,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,7,2019-01-10T12:37:06Z,2020-05-22T10:39:37Z,2019-02-12T19:34:14Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

BUG

**What is the current behavior?**

>nextProps.children
> false

>React.Children.count(nextProps.children)
>1

>React.Children.toArray(nextProps.children).length
>0

>React.version
>""16.4.2""

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

That `React.Children.count(false)` behaviour is somehow aligned with `React.Children.toArray(false)`

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Support
https://github.com/facebook/react/issues/14574,14574,React Devtools perf issue with 16.7.0,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,18,2019-01-11T21:18:55Z,2020-01-10T11:28:40Z,2020-01-10T11:28:39Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When using a component that creates new Date objects inside an interval while having the Devtools extension open, the performance are really slow. 

With React 16.4.1, I don't have the same issue so it might be related to the Profiler tab (even if it also happen when being on the Elements tab).

**Reproduction:**
16.7.0 version with performance issues: https://codesandbox.io/s/w6zrvx1y98
16.4.1 version without perf issues: https://codesandbox.io/s/4x4jmx8zx4

Open the devtools on the standalone page (https://w6zrvx1y98.codesandbox.io)  while watching the Chrome task manager and you will see the memory go up quickly and the CPU be higher than 100%.

You might want to adjust the `ARRAY_SIZE` and `INTERVAL` constants based on your computer performance.

**What is the expected behavior?**
The page should not slow down that much. In my app, I display a list of 30 lines where each of them contains this component and the refresh rate is one second (the time change there). There was no issue at all with React 16.4.1 (I actually didn't know that this component existed 😄).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.7.0 is affected while 16.4.1. I also had the same issue with 16.6.0 and I thought it was related to #14365 but it is actually a different one.

[EDIT]: it's not a Chrome issue because I could reproduce the same issue on Firefox.

By the way, I'd be happy to make a PR for this if this makes sense. 🙂 ",Other
https://github.com/facebook/react/issues/14582,14582,[Hooks] Invariant Violation - Using a library that have hooks,[],closed,FALSE,,1,2019-01-12T23:04:55Z,2019-01-13T18:15:56Z,2019-01-13T18:15:56Z,NONE,completed,,"_Versions:_
* **react**: 16.8.0-alpha-0
* **react-dom**: 16.8.0-alpha-0
* **react-form-uncontrolled**: 0.3.1

### Problem ###

I wrote a simple Form library with just one hook (react-form-uncontrolled). However, **using this library** is displaying this error:

> Invariant Violation: Hooks can only be called inside the body of a function component

Codesandbox: https://codesandbox.io/s/znx2r55lkp

Although the error says that it can only be called inside the body of a function component, is already on the body...

Original library code: 

```js
import React, { useCallback } from 'react'

function Form(props) {
  const onSubmitForm = useCallback(event => {
    event.preventDefault()
    event.stopPropagation()

    const { onSubmit = () => {} } = props
    const fields = Array.prototype.slice.call(event.target)
      .filter(field => field.name)
      .reduce((form, { name, value }) => ({
        ...form,
        [name]: typeof value === 'string'
          ? value.trim()
          : value,
      }), {})

    onSubmit(fields)
  }, [])
  const { children } = props

  return (
    <form {...props} onSubmit={onSubmitForm}>
      {children}
    </form>
  )
}

function Input(props) {
  const { label, name } = props

  return (
    <label htmlFor={name}>
      <div>{label}</div>
      <input
        {...props}
        id={name}
        name={name}
      />
    </label>
  )
}

module.exports = {
  Form, Input,
}
```

At the beginning I thought that was for the Babel transpilation. Nevertheless, running a codesandbox using the transpiled code instead of the library, is working well:

* https://codesandbox.io/s/k0j6zn2xzo

Downgrading these versions in the project that use the library, it works:

* **react** -> from 16.8.0-alpha.0 -> to 16.7.0-alpha.2
* **react-dom:** from 16.8.0-alpha.0 -> to 16.7.0-alpha.2

So looks that for some reason with 16.8.0-alpha.0 is not compatible.


> **Note**: Perhaps is not an issue and is something that I'm doing wrong... Any sugestion? ",Other
https://github.com/facebook/react/issues/14589,14589,More on: react-scripts: not found,[],closed,FALSE,,2,2019-01-14T16:17:21Z,2019-01-14T16:23:28Z,2019-01-14T16:21:34Z,NONE,completed,,"I've got more to report on this problem with react-scripts not found error.
Here is the error running 'npm start'

```
/myapp/front# npm start

> front@0.1.0 start /myapp/front
> react-scripts start

sh: 1: react-scripts: not found
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn
npm ERR! front@0.1.0 start: `react-scripts start`
npm ERR! spawn ENOENT
npm ERR!
npm ERR! Failed at the front@0.1.0 start script.
```

If one runs 'npx react-scripts start' it forces a rebuild of the entire 1980 packages?!!
But it does eventually run.

The setup issue is that the Ubuntu VM is running on an NFS Mount from Win8

First problem is all the bin files can't build, but if you build initially on VM's disk image VDI, and then copy back to real files over an NFS mount the second problem is it can't copy symbolic links (maybe an option to copy the source if symlink fails exists or should).

Okay so once you have the symbolic links repaired in windows via mklink after copying the initial build from a none NFS mount folder, well that's when this problem described above happens.

I am unclear on which one of the 1980 packages other then this react-scripts is in need or a total rethink but it doesn't cut it when setup in this way. (Using symbolic links seems literally unacceptable.)

It seems not unreasonable to think you should be able to use your platform/IDEs of choice and have the UNIX VM mount and work of those NFS Mounted files. The way all this stuff is build falls short of this I call expected behaviors. 

The only problems are why isn't 'npm start' able to run 'npx react-scripts start', and in turn why does that not understand the package is already built and take forever to rebuild all packages every time? I think it also relates to file watching. Maybe there is a way to deploy this without waiting 10 minutes to launch a simple example.
",Other
https://github.com/facebook/react/issues/14598,14598,What’s the difference between fiber reconciler sync mode and the old react 15 stack reconciler? Why does performance boosts so much?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-01-15T18:04:28Z,2019-01-22T07:13:55Z,2019-01-22T07:13:55Z,NONE,completed,,"Since performance of react 16 boosts so much and thanks to those aweosome talks on YouTube explained fiber so detailed, I hardly figured out even the latest version of react 16 is still in sync mode, no features like time slicing are turned on by default.

Then I wondered why the perfmance is pretty good compared with react 15 even though? 

Trying to get some info on google, but it seems like no one really looked into this question. Even react 16 is shipped with this “fake” fiber mode for such a long time, it is not well documented or explained on the official website.

Can someone give me some ideas about this please? ",Other
https://github.com/facebook/react/issues/14622,14622,I got it working using `15.3.2` so something must have changed in `15.4.0` to make brunch fail.,[],closed,FALSE,,4,2019-01-18T06:46:45Z,2019-01-18T11:29:57Z,2019-01-18T09:28:05Z,NONE,completed,,"hi,

i got the same issue like this 

can you please anyone knows about this???

react version : 16.4.0
react-dom: 16.4.0
react-addons-perf:  15.4.2

im getting the error like ::::
Module not found: Can't resolve 'react-dom/lib/ReactPerf' in 'C:\Users\Project\node_modules\react-addons-perf'",Support
https://github.com/facebook/react/issues/14641,14641,"""Invariant Violation: Unable to find node on an unmounted component"" on `react-test-renderer`'s `renderer.create` when react package versions don't match","[{""id"":710400704,""node_id"":""MDU6TGFiZWw3MTA0MDA3MDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer"",""name"":""Component: Test Renderer"",""color"":""006b75"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2019-01-20T20:37:19Z,2020-01-17T10:59:33Z,2020-01-17T10:59:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

```
import renderer from 'react-test-renderer';

const tree = renderer.create(<MyComponent />);
// => Invariant Violation: Unable to find node on an unmounted component
```

There're many people complaining about this issue in many different contexts. It seems to be coming from `findDOMNode`. The discussions are very vague and varied, e.g.
- https://stackoverflow.com/questions/52734483/reactdom-render-unable-to-find-node-on-an-unmounted-component-after-react-upgra
- https://github.com/Pomax/react-onclickoutside/issues/231
- https://github.com/airbnb/enzyme/issues/1411
- and the many more refernced issues

I'm not sure if all has the same root cause but many advise to upgrade/downgrade seemingly randomly. Also seemingly randomly it works for some and doesn't for others. Would be great to get a general recommendation / fix.

My use case:

`MyComponent` above is a simple `styled-component` (`styled.ul`).

The issue seem to be related to versions or version mismatches between `react`, `react-dom` and `react-test-renderer`. In my case, the error disappears locally by having `v16.5.0` install of all. However, the issue still occurs in GitLab CI. The only obvious difference is that the CI uses `yarn` and I use `npm`. **I was finally able to solve it in both environments by upgrading all three to the latest, `v16.7.0`.** Having any minor version mismatches seemed to reproduce the error locally.

Complete trace of error:
```
      at invariant (node_modules/react-dom/cjs/react-dom.development.js:55:15)
      at findCurrentFiberUsingSlowPath (node_modules/react-dom/cjs/react-dom.development.js:4125:30)
      at findCurrentHostFiber (node_modules/react-dom/cjs/react-dom.development.js:4233:23)
      at findHostInstanceWithWarning (node_modules/react-dom/cjs/react-dom.development.js:19454:21)
      at Object.findDOMNode (node_modules/react-dom/cjs/react-dom.development.js:19962:14)
      at StyledComponent.componentDidMount (node_modules/styled-components/dist/styled-components.cjs.js:1927:25)
      at commitLifeCycles (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:7019:22)
      at commitAllLifeCycles (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8234:7)
      at HTMLUnknownElement.callCallback (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2312:14)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)
      at Object.invokeGuardedCallbackDev (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2362:16)
      at invokeGuardedCallback (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:2411:31)
      at commitRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:8404:7)
      at completeRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9769:3)
      at performWorkOnRoot (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9697:9)
      at performWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9601:7)
      at performSyncWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9573:3)
      at requestWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9461:5)
      at scheduleWork (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9256:5)
      at scheduleRootUpdate (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9865:3)
      at updateContainerAtExpirationTime (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9892:10)
      at updateContainer (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9903:10)
      at Object.create (node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10428:5)
      at Object.<anonymous> (src/components/Selectors/DownShiftSelector/DownShiftSelector.test.js:45:44)
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

no error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

as described above",Support
https://github.com/facebook/react/issues/14656,14656,Props shortcut in HTML/JSX writting,[],closed,FALSE,,3,2019-01-22T11:00:19Z,2019-01-24T00:19:52Z,2019-01-24T00:19:52Z,NONE,completed,,"## Do you want to request a *feature* or report a *bug*?
Hello, I would like to requets a feature that has to do with the way the HTML part of the JSX is written.
 
## What is the current behavior?
Today, to pass a prop that has the same name as the variable that carries the information, here is the behavior:

`<Forum subjects={subjects} />`

## What is the expected behavior?
I (but not solely I, I'm sure) would love to be able to write this:

`<Forum subjects />`

I know that HTML allows this for booleans, but as JSX is neither HTML nor JS, I'm sure we can work something out to allow this for objects, the same way it's done in ES6:

`console.log({ nameOfTheVariable })`

for instance.",Other
https://github.com/facebook/react/issues/14668,14668,Will  dangerouslySetInnerHTML generate  more html element ?,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-01-23T13:16:55Z,2019-01-24T01:55:18Z,2019-01-24T01:45:10Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
**Do you want to request a *feature* or report a *bug*?**
Hi, React Team. Thanks for your awesome work. I have a problem when using 
`dangerouslySetInnerHTML` 

**What is the current behavior?**

My example code like this:
```
//...  the node.topic is a string
render() {
    const { node, className, style } = this.props;
    return (
      <div
        tabIndex={0}
        contentEditable={true}
        id=""editor""
        onKeyDown={this.handleKeyDown}
        spellCheck={false}
        onBlur={this.handleBlur}
        onPaste={this.handlePaste}
        ref={this.containerRef}
        dangerouslySetInnerHTML={{ __html: node.topic }}
        style={style}
      />
    );
  }
```

But I got unexpected html that looks like
![image](https://user-images.githubusercontent.com/13745971/51608727-3a28a680-1f53-11e9-9c6a-1b9161b63d67.png)
![image](https://user-images.githubusercontent.com/13745971/51608733-3eed5a80-1f53-11e9-8232-456034ce6e13.png)


**What is the expected behavior?**
It's hard for me to debug what's wrong with it. It's sometimes work, but sometimes will generate a `<br/>` tag. 
Maybe the `<br />` tag is generated by my browser ?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
react 16.7.0
react-dom 16.7.0
OS: macos 10.14.1 Beta (18B73a)
Chrome: 71.0.3578.98
```
",Support
https://github.com/facebook/react/issues/14708,14708,hooks: useContext with useState not updating,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-01-26T20:39:04Z,2021-04-15T09:30:39Z,2019-01-27T20:36:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

seems it's a **bug**. 😕 

**What is the current behavior?**

Nested context provider and `useContext` hooks seems to be conflicting, updates get discarded.

**What is the expected behavior?**

When connecting to a context, it should update whenever it's `value` changes.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- **react**: `18.8.0-alpha.1` (also reproduced on `16.7.0-alpha.0`)
- **browser**: `chrome 71`
- **os**: macOS Sierra

---

### more details

While working on a cleanup of a localStorage ""connection"",
I tried to mix 2 articles ([`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) & [`[2]`](https://reactjs.org/docs/context.html#updating-context-from-a-nested-component)) from the official react documentation, I've implemented it with hooks, but the value seems not to be passing through.

I've put up a streamlined demo on [codesandbox `[3]`](https://codesandbox.io/s/0yzjr8vnrv).

The actual implementation is only a couple of lines more (parsing it from and stringifying it to JSON).

Workarounds that I found:
- If I create a new function on each render around the `setValue` function, it actually works. 
  - but this goes against the advice on [`[1]`](https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down) about avoiding creating  new values.
- Migrate it to a class and use `componentDidUpdate` instead of `useEffect`.
  - I'm actually using this right now, as it works. Including saving a reference to the function in the state.

---

Is there anything that shouldn't work on the code below? the effect gets triggered with the changes,
but the value doesn't get updated on the components that consume via hook. see repro code [`[3]`](https://codesandbox.io/s/0yzjr8vnrv)

```javascript
const createLocalStorage = key => {
    const initialValue = localStorage.getItem(key)
    const ValueContext = createContext(initialValue)
    const SetterContext = createContext(() => {})

    const useStorage = () => [ValueContext, SetterContext].map(useContext)

    const Provider = ({children}) => {
        const [value, setValue] = useState(initialValue)

        useEffect(
            () => {
                console.log('effect', value)
                localStorage.setItem(key, value)
            },
            [value],
        )

        return (
            <ValueContext.Provider value={value}>
                <SetterContext.Provider value={setValue}>
                    {children}
                </SetterContext.Provider>
            </ValueContext.Provider>
        )
    }

    return [Provider, useStorage]
}
```

`[1]`: https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down
`[2]`: https://reactjs.org/docs/context.html#updating-context-from-a-nested-component
`[3]`: https://codesandbox.io/s/0yzjr8vnrv

---

![hlcecpq](https://user-images.githubusercontent.com/8649362/51789871-bea63f80-2174-11e9-9288-151510494a7e.gif)
",Support
https://github.com/facebook/react/issues/14712,14712,"React works in XSLT in Chrome/Safari but errs ""Unexpected token"" in Firefox",[],closed,FALSE,,4,2019-01-28T00:49:42Z,2019-01-29T16:32:03Z,2019-01-28T15:52:04Z,NONE,completed,,"This minimum react page works in Chrome and Firefox. Let's call it `reference.html`

    <!DOCTYPE html>
    <html>
    <head>
        <script src=""https://unpkg.com/react@16/umd/react.development.js""></script>
        <script src=""https://unpkg.com/react-dom@16/umd/react-dom.development.js""></script>
        <script src=""https://unpkg.com/babel-standalone@6.15.0/babel.min.js""></script>
    </head>
    <body>
    <div id=""container""/>
    <script type=""text/babel"">
        var destination = document.querySelector(""#container"");
        ReactDOM.render(
            <p>Hello World</p>,
            document.querySelector(""#container"")
        );
    </script>
    </body>
    </html>

Now putting that to XSLT, first, prepare a dummy XML file for demonstration:

    <?xml version=""1.0"" encoding=""UTF-8""?>
    <?xml-stylesheet type=""text/xsl"" href=""experiment.xsl""?>
    <dummy/>

Then the `experiment.xsl` which mimic `reference.html`.

    <?xml version=""1.0"" encoding=""UTF-8""?>
    <xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
      <xsl:template match=""/"">
        <html>
        <head>
          <script src=""https://unpkg.com/react@16/umd/react.development.js""></script>
          <script src=""https://unpkg.com/react-dom@16/umd/react-dom.development.js""></script>
          <script src=""https://unpkg.com/babel-standalone@6.15.0/babel.min.js""></script>
        </head>
        <body>
            <div id=""container""/>
            <script type=""text/babel"">
              var destination = document.querySelector(""#container"");
              ReactDOM.render(
              <p>Hello World</p>,
              document.querySelector(""#container"")
              );
            </script>
        </body>
        </html>
      </xsl:template>
    </xsl:stylesheet>

The result should be identical to the single-page minimum example, and indeed it works that way in Google Chrome (v70) and Safari. But in Firefox (v64) I got:

    SyntaxError: Inline Babel script: Unexpected token (4:10)
      2 |           var destination = document.querySelector(""#container"");
      3 |           ReactDOM.render(
    > 4 |           ,
        |           ^
      5 |           document.querySelector(""#container"")
      6 |           );
      7 |         

Seems the inline HTML is simply deleted for some reason.",Support
https://github.com/facebook/react/issues/14728,14728,react packages listed as dependencies can't be debugged properly,[],closed,FALSE,,1,2019-01-30T14:38:32Z,2019-02-08T16:54:02Z,2019-02-08T16:54:02Z,NONE,completed,,"**Do you want to request a feature or report a bug?** Bug

**What is the current behavior?**
React packages listed as dependencies can be debugged only in transpiled code and not JSX.

**What is the expected behavior?**
You can see and debug JSX files from other react packages listed as dependencies.
I would expect webpack.config.js to configured properly in the default react app even before is ejected.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
It happens in all versions of everything.
",Other
https://github.com/facebook/react/issues/14731,14731,useState inside a context provider not properly read when called from timeout,[],closed,FALSE,,1,2019-01-30T18:43:08Z,2019-01-30T19:26:36Z,2019-01-30T19:26:36Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Looks like a **bug**.

**What is the current behavior?**

I have a simple context set up to manage a global store. When implementing this context as a functional component with the useState hook, calls to my setStore function from inside a timeout are seeing old versions of the store and updating it incorrectly.

Possibly a duplicate of #14010 but I don't see why the value of my store should be getting saved by the closure. The closure created by the setTimeout can't see the value of store, so it shouldn't be captured.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

[https://codesandbox.io/s/mnxr754oy](https://codesandbox.io/s/mnxr754oy)

Refresh the page in the sandbox and click the ""Increment otherVal"" button a few times. After 3 seconds, a timeout fires in ChildThree that sets myVal to 42 but doesn't touch otherVal; however, the changes made by incrementing otherVal get blown away. This doesn't happen with changes prompted by onClick events (as you can test by clicking ""Set myVal to 42"" on the bottom), only timeouts.

The context implementation is in `store.js`. If you swap out the functional StoreProvider with the commented out class version, everything works as expected.

It's possible that I'm doing something wrong with how my closures are being created in the functional StoreProvider but I can't see why.

**What is the expected behavior?**

The context provided function setStore should be seeing the correct copy of the state returned by the hook.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested in Chrome/Firefox/Edge on React 16.9.0-alpha.1",Other
https://github.com/facebook/react/issues/14732,14732,Memory leak on React > 16.2.5,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,22,2019-01-30T22:03:07Z,2020-04-19T22:58:41Z,2020-04-19T22:58:41Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Possible bug, or unexpected change in internal behavior

**What is the current behavior?**
We are seeing a substantial memory leak in our codebase in versions of React > 16.5.2. Bisecting the issue, it seemed to appear at commit 7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Our apologies, we are unable to fully isolate the issue to a minimal demo, and suspect it is not a bug but a behavior change which our code relied on. The leak seems to be in the messages area, where many components are created and released quickly.

**What is the expected behavior?**
Old fibers should be garbage collected, but cannot be. Components are retained in memory.
We have run the affected code area in StrictMode, which allowed us to identify some event leakage but even when this was addressed (by moving listeners to componentDidMount from the constructor) the memory leak continues. There are some findDomNode usages remaining, but even if we move those it does not fill the leak.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.5.3+

We are seeking suggestions on what internal could be causing retention of components and nodes by our code, and better ways to isolate the issue.

Thank you!
-Mike",Bug
https://github.com/facebook/react/issues/14740,14740,"Still a ""NotFoundError: Failed to execute 'removeChild' on 'Node'""",[],closed,FALSE,,6,2019-01-31T14:36:41Z,2019-11-04T09:23:59Z,2019-02-08T16:38:36Z,NONE,completed,,"I smashed again the error ""NotFoundError: Failed to execute 'removeChild' on 'Node'"" too.

After reading tons of threads about it I realized it's a pretty common error, however I couldn't figure out how all the provided solutions could apply to my case: I neither do DOM mutations by hand nor swallow exceptions. 

I think I can reduce the relevant parts of the code as follows: 

**SearchDomains.js**
```
 handleAddToCart = domain => {
    if (!domain) {
      return false
    }

    return this.props.addToCart(domain)
      .catch(e => {
        const errorCode = get(e, 'data.code')

        if (errorCode === 'DomainTaken') {
          this.setState({
            domains: {
              ...this.state.domains,
              [domain.suggestion]: {
                ...this.state.domains[domain.suggestion],
                availability: STATUS_UNAVAILABLE
              }
            },
            showPremiumDomainModalWarning: true
          })
        } else {
          this.openErrorModal()
        }

        return Promise.reject(e)
      })
  }

render () {
    const domains = this.getDomains()
    const visibleDomains = this.getVisibleDomains()

    return !this.state.isLoading && (
      <Fragment>
        <LoadMore
          isLoading={this.state.isSearching}
          total={domains.length}
          count={visibleDomains.length}
          loadingLabel='Searching, please wait...'
          infinite
          onLoadMore={this.handleLoadMore}
        >
          {React.cloneElement(this.props.children, {
            domains: this.getDomains(),
            visibleDomains: this.getVisibleDomains(),
            allVisibleDomains: this.getVisibleDomains(0, false),
            onChangeFilter: this.handleFilters,
            onChangeFormFilter: this.handleSort,
            onSearchChange: this.handleSearchChange,
            onAddToCart: this.handleAddToCart,
            ...omit(this.state, 'domains')
          })}
        </LoadMore>
        {this.state.showTimeoutAlert && this.renderTimeoutAlert()}
        {this.state.showErrorModal &&
          <CartResourcesLimitExceeded
            type='domain'
            onClose={this.closeErrorModal}
          />
        }
        <Popup
          isOpen={this.state.showPremiumDomainModalWarning}
          onClose={this.closePremiumModal}
          icon={{ name: 'ic-warning', size: 'md', color: '#f6852f' }}
          title='This is a premium domain'
          message={
            <span>Premium domain names are not registrable via Rebrandly at the moment.
              <A href='https://support.rebrandly.com/hc/en-us/articles/224626587' size='lg' target='_blank'> Read more</A>
            </span>
          }
          primaryButtonProps={{ label: 'Select another domain', onClick: this.closePremiumModal }}
        />
      </Fragment>
    )
  }
```


**DomainItem.js:**

```
render () {
    let discount

    if (this.props.isCoupon) {
      discount = <Text className='Text--Disable line-through m-r-24'>${this.props.renewalPrice}</Text>
    } else {
      discount = this.props.currentPrice < this.props.renewalPrice
        ? <Text size='x-small' className='Text--Disable m-r-4'>
          <span className='line-through m-r-4'>
            ${this.props.renewalPrice}
          </span>
          NOW
        </Text>
        : <Text size='x-small' className='Text--Disable m-r-4'>
          ONLY
        </Text>
    }

    return (
      <Fragment>
        {this.props.availability === STATUS_AVAILABLE
          ? <Fragment>
            {discount}
            {!this.props.isCoupon &&
              <Tooltip
                overlay={<span>First year, then ${this.props.renewalPrice} renewal. <RouterLink target='_blank' href='https://support.rebrandly.com/hc/en-us/articles/225551448-Domain-Pricing-for-Custom-Short-Urls'>Learn more</RouterLink></span>}
                placement='top'
              >
                <Text className='DomainItem__azure m-r-24'>${this.props.currentPrice}</Text>
              </Tooltip>
            }
            {this.state.isLoading
              ? <Loading size='md' />
              : <Button
                isLoading={this.state.isLoading}
                {...this.props.actionButtonProps}
                onClick={this.handleOnClick}
              />
            }
          </Fragment>
          : <Text className='DomainItem__unavailable Text--SubDetail' size='small'>
            {!!this.props.availability && (this.props.availability === STATUS_UNKNOWN ? 'Couldn’t check domain details' : 'Not available')}
          </Text>
        }
      </Fragment>
    )
  }
```

I was pretty sure there had to be some messed (async) logic changing the cards under the hood between a render cycle and the next one, so I spent some time trying to debug all the updates,  looking for the reason that was driving to an inconsistency in the DOM reconciliation.  

Indeed, I figured out the issue was with that ternary operator in the DomainItem's `render` function: dropping temporarily the ""else"" case, thus, preventing react from removing a content and injecting a different one, switched off the error.  Of course this was not an acceptable fix.

Then, I realized that everything could be solved by just removing the wrapping `<Fragment>` in the return statement of DomainItem's `render` function. Now everything works fine:

 ```
return this.props.availability === STATUS_AVAILABLE
      ? <Fragment>
        {discount}
        {!this.props.isCoupon &&
        <Tooltip
          overlay={<span>First year, then ${this.props.renewalPrice} renewal. <RouterLink target='_blank' href='https://support.rebrandly.com/hc/en-us/articles/225551448-Domain-Pricing-for-Custom-Short-Urls'>Learn more</RouterLink></span>}
          placement='top'
        >
          <Text className='DomainItem__azure m-r-24'>${this.props.currentPrice}</Text>
        </Tooltip>
        }
        {this.state.isLoading
          ? <Loading size='md' />
          : <Button
            isLoading={this.state.isLoading}
            {...this.props.actionButtonProps}
            onClick={this.handleOnClick}
          />
        }
      </Fragment>
      : <Text className='DomainItem__unavailable Text--SubDetail' size='small'>
        {!!this.props.availability && (this.props.availability === STATUS_UNKNOWN ? 'Couldn’t check domain details' : 'Not available')}
      </Text>
```

Didn't know if this is an intended behaviour so I thought it was worthy to report it.
",Other
https://github.com/facebook/react/issues/14774,14774,Warning for `act` even when code is wrapped inside it,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,8,2019-02-06T17:21:12Z,2019-04-09T13:16:39Z,2019-02-18T20:59:44Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug

**What is the current behavior?**

`react-test-renderer` emits a warning to wrap code inside `act` even though it is.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Here is a [CodeSandbox](https://codesandbox.io/s/wwopxr137k?expanddevtools=1&previewwindow=tests) with a component using `useState` that toggles a div on/off on a button click. The test finds the button, calls the `onClick` on the props. This would be followed by a snapshot test. However, no matter how I try and wrap the code in `act`, the warning persists.

Make sure to open the tests tab on the right, and to expand the console at the bottom:

![image](https://user-images.githubusercontent.com/433409/52360399-ac50bf00-2a1a-11e9-9cf1-ba34b642102f.png)


**What is the expected behavior?**

There should be no warning.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react@16.8
react-dom@16.8
react-test-renderer@16.8
jest@24.1.0

This worked fine with react*@16.7.0-alpha.2, snapshot and all.",Support
https://github.com/facebook/react/issues/14782,14782,useImperativeHandle behaves as if inputs are [] by default,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,15,2019-02-07T00:43:31Z,2019-02-14T19:25:58Z,2019-02-11T18:42:28Z,NONE,completed,,"useImperativeHandle have bug in 16.8.1 if you want to access any state will get the initial state not current state but in 16.8.0-alpha.1 it work good 

You can see here https://codesandbox.io/s/xjl8znwpz open console when you change input value will get the currently value in console but if you clicked button get value from ref will get initial value (e)

If you try same here https://codesandbox.io/s/qxkll6po0j with 16.8.0-alpha.1 when clicked button get currently value
",Bug
https://github.com/facebook/react/issues/14789,14789,Inconsistent state behaviour on render method,[],closed,FALSE,,2,2019-02-07T20:05:05Z,2019-02-08T16:26:44Z,2019-02-08T16:26:44Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Possible bug.

**What is the current behavior?**

I am attempting to ""lift state up"", by taking a string from a component and passing it to the parent component. 
This is done by a function fired on the onSubmit event on a form in the child.
The value gets passed using the child's props to the parent, and then to the parent's state using this.setState().
The problem is that the state's property that I just updated is initially an array containing the string I pushed, which is OK, but then, on the parent's render() method, when I attempt to get this.state.nameOfTheArray, I get its length instead. I have reproduced the issue on a very minimal JSfiddle which I'll link below. By clicking the button you can view the issue in the console.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/degun/wbcv3zq1/2/

**What is the expected behavior?**

In the render() method I should get the new array with the passed value.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I am using React 16.8.0. I tested the code on Firefox 65 and Chrome 71.0.3578.98 (Official Build) (64-bit) on a machine using Windows 10 64-bit.
",Other
https://github.com/facebook/react/issues/14796,14796,"Under what circumstances, unstable_shouldYield will return true？","[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-02-08T13:56:21Z,2019-02-10T01:12:32Z,2019-02-10T00:44:18Z,NONE,completed,,"In Scheduler.js, 
```
function unstable_shouldYield() {
  return (
    !currentDidTimeout &&
    ((firstCallbackNode !== null &&
      firstCallbackNode.expirationTime < currentExpirationTime) ||
      shouldYieldToHost())
  );
}
```
unstable_shouldYield() return true when currentDidTimeout is false and shouldYieldToHost() return true, but why?
```
shouldYieldToHost = function() {
  return frameDeadline <= getCurrentTime();
};
```
shouldYieldToHost() return true means there's no time left in this idle period
currentDidTimeout is false means the schedule is not timeout
what relationship between them, why does unstable_shouldYield() depend on them?
",Support
https://github.com/facebook/react/issues/14811,14811,unmount an empty component is breaking with ReactDOM portals,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,21,2019-02-10T11:11:20Z,2020-10-22T03:27:16Z,2019-02-11T18:37:54Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Bug

**What is the current behavior?** When unmounting a component that has a child being rendered under a different parent (with portals), react is throwing an error

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

https://codesandbox.io/s/73n31lwpjx

**What is the expected behavior?**

Component should unmount normally

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.1
Issue also happens with 16.7.0 (https://codesandbox.io/s/oxmpxmllvy)

The issue is only happening under very strict conditions:
- The component being rendered with ReactDOM Portals (Modal) should not render any HTML
- The parent component (Panel) should render Modal as the first component under <React.Fragment>

Avoiding this is as simple as moving Modal under some other HTML. I'm not entirely sure this is an issue or I'm just doing something wrong with Fragment and portals.

The actual error being thrown is:
`react-dom.development.js:9254 Uncaught DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.`",Bug
https://github.com/facebook/react/issues/14822,14822,XSS is doubly escaping when using SSR and `ReactDOM.hydrate`,[],closed,FALSE,,5,2019-02-11T17:29:05Z,2019-02-12T17:26:12Z,2019-02-12T17:10:06Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
I'd like to preface this by saying I have read all of the existing documentation on XSS and methods to avoid strings being escaped. The behavior here cannot be adequately addressed with the current suggestions.

HTML that is escaped in SSR using `ReactDOMServer.renderToString` are escaped a second time on the client using `ReactDOM.hydrate`. This results in entities like `&` being displayed as `&amp;` after being escaped once on the server and a second time on the client.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
1. Have a component that renders a string containing `&`, such as inside a span or p.
2. Render the page using ReactDOMServer in node.js, and then use `ReactDOM.hydrate` on the client. Do NOT do anything that will trigger a re-render of the page.
3. See that the ampersand has been doubly escaped and appears to the user like `&amp;`.

Difficult to set up a live example with SSR. I am happy to send a private link to a live site that is experiencing the issue.

**What is the expected behavior?**
Ideally I would expect the `ReactDOM.hydrate` method to detect when entities like `&` are already escape and not do it again.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.7.0
OS: OSX Chrome
",Other
https://github.com/facebook/react/issues/14835,14835,Pass dependencies to `useMemo` callback as arguments,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-02-12T14:02:43Z,2019-02-12T18:23:55Z,2019-02-12T18:16:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

The `useMemo` factory function does not receive any arguments.

**What is the desired behavior?**

The `useMemo` factory function would receive the dependencies as arguments.

**Why?**

This would allow more compact syntax for memoizing components because of implicit returns and desctructuring. This came to mind after experiencing some of the issues in #14110. There may be other potential use cases too 

**Example of current behavior**

```jsx
const Avatar = () => {
  const [src] = useSomeGlobalState([
    state => state.user.avatar.src
  ]);
  return useMemo(() => <img src={src} />, [src])
}
```

**Example of proposed behavior**

```jsx
const Avatar = () => 
  useMemo(
    (src) => <img src={src} />,
    useSomeGlobalState([state => state.user.avatar.src])
  );
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.8.1
",Other
https://github.com/facebook/react/issues/14843,14843,Warning: Did not expect server HTML to contain a <ul> in <div>,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710332294,""node_id"":""MDU6TGFiZWw3MTAzMzIyOTQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering"",""name"":""Component: Server Rendering"",""color"":""d4c5f9"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,12,2019-02-14T01:34:31Z,2020-01-16T17:05:34Z,2020-01-16T17:05:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
I'm using Server Side rendering with `react-loadable` and my home page see this in the browser.  The warning test to be a bit different on other pages, but still seems to happen generally.  My app is using Grommet in case that matters...

When the page renders I see the following in the console:
```
Warning: Did not expect server HTML to contain a <ul> in <div>.

warningWithoutStack | @ | react-dom.development.js:506
-- | -- | --
  | warnForDeletedHydratableElement | @ | react-dom.development.js:8254
  | didNotHydrateInstance | @ | react-dom.development.js:8960
  | deleteHydratableInstance | @ | react-dom.development.js:13964
  | popHydrationState | @ | react-dom.development.js:14183
  | completeWork | @ | react-dom.development.js:15801
  | completeUnitOfWork | @ | react-dom.development.js:17981
  | performUnitOfWork | @ | react-dom.development.js:18179
  | workLoop | @ | react-dom.development.js:18191
  | renderRoot | @ | react-dom.development.js:18277
  | performWorkOnRoot | @ | react-dom.development.js:19166
  | performWork | @ | react-dom.development.js:19078
  | performSyncWork | @ | react-dom.development.js:19052
  | requestWork | @ | react-dom.development.js:18921
  | scheduleWork | @ | react-dom.development.js:18730
  | scheduleRootUpdate | @ | react-dom.development.js:19398
  | updateContainerAtExpirationTime | @ | react-dom.development.js:19426
  | updateContainer | @ | react-dom.development.js:19483
  | ReactRoot.render | @ | react-dom.development.js:19775
  | (anonymous) | @ | react-dom.development.js:19915
  | unbatchedUpdates | @ | react-dom.development.js:19281
  | legacyRenderSubtreeIntoContainer | @ | react-dom.development.js:19911
  | hydrate | @ | react-dom.development.js:19969
  | (anonymous) | @ | client.js:52
  | Promise.then (async) |   |  
  | renderApp | @ | client.js:51
  | (anonymous) | @ | client.js:60
  | (anonymous) | @ | client.js:90
  | ./src/client.js | @ | main.js:10934
  | __webpack_require__ | @ | main.js:767
  | fn | @ | main.js:130
  | (anonymous) | @ | client.js:4
  | 0 | @ | main.js:11473
  | __webpack_require__ | @ | main.js:767
  | (anonymous) | @ | main.js:902
  | (anonymous) | @ | main.js:905
```
The html captured on the server was as follows:
```
<div lang=""en-US"" class=""grommet grommetux-app grommetux-app--centered""><div class=""grommetux-header__container grommetux-header__container--fixed grommetux-header__container--fill""><div class=""grommetux-header__mirror""></div><div class=""grommetux-header__wrapper grommetux-header__wrapper--small""><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-none grommetux-box--flex-off""><header class=""grommetux-box grommetux-box--direction-row grommetux-box--align-center grommetux-box--pad-horizontal-none grommetux-box--pad-vertical-none grommetux-box--pad-between-small grommetux-header grommetux-header--small header""><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-none grommetux-menu grommetux-menu--column grommetux-menu--small grommetux-menu--controlled grommetux-menu__control""><button type=""button"" class=""grommetux-button grommetux-button--plain"" aria-label=""Open  Menu""><span class=""grommetux-button__icon""><svg version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" class=""grommetux-control-icon grommetux-control-icon-menu grommetux-control-icon--responsive"" aria-label=""menu""><path fill=""none"" stroke=""#000"" stroke-width=""2"" d=""M2,19 L22,19 M2,5 L22,5 M2,12 L22,12""></path></svg></span></button></div><div class=""grommetux-box grommetux-box--direction-row grommetux-box--justify-start grommetux-box--align-center grommetux-box--flex-grow grommetux-box--pad-none grommetux-box--size-small grommetux-box--size grommetux-title grommetux-title--responsive grommetux-title--truncate""><a href=""/"" class=""grommetux-anchor link link-white"">Zipongo Admin Tool</a></div></header></div></div></div><div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-small""><ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul></div><span style=""display:none""></span><div class=""grommetux-app__announcer"" aria-live=""polite""></div></div>
```
 I went in and added some debug logging in `warnForDeletedHydratableElement()` to output the `parentNode` and `child`, as follows:

```
parentNode:
<div class=""grommetux-box grommetux-box--direction-column grommetux-box--responsive grommetux-box--pad-small""><ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul></div>
```
```
child:
<ul class=""home-container small-block-grid-1 medium-block-grid-3 large-block-grid-5 text-center""><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cafes"">Cafe home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/cms"">CMS home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/daily-emails"">Daily email home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/easy-meals"">Easy meals</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/foodscripts/plan"">Foodscripts plan</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/household-invites/custom-text"">Household custom text</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/mobile-push"">Mobile push</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/partner-events"">Partner events</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/orderwell-data"">Orderwell data</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/tools"">Tools home</a></li><li class=""home-item-container""><a class=""home-item link link-white bold"" href=""/user"">User home</a></li></ul>
```
It was then I noticed something suspicious... in the browser inspector `parentNode` had a little bit different HTML than the server because the browser added `::before` and `::after` pseudo elements into the DOM of the `ul` as is noticeable in a screenshot I attached below.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I'm not in a place to be able to boil this down to a simple test case at this time, but at least it would be interesting to know if these pseudo elements in the DOM would break the hydration code?

**What is the expected behavior?**
That my hydrate doesn't fail because of these pseudo elements (it thats what it is)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Not sure, but it definitely happened with 16.7.0 and continues with 16.8.1
",Other
https://github.com/facebook/react/issues/14856,14856,Chrome 73 breaks wheel events,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,39,2019-02-14T20:28:58Z,2021-09-21T09:39:31Z,2021-03-24T18:18:17Z,NONE,completed,,"Similar to #8968, but for the `wheel` and `mousewheel` events. They are now passive by default for root elements in Chrome 73 (currently beta) which means React apps that have custom scrolling/zooming behaviors will run into issues.

The quick fix may be to manually add event listeners with `{passive: false}` but has the React team considered if this should be configurable for the React event handler?

Blog post from the Chrome team here: https://developers.google.com/web/updates/2019/02/scrolling-intervention",Bug
https://github.com/facebook/react/issues/14858,14858,`react-dom/server.renderStaticMarkup()` returns empty string server-side,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,7,2019-02-15T01:07:34Z,2019-02-16T14:30:53Z,2019-02-16T14:30:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

**bug**

**What is the current behavior?**

I'm trying to extract the initial HTML from react code on the server side. To do this, I'm using the official react-dom/server library function `renderToStaticMarkup()` referenced here: https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup

I'm reading a react source file, transpiling the JSX and ES6 syntax to CommonJS using Babel and then parsing the evaluated CommonJS to `renderToStaticMarkup()`.

## React code:
```jsx
import React from 'react';

class Test extends React.Component {
    render() {
        return <p>Hello World!</p>;
    }
}

export default Test;
```

## Server-side code:
```javascript
const { renderToStaticMarkup } = require( 'react-dom/server');
const Babel = require( '@babel/core' );
const Fsp = require( 'fs' ).promises;

(async () => {
    let fileContent = await Fsp.readFile( 'test.js', 'utf-8' );

    let code = Babel.transform( 
        fileContent, 
        { 
            presets: [ '@babel/preset-env', '@babel/preset-react' ],
            comments: false,
            minified: true
        }).code;

    let result = renderToStaticMarkup( code );

    console.log( result );
})();
```

## package.json:
```json
{
  ""dependencies"": {
    ""@babel/core"": ""^7.3.3"",
    ""@babel/preset-env"": ""^7.3.1"",
    ""@babel/preset-react"": ""^7.0.0"",
    ""react"": ""^16.8.2"",
    ""react-dom"": ""^16.8.2""
  }
}
```

**What is the output?**
`&quot;use strict&quot;;Object.defineProperty(exports,&quot;__esModule&quot;,{value:true});exports.default=void 0;var _re act=_interopRequireDefault(require(""react""));function...`

**What is the expected output?**
`<p>Hello World!</p>`


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
```json
""react"": ""^16.8.2"",
""react-dom"": ""^16.8.2""
```",Other
https://github.com/facebook/react/issues/14861,14861,Cannot type Chinese  in `<input />`  under controlled mode + ReactDom 16.8.2,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,13,2019-02-15T13:23:25Z,2019-02-21T18:31:53Z,2019-02-21T18:31:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Cannot type Chinese  in `<input />`  under controlled mode when using react-dom 16.8.2 via CND

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://jsfiddle.net/youluna/egz9Lvrp/36/
1. Switch IME(input method editor) into Chinese
2. try type any letters, you can only get English letters but not Chinese characters
![image](https://user-images.githubusercontent.com/10049465/52859396-8be5da80-3167-11e9-96ac-95caa4e7f5a7.png)

**What is the expected behavior?**
Can type Chinese characters
![image](https://user-images.githubusercontent.com/10049465/52859361-740e5680-3167-11e9-8a7c-6e28d7650b4e.png)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Not worked in react-dom 16.8.2 
But worked well in react-dom 16.8.1 

related https://github.com/alibaba-fusion/next/issues/324

update:
It's wired that use React as a <script> tag from a CDN doesn't work, but as a react package on npm worked well. Both are version 16.8.2
1. CDN: https://jsfiddle.net/youluna/6o3rhg7u/1/
2. npm: https://codesandbox.io/s/xp15m8woww",Bug
https://github.com/facebook/react/issues/14866,14866,Unexpected additional render using Hooks,[],closed,FALSE,,3,2019-02-15T20:53:45Z,2019-02-16T14:26:36Z,2019-02-16T14:26:36Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Component is rendered one more additional time than expected.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Demo here:

https://codesandbox.io/s/v380wrp205


**What is the expected behavior?**
Note the console.log on line 6 in the demo. The behavior I expected would be a maximum of two logs:

re-rendered 0
re-rendered 1

The first log is for the initial render and the second log is for the re-render when the button is clicked. Any additional clicks would be ignored because it bails out of updates if the value between renders are the same (according to https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update).

Here is the actual behavior:

re-rendered 0
re-rendered 1
re-rendered 1

Clicking the button again after the first click causes another re-render, but why? The value hasn't changed since the previous render.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8",Support
https://github.com/facebook/react/issues/14872,14872,React Dev Tools: useReducer content isn't displayed,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2019-02-17T01:23:48Z,2019-02-17T15:23:31Z,2019-02-17T15:23:31Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
[Crosspost at react-devtools](https://github.com/facebook/react-devtools/issues/1305)

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Using `useReducer` with an object as state doesn't show the content of the object and is un-expandable.

<img width=""669"" alt=""2019-02-16_20-05-13"" src=""https://user-images.githubusercontent.com/438688/52907061-a089a780-3227-11e9-95e6-fb2edc6e8fa5.png"">

Using a state with a string will show.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://q8yzo2z1mj.codesandbox.io/

**What is the expected behavior?**
Expect the contents be expandable as with objects and arrays from traditional state.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: 16.8.2
DevTools: 3.6.0
Chrome: 72.0.3626.109 (Official Build) (64-bit)",Other
https://github.com/facebook/react/issues/14877,14877,useState re-renders the function with a timeout,[],closed,FALSE,,2,2019-02-18T11:59:33Z,2019-03-22T16:56:09Z,2019-02-18T12:54:10Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
useState re-renders the function with a short timeout

I have made a very small and simple TODO component with both React Class and React Function component. I wrote a few test to each (NOTE: tests are exactly the same for the class component and function component)
When running the tests for the function component it looks like that the render of the function is called with a short timeout(The function component uses useState in it)
A working example can be found in this repo: https://github.com/KirilVelichkov/react-hooks-bug
To see the bug go to *todo.test.js* and un-comment line 62. To see how i got it fixed un-comment the below lines.

This is reproducible on both Windows 10 and macOS High Sierra 10.13.6

Node version - 11.0.0
NPM version - 6.4.1",Support
https://github.com/facebook/react/issues/14878,14878,Simple memo components being updated with new set of props during context change,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,3,2019-02-18T13:08:58Z,2022-04-28T15:01:56Z,2022-04-28T15:01:56Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

Simple memo components receive new props during context change if their parent got rerendered.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/jp21pwzrv9

**What is the expected behavior?**

Conceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Current React's master ( 0e67969cb1ad8c27a72294662e68fa5d7c2c9783 ) & current latest release 16.8.2

I've already written a failing test for this - https://github.com/facebook/react/pull/14876 . Would love to work on fixing this but as mentioned in this PR, I would require some guidance on how this should get fixed properly.
",Bug
https://github.com/facebook/react/issues/14887,14887,Hooks not available in some parts of my component tree,[],closed,FALSE,,2,2019-02-19T13:36:37Z,2019-02-20T06:59:47Z,2019-02-19T14:29:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
The use of useContext() at a certain level up in the component tree seems to be broken somehow. I'm able to do the approach in other components, but for my main <App> component, the context values are not available. The app is based on create-react-app, using Typescript.

**NOTE: To toggle the functionality of the menu, please simulate screen sizes of a mobile device**
Please note the comments on useContext not working properly in App.tsx, and how I demonstrate the a working context in Header.tsx.
Here's the working codesandbox: https://codesandbox.io/s/4rl53m496x

**What is the expected behavior?**
Expect to be able to use the hook in App.tsx, the same way it's used in Header.tsx

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
```
    ""typescript"": ""^3.3.3""
    ""react"": ""^16.8.2"",
    ""react-dom"": ""^16.8.2"",
    ""react-scripts"": ""^2.1.5"",
    ""@types/react"": ""16.7.18"",
    ""@types/react-dom"": ""16.0.11"",
```


",Support
https://github.com/facebook/react/issues/14895,14895,Cannot is possible use the same component with React.lazy in multiple entry,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-02-20T12:29:47Z,2019-02-20T17:51:43Z,2019-02-20T17:51:43Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
🐛 Bug Report

**What is the current behavior?**
I have multiple entries on my webpack, like bellow:
```
...
entry: {
  page1: 'javascripts/page.one',
  page2: 'javascript/page.two'
}
...
```

If I used:

```
const Component1 = React.lazy(()=> import('components/Component1'));
```

only on entry **page1** work fine. But if I try use in entries **page1 and page2**, work on development mode but when I compiled to production trow a error:

```

TypeError: n.e is not a function
    at react-dom.production.min.js:132
    at ha (react-dom.production.min.js:170)
    at qa (react-dom.production.min.js:204)
    at $a (react-dom.production.min.js:205)
    at Ii (react-dom.production.min.js:220)
    at Mi (react-dom.production.min.js:219)
    at Di (react-dom.production.min.js:216)
    at ei (react-dom.production.min.js:214)
    at Ui (react-dom.production.min.js:233)

```
**What is the expected behavior?**
I would like to get use React.lazy with the same component in multiples entries

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""16.6.1""
""react-dom"": ""16.6.1""

To test I updated to 16.8.0 and continue happening

I'm sure if is a problem with React or Webpack, if someone have some idea, pls help me
",Other
https://github.com/facebook/react/issues/14904,14904,controlled input cursor jumps to end (again),"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,FALSE,,15,2019-02-20T21:56:52Z,2021-07-11T09:39:56Z,2019-02-21T17:20:29Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

when typing in a controlled input, the cursor always jumps to the end. This was an old issue that seems to have resurfaced.

[this code pen](https://codepen.io/gaearon/pen/VmmPgp?editors=0010) used in the docs [here](https://reactjs.org/docs/forms.html#controlled-components)  has the problem in all browsers as far as I have been able to test.

**What is the expected behavior?**

because we are using the state to update the component as soon as it's changed, the input element should be able to keep the cursor in the same place.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I'm at latest (16.8.2) and I tested on Chrome, FireFox, and Edge on Windows

as far as I know, this was working at some point, though I don't know how long ago. possibly even before ""Fiber""

",Bug
https://github.com/facebook/react/issues/14905,14905,Elements as Callable Objects,[],closed,FALSE,,4,2019-02-20T22:24:23Z,2019-02-21T14:44:38Z,2019-02-21T14:35:31Z,NONE,completed,,"I want to create a lib that allows a function `strand` to let users create react elements with either of the following:

```js
strand('div') // equal to `React.createElement('div', null)`
strand('div')('child text') // equal to `React.createElement('div', null, 'child text')`
```

To achieve this, I tried the following:

```js
const strand = tag => Object.assign(
  (...children) => React.createElement(tag, null, ...children),
  React.createElement(tag, null)
)
```

This creates a callable element object (or should).

If––as you're reading this issue––you're wondering ""this is an obnoxious, costly implementation"", don't worry, it'll get compiled down... this is just a runtime/in-dev version of my project. Very hacky... but I'd still like to get it working.

Here's the problem I run into:

`Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.`

^ I'm guessing that the internals of React are checking to see if it's a function... instead of only checking the $$typeof symbol prop that gets copied over via the `Object.assign` call? Is there any way around this? I'd really like to see this come to life!

Thank you for giving this issue a read, & hopefully there's a solution :)

Kind regards,

Harry",Other
https://github.com/facebook/react/issues/14915,14915,Images dont render,[],closed,FALSE,,2,2019-02-21T17:12:33Z,2019-02-21T17:31:11Z,2019-02-21T17:26:11Z,NONE,completed,,"Hi, i have a bug,
Basically this is my code ( excluding import react etc)
 `<img  src=""./img/aa.png"" alt="""" />`

And the image doesnt get rendered. In browser, react dev tools it show the image is 1366x0px.
There are no errors in the console.
I tried making new crate-react-app, udsing different images, using <image> instead of <img> and none of these worked...

I apologise for my english",Support
https://github.com/facebook/react/issues/14920,14920,[ESLint] Feedback for 'exhaustive-deps' lint rule,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,TRUE,,112,2019-02-21T19:03:49Z,2022-05-04T17:12:17Z,2019-03-07T20:19:08Z,MEMBER,completed,gaearon,"## Common Answers

💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡

**We analyzed the comments on this post to provide some guidance: https://github.com/facebook/react/issues/14920#issuecomment-471070149.**

💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡

----

## What is this

This is a new ESLint rule that verifies the list of dependencies for Hooks like `useEffect` and similar, protecting against the stale closure pitfalls. For most cases it has an autofix. We'll add more documentation over the next weeks.

![autofix demo](https://user-images.githubusercontent.com/810438/54288712-d3615a00-459f-11e9-82a6-904442995d2f.gif)


## Installation

```
yarn add eslint-plugin-react-hooks@next
# or
npm install eslint-plugin-react-hooks@next
```

ESLint config:

```js
{
  ""plugins"": [""react-hooks""],
  // ...
  ""rules"": {
    ""react-hooks/rules-of-hooks"": 'error',
    ""react-hooks/exhaustive-deps"": 'warn' // <--- THIS IS THE NEW RULE
  }
}
```

Simple test case to verify the rule works:

```js
function Foo(props) {
  useEffect(() => {
    console.log(props.name);
  }, []); // <-- should error and offer autofix to [props.name]
}
``` 
## The lint rule complains but my code is fine!

**If this new `react-hooks/exhaustive-deps` lint rule fires for you but you think your code is correct**, please post in this issue.

----



# BEFORE YOU POST A COMMENT

**Please** include these three things:

1. A CodeSandbox demonstrating a **minimal code example** that still expresses your intent (not ""foo bar"" but **actual UI pattern** you're implementing).
2. An explanation of the **steps** a user does and what you expect to see on the screen.
3. An explanation of the **intended API** of your Hook/component.

![please](https://media1.giphy.com/media/14cNSEhRyTX8Ag/giphy.gif?cid=3640f6095c700c9b774a644a51e2089e)

## But my case is simple, I don't want to include those things!

It might be simple to you — but it’s not at all simple to us. **If your comment doesn't include either of them (e.g. no CodeSandbox link), we will hide your comment** because it’s very hard to track the discussion otherwise. Thank you for respecting everyone’s time by including them.

The end goal of this thread is to find common scenarios and transform them into better docs and warnings. This can only happen when enough details are available. Drive-by comments with incomplete code snippets significantly drive down the quality of the discussion — to the point that it's not worth it.",Feature
https://github.com/facebook/react/issues/14927,14927,useLayoutEffect in ssr,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,61,2019-02-22T10:52:29Z,2022-07-27T14:52:36Z,2020-01-09T19:29:26Z,NONE,completed,,"Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?

https://codesandbox.io/s/oo47nj9mk9

_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",Support
https://github.com/facebook/react/issues/14942,14942,"[eslint-plugin-react-hooks] invariants, conditional calls and exhaustive deps","[{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,10,2019-02-24T10:18:48Z,2020-01-17T09:59:20Z,2020-01-17T09:59:20Z,COLLABORATOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
Not sure. Either feature to allow invariant conditional calls to hooks or bug in exhaustive deps in which case #14920 might be more appropriate.

**What is the current behavior?**
```js
function makeStyles(stylesObjectOrCreator) {
  const listenToTheme = typeof stylesObjectOrCreator === ""function"";
  const noopTheme = {};

  return function useStyles() {
    const theme = listenToTheme ? React.useContext(ThemeContext) : noopTheme;
    //                           ^^^ [eslint] [...] is called conditionally

    const styles = React.useMemo(
      () => {
        if (listenToTheme) {
          console.log(""listen"");
          return stylesObjectOrCreator(theme);
        }
        console.log(""dont listen"");
        return stylesObjectOrCreator;
      },
      [theme]
    );

    const classNames = useStylesheet(styles);
    return classNames;
  };
}
```

Linter reports that `React.useContext` is called conditionally but not that `listenToTheme` is missing in the dependency list.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/o91zl0z499

**What is the expected behavior?**

It would expect one of these things:
1. `rules-of-hooks` recognizes that `listenToTheme` is invariant in the hook. Invariant conditions do not trigger `called conditionally`.
2. `exhaustive-deps` reports that `listenToTheme` is missing

It's IMO more dangerous to add an `eslint-disable-next-line` to invariant conditional calls because it might be missed if someone changes the condition so that it no longer is invariant.

It only occurs to me now that you don't consider it invariant because one might use it in the following way:
```js
function VariantComponent({ listen }) {
  // `listen` controles React.useContext call :(
  const classes = makeStyles(listen ? () => ({}) : {})();
}
```

Still doesn't explain the missing `exhaustive-deps` warning.

Are you open to a rule exception via configuration like `allow-invariant-conditionals`? Users would need to add additional rules so that hook factories are not called inside components.

Ok talking to myself now: Even if everything stays the same and I remove the conditional call then users can still break their app by calling hook factories inside components:
```js
const makeState = (initial) => () => React.useState(initial);
function Component() {
  const usedState = Math.random() < .5 ? makeState(5)() : null;
  // conditional hook call that's undetected
}
```

",Other
https://github.com/facebook/react/issues/14946,14946,Feature request: `useShouldUpdate` hook,[],closed,FALSE,,5,2019-02-24T22:13:30Z,2019-03-01T15:36:24Z,2019-03-01T15:08:53Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Request a feature

It is currently impossible to let React know that the output of a **functional component** is not affected by the current change. I think that it would be great to have a hook for enabling this capability. In other words: having the SCU functionality in functional components through a hook.

I'm aware of the existence of `React.memo` and I know that it is possible to accomplish the same thing by splitting the logic in 2 different functional components... as long as we enhance the ""base"" component with `React.memo`. However, I still think that the hook that I'm suggesting would be a pretty nice addition.

I guess that it's a good idea to show an example of a real case where this hook would be helpful. So, here we go:

I don't normally use the official react-redux bindings. Instead, I have my own version of the `connect` HOC which has a more limited (and slightly different) API, that better suits my needs. This makes my version a bit more performant and a lot lighter. Regardless of whether it is a good idea not to use the official react-redux bindings, the following example illustrates the benefit of having the hook that I'm suggesting.

This is the current implementation of my custom ""connect"" HOC:

```js
const emptyObj = {};                                                           
const alwaysEmpty = () => emptyObj;                                            
                                                                               
export default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      
  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      
  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     
                                                                               
  return BaseComponent => {                                                    
    const MBaseComponent = memo(BaseComponent);                                
                                                                               
    return props => {                                                          
      const dependantProps = dependsOnProps ? props : emptyObj;                
                                                                               
      const {state, dispatch} = useContext(context);                           
      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [
        state,                                                                 
        dependantProps,                                                        
      ]);                                                                      
      const actionProps = useMemo(() => {                                      
        const res = {};                                                        
        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        
          res[name] = (...args) => dispatch(aCreator(...args));                
        });                                                                    
        return res;                                                            
      }, [dispatch]);                                                          
                                                                               
      return useMemo(() => {                                                   
        const finalProps = mapper                                              
          ? mapper(stateProps, actionProps, props)                             
          : {...props, ...stateProps, ...actionProps};                         
        return <MBaseComponent {...finalProps} />;                             
      }, [actionProps, props, stateProps]);                                    
    };                                                                         
  };                                                                           
};                                                                             
```

It works great (for me). However, I would much rather to be able to implement it like this:

```js
const emptyObj = {};                                                           
const alwaysEmpty = () => emptyObj;                                            
                                                                               
export default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      
  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      
  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     
                                                                               
  return BaseComponent => {                                                    
    const componentFn = BaseComponent.prototype                                
      ? p => <BaseComponent {...p} />                                          
      : p => BaseComponent(p);                                                 
                                                                               
    return props => {                                                          
      const dependantProps = dependsOnProps ? props : emptyObj;                
                                                                               
      const {state, dispatch} = useContext(context);                           
      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [
        state,                                                                 
        dependantProps,                                                        
      ]);                                                                      
      const actionProps = useMemo(() => {                                      
        const res = {};                                                        
        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        
          res[name] = (...args) => dispatch(aCreator(...args));                
        });                                                                    
        return res;                                                            
      }, [dispatch]);                                                          
                                                                               
      useShouldUpdate([actionProps, props, stateProps]);                       
                                                                               
      const finalProps = mapper                                                
        ? mapper(stateProps, actionProps, props)                               
        : {...props, ...stateProps, ...actionProps};                           
                                                                               
      return componentFn(finalProps);                                          
    };                                                                         
  };                                                                           
};                                                                             
```

How do you feel about this suggestion? Too weird? 😄 

Thanks,

Josep",Support
https://github.com/facebook/react/issues/14956,14956,"Element.createShadowRoot is deprecated and will be removed in M73, around March 2019. Please use Element.attachShadow instead",[],closed,FALSE,,3,2019-02-26T03:21:06Z,2019-11-10T03:58:41Z,2019-02-26T04:47:25Z,NONE,completed,,"include.preload.js:1 [Deprecation] Element.createShadowRoot is deprecated and will be removed in M73, around March 2019. Please use Element.attachShadow instead. See https://www.chromestatus.com/features/4507242028072960 for more details.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/14973,14973,hook useEffect cannot wok width HMR,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-02-28T08:36:17Z,2019-03-20T13:13:47Z,2019-03-20T13:13:47Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
if i use webpack's HMR and hook except useState that will has an error,i have tested if use class have no this bug.
![image](https://user-images.githubusercontent.com/22429673/53551053-3f40cd00-3b73-11e9-96ab-1b3e54f1bae7.png)


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
function PageContainer(props) {
	const menu = [{
		url: '/test', title: 'test', index: '0', icon: ''
	},{
		url: '/test1', title: 'test1', index: '1', icon: ''
	}];

	const [menuIndex, setMenuIndex] = useState('0');
	const [openKey, setOpenKey] = useState(null);
	const goMenu = (url, index) => {
		return () => {
			history.push(url)
			setMenuIndex(index)
		}
	}

	const setRoute = (url,list) => {
    list.map((item) =>{
      if(url.indexOf(item.url) > -1) {
				setMenuIndex(item.index)
        if(item.openKey) setOpenKey(item.openKey)
      }else if(item.children) {
        setRoute(url,item.children)
      }
    })
  }

  useEffect(()=> {
		setRoute(window.location.pathname, menu)
  })
	return (
		<Layout style={{minHeight: '100vh'}}>
			<Header></Header>
				<Layout>
          <Sider>
            <Menu selectedKeys = {[menuIndex]} defaultSelectedKeys={[menuIndex]} defaultOpenKeys={[openKey]}>
              {
                menu.map((item)=>{
									return <Menu.Item key={item.index} onClick={goMenu(item.url,item.index)}>
                    <span className='pl10'>{item.title} </span>
                  </Menu.Item>    
                })
              }
            </Menu>
          </Sider>
        <Content>{props.children}</Content>
      </Layout>
    </Layout>
  );
}

**
package.json
""start"": ""webpack-dev-server --hot --config webpack.dev.conf.js""
```

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
using 16.8.3
",Support
https://github.com/facebook/react/issues/14975,14975,componentDidUpdate (and componentDidMount) before the updates ref,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,8,2019-02-28T11:44:03Z,2020-04-17T01:46:21Z,2020-04-17T01:46:21Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
componentDidUpdate (and componentDidMount) before the updates ref

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codepen.io/anon/pen/eXpENK?editors=0011

**What is the expected behavior?**
componentDidUpdate  (and componentDidMount) after ref update

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
browser. last version",Other
https://github.com/facebook/react/issues/15014,15014,DOM tree normalization causes React to enter an irrecoverable error state,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-03-05T04:13:53Z,2019-08-24T19:08:48Z,2019-03-05T22:52:40Z,NONE,completed,,"Reproduction:
1) Open any React site that has a variable adjacent to other text
2) Type document.body.normalize() into javascript console
3) React enters an irrecoverable error state",Other
https://github.com/facebook/react/issues/15015,15015,Question about React.Children,[],closed,FALSE,,4,2019-03-05T04:41:36Z,2019-03-05T09:04:33Z,2019-03-05T07:34:39Z,NONE,completed,,"Why use `React.Children` to manipulate children? why not `children.map`, `children.forEach` and so on?",Support
https://github.com/facebook/react/issues/15017,15017,Use createRefs API for variable amount of elements,[],closed,FALSE,,1,2019-03-05T14:45:46Z,2019-03-05T14:55:51Z,2019-03-05T14:55:51Z,NONE,completed,,"Hi guys,

I want to report an improvement or a missing documented guidance (if there is already a solution to this problem). I couldn't find a solution so far by looking in the docs or other issues. The only related link to this problem might be this one where the solution is a hacky workaround which does not work for dynamic defined arrays: https://dev.to/ajsharp/-an-array-of-react-refs-pnf

*The actual problem:*
Before the new `createRef` API it was possible to create a map with the shape `{[id]: ref}`. In my render function I was able to to spawn a list of elements and store their reference in this map. For the new way of defining references I need to generate the ""storage"" for references in advance (in the constructor). Since my elements are defined and changed by props I would need to regenerate this collection of references each time before they are actually rendered. Since ""componentWillUpdate"" is deprecated I don't have a chance to recreate those references and link them in my render functions.

For more clarification on my problem here is a short example how this could work right now with componentWillUpdate: https://jsfiddle.net/zqxw6Lg4/3/

I need those references because I want to scroll specific components in this list afterwards.

Versions:
- react: ""16.6.3""
- react-dom: ""16.6.3""


Greetings,
Thomas
",Support
https://github.com/facebook/react/issues/15043,15043,State is mutable from function called inside of componentDidUpdate,[],closed,FALSE,,3,2019-03-06T22:14:22Z,2019-03-07T14:58:54Z,2019-03-06T22:55:28Z,NONE,completed,,"**Do you want to request a feature or report a bug?**
Bug

When calling a function from inside of componentDidUpdate(), the state becomes mutable and is changed without calling this.setState().  

Note: It is only mutable when the state is an object, and not a primitive data type. 

**Example code to reproduce:**

```
class App extends Component {
  constructor(props ) {
    super(props);
    this.state = {
      clicked: {key: false}
    };
  };

  componentDidUpdate(prevProps, prevState){

    if(prevState.clicked!== this.state.clicked){
      this.updateState();
    };

    //meow is printed!! 
    console.log(this.state.clicked)
  };

  updateState = () => {
    let myObj= this.state.clicked;
    if(myObj!== null){
      myObj.key = 'meow'
    };
  };

  render() {
    return (
      <div className=""App"">
        <header className=""App-header"">
          <button onClick={() => this.setState({clicked: {key: true}})}>Set to true </button>
          <button onClick={() => this.setState({clicked: {key: false}})}>Set to false</button>
        </header>
      </div>
    );
  }
}

export default App;
```

React Version:  16.2.0 - 16.8.4 (Tested in both Typescript and Javascript)
Browser: Chrome (72.03)
",Support
https://github.com/facebook/react/issues/15054,15054,useImperativeHandle callback never called (when rendering w/ enzyme),"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,7,2019-03-07T19:34:32Z,2019-09-04T09:48:33Z,2019-09-04T09:48:33Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**

I have the code:

```
function Form(props, ref) {

  React.useImperativeHandle(ref, () => {
    debugger;
    return {
      setErrors: () => {},
    };
  });
}

export default React.forwardRef(Form);
```

When I use the component, the callback passed to `useImperativeHandle` is never called. (The debugger statement is never hit).

The code that I have using the component is:

```
import {mount} from 'enzyme';

describe('Form component', () => {
  test('exposes a ref', async () => {
    let formRef;
    mount(<Form ref={ref => (formRef = ref)}>{() => <span>test</span>}</Form>);
    await pause(500); // this is just a setTimeout to give time for the hooks to run.
    expect(formRef.setErrors).toBeDefined();
  });
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/v8rqy75mn5

**What is the expected behavior?**

Callback should be called and returned value should be used as the ref.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
    ""react"": ""16.8.0-alpha.1"",
    ""react-dom"": ""16.8.0-alpha.1"",
    ""enzyme"": ""3.8.0"",
    ""enzyme-adapter-react-16"": ""1.8.0"",
```
",Support
https://github.com/facebook/react/issues/15056,15056,Controlled contentEditable element contents not updated when state changes,[],closed,FALSE,,0,2019-03-07T20:50:31Z,2019-03-07T20:55:03Z,2019-03-07T20:55:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
An element with contentEditable does not update the content when state updates.

Reproduce:
https://codesandbox.io/s/kk421m2jmr
1. Type something in the contentEditable div.
2. Click reset
3. Expected div to contain ""TEXT RESET!""

**Which versions of React
16.8.4",Other
https://github.com/facebook/react/issues/15057,15057,"setState in useEffect causing a ""React state update on an unmounted component"" warning","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,29,2019-03-07T23:17:45Z,2019-07-30T18:41:11Z,2019-07-30T18:41:11Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
The warning is triggered after an intricate sequence of events. I stumbled upon it by accident, assumed it was an error in my code, but then step by step removed everything in my application until I was left with a fairly small bit of code that doesn't seem to be doing anything illegal from the API point of view, yet is triggering a warning.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

https://codesandbox.io/s/q87882qv64

The example is my real application code trimmed down as much as possible to demonstrate the warning. So some of the code might be a bit nonsensical/contrived, but that's because I removed lots of surrounding code leaving only the relevant bits for reproducing the issue.

In other words, there might weird looking uses of useEffect and weird sequencing of things, but that sort of falls out of how I've structured my routes, state, components in the full app, etc.

**What is the expected behavior?**

I would like to know if

a) is this a React bug that I stumbled upon that should be fixed?
b) is this something I'm doing ""wrong"" and how I could fix that in my application (i.e. is this a real memory leak being caused because of the way I structured the code)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.8.4",Bug
https://github.com/facebook/react/issues/15066,15066,What is the react-cache good for?,[],closed,FALSE,,3,2019-03-08T14:16:48Z,2019-03-08T14:51:26Z,2019-03-08T14:18:11Z,NONE,completed,,"At the first sight it seems illogical. I'm glad you're caching like last 500 resources, but _Why_?
The browser itself caches everything anyway - that's why we have so many headers in HTTP.
How does the react-cache help?",Support
https://github.com/facebook/react/issues/15074,15074,React.StrictMode combined with useState causes component to render twice,[],closed,FALSE,,22,2019-03-09T15:57:06Z,2022-04-16T13:41:25Z,2019-03-09T16:25:19Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug (maybe)

**What is the current behavior?**
If wrapped in React.StrictMode and a function component contains a call to `useState`, the function (render) is called twice - even if the state setter is never called.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**
https://codesandbox.io/s/lyw9514j4q
(please see console)

**What is the expected behavior?**
I would expect it to only render once.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.3 in Chrome on macOS Mojave; requires hooks so not tested with previous versions.

This may be related to https://github.com/facebook/react/issues/12961 - but note that nowhere am I setting state (only initializing it).

If this is expected behavior please feel free to close. Thank you!",Support
https://github.com/facebook/react/issues/15084,15084,eslint-plugin-react-hooks useEffect autofix of adding function names causes a lot of infinite loops,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,20,2019-03-11T17:56:48Z,2020-02-17T20:35:55Z,2019-11-15T00:42:13Z,NONE,completed,,"I've read ""My function value is constant"" from https://github.com/facebook/react/issues/14920#issuecomment-471070149.

> There is a problem on the opposite spectrum of this, which is where you get infinite loops (a function value always changes). We catch that in the lint rule now when possible (in the same component) and suggest a fix. But it's tricky if you pass something several levels down.

If you autofix the `useEffect`, would it also be possible to autofix any functions added by wrapping them in a `useCallback` at the same time?

This would greatly improve the user experience.


",Support
https://github.com/facebook/react/issues/15089,15089,Using a fully react state management cons.,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-03-12T11:20:16Z,2019-09-04T09:47:09Z,2019-09-04T09:47:09Z,NONE,completed,,"This is not an issue but rather a question.
I wanted to use React solely for my Global state management and pass the todos through useReducer and useContext and I wonder if this is by any means a right way to go. I was called out by a react coder that this way the components rerender when they aren't supposed to but my element inspection shows only the changed component rerenders. Would please guide me as whether or not I can continue developing this way or have to revert back to Mobx or redux or many other third party state manager libraries. ",Other
https://github.com/facebook/react/issues/15090,15090,react hooks array  not updating,[],closed,FALSE,,1,2019-03-12T11:41:10Z,2019-03-12T11:48:37Z,2019-03-12T11:48:37Z,NONE,completed,,"  const mappingDashboardeColor: any = [];
 const [mappingPicker, setMappingPicker] = useState(mappingDashboardeColor);    

function handleColorPickerValueChange(index: number, colorPickerValue: any) {
        _.map(mappingPicker, (n, k) => {
            if (parseInt(k) === index) {
                mappingPicker[k].colorPicker = colorPickerValue.label;
            }
        })
        setMappingPicker(mappingPicker);

    }

Write like this without updating",Support
https://github.com/facebook/react/issues/15097,15097,[lerna] Invariant Violation: Hooks can only be called inside the body of a function component.,[],closed,FALSE,,20,2019-03-13T10:21:56Z,2022-07-20T10:26:28Z,2019-03-14T15:23:15Z,NONE,completed,,"Hello,

I have an error regarding hooks in a lerna architecture project where we import a ux lib made of style component inside a react project.
If component are host in the same app, error is not thrown.

**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**

An error is thrown:
```
Invariant Violation: Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)
    at invariant (http://localhost/static/js/main.chunk.js:121537:23)
    at resolveDispatcher (http://localhost/static/js/main.chunk.js:122922:36)
    at useRef (http://localhost/static/js/main.chunk.js:122956:28)
    at useStateWithGetter (http://localhost/static/js/main.chunk.js:39121:71)
    at useField (http://localhost/static/js/main.chunk.js:39161:35)
    at http://localhost/static/js/main.chunk.js:39417:27
    at renderWithHooks (http://localhost/static/js/0.chunk.js:70682:22)
    at mountIndeterminateComponent (http://localhost/static/js/0.chunk.js:72686:17)
    at beginWork (http://localhost/static/js/0.chunk.js:73237:20)
    at performUnitOfWork (http://localhost/static/js/0.chunk.js:77166:16)
    at workLoop (http://localhost/static/js/0.chunk.js:77207:28)
    at renderRoot (http://localhost/static/js/0.chunk.js:77287:11)
    at performWorkOnRoot (http://localhost/static/js/0.chunk.js:78232:11)
    at performWork (http://localhost/static/js/0.chunk.js:78142:11)
    at performSyncWork (http://localhost/static/js/0.chunk.js:78116:7)
    at requestWork (http://localhost/static/js/0.chunk.js:77971:9)
    at scheduleWork (http://localhost/static/js/0.chunk.js:77778:9)
    at scheduleRootUpdate (http://localhost/static/js/0.chunk.js:78482:7)
    at updateContainerAtExpirationTime (http://localhost/static/js/0.chunk.js:78508:14)
    at updateContainer (http://localhost/static/js/0.chunk.js:78576:14)
    at ReactRoot.push../node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render (http://localhost/static/js/0.chunk.js:78889:7)
    at http://localhost/static/js/0.chunk.js:79041:18
    at unbatchedUpdates (http://localhost/static/js/0.chunk.js:78359:14)
    at legacyRenderSubtreeIntoContainer (http://localhost/static/js/0.chunk.js:79037:9)
    at Object.render (http://localhost/static/js/0.chunk.js:79112:16)
    at boot (http://localhost/static/js/main.chunk.js:207505:52)
    at http://localhost/static/js/main.chunk.js:207517:10
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Use this [public repo](https://github.com/ppinel/test-informed-hooks) and follow the readme.
It's a good representation of our project's architecture.
You will experience the error.

**What is the expected behavior?**
Not throwing an error about hooks and displaying a working form.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Well, didn't tested before 16.8.0. But using [react-form](https://github.com/react-tools/react-form) instead of [informed](https://github.com/joepuzzo/informed) works.
An [issue](https://github.com/joepuzzo/informed/issues/167) has been open on informed repository.
II have the feeling that it's more related to React than informed itself.

I am aware of [this page](https://reactjs.org/warnings/invalid-hook-call-warning.html) but nothing worked.",Support
https://github.com/facebook/react/issues/15125,15125,useRef only updates with a useState together,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-03-16T00:53:35Z,2020-05-24T14:58:36Z,2019-03-16T01:29:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Probably a bug

**What is the current behavior?**
I'm creating a component swapper triggeredd by a interval. I had to use the useRef hook to keep the index state between renders, but it only gets updated when I keep a useState (the setCurrentIndex) is with it. When the setCurrentIndex at line 17 is removed, the swapper doesn't works.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Please check it out https://codesandbox.io/s/ooy2xrvxky

**What is the expected behavior?**
I tought that the indexRef wouldn't depend on the state hook to be updated.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.8.4, Chrome 72.0, Os Ubuntu 16.04.",Support
https://github.com/facebook/react/issues/15162,15162,Wrong height calculation of re-render nodes,[],closed,FALSE,,2,2019-03-20T07:28:08Z,2019-03-20T17:21:42Z,2019-03-20T13:19:04Z,NONE,completed,,"I have a problem with incorrect calculations of the container scroll height when adding new React nodes inside it.

Repro steps: 
1) open a pen (below)
2) scroll  down a bit
3) press ""Prepend"" button (to insert new element above)
Expected behavior: the parent container should not scroll when a new Dom element is inserted above.

**Correct behavior** (Jquery real-dom prepend) https://codepen.io/tomsoir/pen/LaJeYM
![2019-03-20 00 38 07](https://user-images.githubusercontent.com/301881/54666998-89e5a300-4aa8-11e9-835e-47f89854249f.gif)

**Incorrect behavior** (React virtual-dom prepend) https://codepen.io/tomsoir/pen/drqZWe
![2019-03-20 00 39 49](https://user-images.githubusercontent.com/301881/54667091-bac5d800-4aa8-11e9-9333-61063df6fda2.gif)

Do you have any ideas about how to fix this problem",Support
https://github.com/facebook/react/issues/15165,15165,getDerivedStateFromError doesn't play nice with redux,[],closed,FALSE,,2,2019-03-20T14:34:42Z,2019-03-21T12:12:01Z,2019-03-21T12:12:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I think it's a question, but this could be a bug. 

**What is the current behavior?**

I'm using redux, so state mutations aren't done. Everything comes in on props.
If you implement an ErrorBoundary using redux, you can get pretty far until you start getting the warning: ""Warning: ErrorBoundary: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.""

As soon as I implement this method it stops calling componentDidCatch. I don't want to use the derived version since that expects me to use state. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I can't post my code but if this sounds valid I will make a code pen example. I'm very new to react/redux. 

**What is the expected behavior?**

Why do I have to implement both? It seems like having to use state isn't considering redux apps. 
I would expect implementing one or the other is fine, or to be able to return null from the derived version. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/15167,15167,Should useLayoutEffect fire for sub component updates?,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-03-20T17:39:43Z,2019-03-21T08:10:00Z,2019-03-21T08:10:00Z,NONE,completed,,"To my current understanding, `useLayoutEffect` is used to interact with the browser layout, and to allow you to update a component accordingly.

If a sub-component updates, it is possible that the layout of the parent component changes.

In the current version of React, the `useLayoutEffect` would not be called on the parent, so the parent is unable to react to layout changes. This makes this API unsuitable for a lot of layout-based use-cases, despite this being its primary use-case.

Is this something that should be revisited?",Support
https://github.com/facebook/react/issues/15178,15178,Suspense fallback delay,[],closed,FALSE,,1,2019-03-21T12:49:23Z,2019-03-21T13:44:08Z,2019-03-21T13:44:08Z,NONE,completed,,"I am using React v.16.8.4
And I used Suspense component to do a simle app spiner, but React is so fast that spiner is just blinking. To resolve that problem I wanted to delay the fallback, but I cant find the delay property in Suspense component. This property was shown on a JSConf 2018, but it doesnt work.
Did you remove this property?",Support
https://github.com/facebook/react/issues/15202,15202,Can react delete subscripts directly? I have encountered this kind of problem.,[],closed,FALSE,,0,2019-03-24T10:10:47Z,2019-03-24T11:46:05Z,2019-03-24T11:45:30Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/15203,15203, Promise.all(...).then(...).catch(...).finally is not a function,[],closed,FALSE,,1,2019-03-24T15:09:14Z,2019-03-24T17:37:30Z,2019-03-24T17:37:30Z,NONE,completed,,"I've no idea why got .finally is not a function. event if i try require('es6-promise').polyfill() that still have the same problem.

![image](https://user-images.githubusercontent.com/25706979/54881303-8461d180-4e89-11e9-947e-8b9b64cab0e7.png)
",Other
https://github.com/facebook/react/issues/15209,15209,useState function as initial state gets executed,[],closed,FALSE,,4,2019-03-25T16:12:33Z,2020-05-06T08:11:03Z,2019-03-25T17:34:40Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When passing a function as the initial value to the useState hook the function gets executed.

Please see the following example:
https://codesandbox.io/s/vyj88kjn4l

**What is the expected behavior?**
The function is not executed.

Why does the function get executed here?

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.3",Support
https://github.com/facebook/react/issues/15214,15214,Component name as prop,[],closed,FALSE,,5,2019-03-26T17:14:52Z,2019-03-27T03:22:47Z,2019-03-26T19:58:27Z,NONE,completed,,"# Feature Request

Component name as props

### Current behavior

You have to set `.displayName` in a second statement

```js
const MyComponent = (props) => <Stuff />;

MyComponent.displayName = 'HeyHey'
```

https://stackoverflow.com/questions/43356073/how-to-set-displayname-in-a-functional-component-react

### Desired behavior

You can set a component's displayName by setting a displayName prop, ideally anywhere in the component hierarchy, like so:

```js
export default props => <Stuff displayName=""MyStuff"" />;
```

or so:

```js
export default props => (
  <Fragment displayName=""FragmentWithName"">
    <Stuff displayName=""HeyHey"" />
  </Fragment>
);
```

### Why

To make writing components less verbose

Other ideas:
https://github.com/facebook/react-devtools/issues/1294",Support
https://github.com/facebook/react/issues/15219,15219,"Combination of componentDidCatch and hooks throws ""Should have a queue. This is likely a bug in React.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,8,2019-03-27T00:53:53Z,2020-10-16T15:07:28Z,2020-10-16T15:07:28Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

If a component with hooks throws an error in its render function *after* the hooks have been defined, and that render error is caught via a `componentDidCatch` in a parent component, any subsequent components will have their hook order jumbled up on the next render.

This results in the app crashing with an **""Uncaught Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.""** error (or different messages depending on the specific hooks used)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/34mvmoln65

(once loaded, open the dev tools console and click the 'Trigger re-render' button)

Relevant source:

```jsx
function App(props) {
  const [, setCounter] = React.useState(0);
  return (
    <div>
      <ErrorHandler>
        <ErrorThrower />
      </ErrorHandler>
      <StatefulComponent />
      <button onClick={() => setCounter(value => value + 1)}>
        Trigger re-render
      </button>
    </div>
  );
}

function ErrorThrower() {
  React.useMemo(() => undefined, []);
  if (true) {
    throw new Error(""!!!"");
  }
  return <p>[Error component]</p>;
}

function StatefulComponent() {
  React.useState(null);
  return <p>[Stateful component]</p>;
}

class ErrorHandler extends React.Component {
  ...
  componentDidCatch(error) {
    ...
  }
}
```

**What is the expected behavior?**

The app should not crash, seeing as the `componentDidCatch()` ought to catch the render error and allow the rest of the app to render as normal

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This will presumably affect all versions of React that include the current Hooks implementation (v16.8 onwards)",Bug
https://github.com/facebook/react/issues/15233,15233,When state is not updated setState callback should not be invoked,[],closed,FALSE,,5,2019-03-28T07:02:39Z,2019-04-03T15:11:22Z,2019-04-03T15:11:22Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
When null is returned in setState updater, callback is invoked.
`
this.setState((prevState) => null, callback);
`
Example (see console):
https://stackblitz.com/edit/set-state-callback

**What is the expected behavior?**
When state is not updated callback should not be invoked.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
^16.0.0

What do you think about it? First of all we can consider callback what invokes after every setState. On the other side we can consider it as callback invoked only after state change. In my opinion second option is more handy because if I want to invoke callback with some job, I usually need to do something when state changed.",Support
https://github.com/facebook/react/issues/15236,15236,How test componentDidUpdate lifecycle method with test-renderer?,[],closed,FALSE,,12,2019-03-28T08:10:31Z,2019-04-03T15:05:31Z,2019-04-03T15:05:31Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Support
https://github.com/facebook/react/issues/15244,15244,memory heap increase on inactive tab,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-03-28T20:08:49Z,2019-04-24T07:04:05Z,2019-04-11T21:35:43Z,NONE,completed,,"Can't say it is a React bug. Hoping someone will help me understand something more though. 

I have a dashboard that gets refreshed every 10 seconds using a timeInterval. 

- When tab is active there is no increase of memory heap. 
- When I reduce the tab so the browser tab becomes inactive, there is a memory heap leak exactly when the timeout triggers. 
- When I open back up the browser window so that it becomes active again, there is a sudden drop of the memory heap.
- See attached picture: 
   1/3: active tab
   2/3: inactive tab
   3/3: active tab again  

Is there anyway this could be a React?
Using react react@16.6.3

<img width=""2552"" alt=""Screen Shot 2019-03-28 at 3 36 08 PM"" src=""https://user-images.githubusercontent.com/1474127/55191091-47d6f400-516f-11e9-9d1b-f9cdc7e04307.png"">",Other
https://github.com/facebook/react/issues/15264,15264,SyntaxError: Unexpected token < in TestRenderer.create,[],closed,FALSE,,4,2019-03-29T23:01:15Z,2019-04-03T14:57:16Z,2019-04-03T14:56:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
`const testRenderer = TestRenderer.create(<Link />).toJson(); `

Is throwing an exception while running through node / npm:
SyntaxError: Unexpected token <

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
`const testRenderer = TestRenderer.create(<Link />).toJson();` should work

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""16.8.6""
",Support
https://github.com/facebook/react/issues/15265,15265,About Json object render error,[],closed,FALSE,,5,2019-03-30T01:42:55Z,2019-04-03T14:56:22Z,2019-04-03T14:56:22Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

I got the Json data form backend , I use the react-json-view to see it. it works

![image](https://user-images.githubusercontent.com/22393849/55269313-d614bc80-52cc-11e9-9b47-de175630f6c2.png)
the data is like this
```js
temp = {

        bookid: data[index].chapterid.bookid,
        chaptername: data[index].chapterid.chaptername,
        author: author,
        datetime: data[index].datetime,
        content: data[index].content
      };
```
but when I want to render the first chapter,it failed

And the code is :
```js
render() {
    return (
        <div>
          <DirectoryList data={this.state.directory}/>
          <ReactJSON src={this.state.contents}/>
         {/*above is ok */}
          {this.state.contents[0].bookid} {/*it can't work when add this line*/}
        </div>
    );
  };
```
![image](https://user-images.githubusercontent.com/22393849/55269431-ebd6b180-52cd-11e9-904c-2296429a65b4.png) 

 I can't get the property from the data, even it actually existid in . Why?


React V 16.07
Chrome
Win10",Other
https://github.com/facebook/react/issues/15285,15285,Hover module  experimental event API delay approach,[],closed,FALSE,,3,2019-04-01T14:09:30Z,2019-04-01T16:05:59Z,2019-04-01T16:05:58Z,CONTRIBUTOR,completed,,"To implement `delayHoverStart` and `delayHoverEnd` there are many situations such as below:

**First**
When start delay timeout greater than or equal to the end delay timeout. no worries about this, because both of `mouseover` and `mouseout` events will be run perfectly.

**Second**
When start delay timeout less than end delay. In this situation, there are three options
   - We can clear start delay and JUST run end delay but we will lose `mouseover` event.
   - We can keep both of them but maybe `mouseout` event runs before `mouseover`
   - We can check by `end >= start` as always

I was wondering which one could be more useful.",Feature
https://github.com/facebook/react/issues/15291,15291,useState hook not updating (onPanResponderRelease),[],closed,FALSE,,4,2019-04-01T23:13:16Z,2019-10-03T15:16:20Z,2019-04-03T14:54:00Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Bug.

**What is the current behavior?**
![image](https://user-images.githubusercontent.com/29601050/55361950-7a456180-548d-11e9-98dd-3ffb0409754a.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

* [Repo](https://github.com/English3000/Elixir/tree/refactor/bottom-up/functional_design/islands)
```bash
git clone https://github.com/English3000/Elixir.git
cd Elixir/functional_design/islands
git checkout refactor/bottom-up
cd apps/islands_interface/assets && npm i
cd ../../.. && mix phx.server
```
> Go to `localhost:4000` && join a game
* [`Island` w/ Hooks](https://github.com/English3000/Elixir/blob/refactor/bottom-up/functional_design/islands/apps/islands_interface/assets/js/components/Island.tsx#L47)  
  * already tried w/o `useEffect`

**What is the expected behavior?** 
`onBoard` state hook updates value.

Logic works [w/o hooks](https://github.com/English3000/Elixir/blob/refactor/bottom-up/functional_design/islands/apps/islands_interface/assets/js/components/Island_.tsx#L56):
![image](https://user-images.githubusercontent.com/29601050/55361783-1458da00-548d-11e9-9ff1-4e0d28913951.png)


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
* **React version:** `""^16.8.4""`... then tried `""^16.8.6""`
* **Browser:** Mozilla
* **OS:** Mac Mojave",Support
https://github.com/facebook/react/issues/15294,15294,希望加入996LICENSE(I hope to join the 996 LICENSE),[],closed,FALSE,,0,2019-04-02T11:40:05Z,2019-04-02T15:30:46Z,2019-04-02T15:30:46Z,NONE,completed,,希望加入996LICENSE(I hope to join the 996 LICENSE) @,Other
https://github.com/facebook/react/issues/15316,15316,You need to set AppId Error,[],closed,FALSE,,1,2019-04-04T06:20:18Z,2019-04-04T07:01:09Z,2019-04-04T07:01:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

When I start react application in docker-compose I get the following.
<img width=""1042"" alt=""Screen Shot 2019-04-04 at 3 16 09 PM"" src=""https://user-images.githubusercontent.com/20388249/55533582-b1657e00-56ec-11e9-9f5c-89fb250d0233.png"">

Cosole error is as below

```
Uncaught (in promise) Error: You need to set appId
    at new Facebook (bundle.js:139587)
    at _callee$ (bundle.js:140867)
    at tryCatch (bundle.js:177762)
    at Generator.invoke [as _invoke] (bundle.js:177988)
    at Generator.prototype.(:8080/anonymous function) [as next] (http://dashboard.localtest.com:8080/static/js/bundle.js:177814:21)
    at asyncGeneratorStep (bundle.js:782)
    at _next (bundle.js:804)
    at bundle.js:811
    at new Promise (<anonymous>)
    at Facebook.handleInit (bundle.js:800)
    at Facebook.componentDidMount (bundle.js:140909)
    at commitLifeCycles (bundle.js:129504)
    at commitAllLifeCycles (bundle.js:130724)
    at HTMLUnknownElement.callCallback (bundle.js:114964)
    at Object.invokeGuardedCallbackDev (bundle.js:115014)
    at invokeGuardedCallback (bundle.js:115067)
    at commitRoot (bundle.js:130894)
    at completeRoot (bundle.js:132282)
    at performWorkOnRoot (bundle.js:132210)
    at performWork (bundle.js:132114)
    at performSyncWork (bundle.js:132086)
    at requestWork (bundle.js:131974)
    at scheduleWork (bundle.js:131768)
    at scheduleRootUpdate (bundle.js:132456)
    at updateContainerAtExpirationTime (bundle.js:132483)
    at updateContainer (bundle.js:132510)
    at ReactRoot../node_modules/react-dom/cjs/react-dom.development.js.ReactRoot.render (bundle.js:132776)
    at bundle.js:132916
    at unbatchedUpdates (bundle.js:132337)
    at legacyRenderSubtreeIntoContainer (bundle.js:132912)
    at Object.render (bundle.js:132971)
    at Object../src/index.js (bundle.js:196386)
    at __webpack_require__ (bundle.js:679)
    at fn (bundle.js:89)
    at Object.0 (bundle.js:201157)
    at __webpack_require__ (bundle.js:679)
    at bundle.js:725
    at bundle.js:728
```


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I cannot get it to reproduce...

**What is the expected behavior?**

Render the react application

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Chrome - it worked even in current version of react. After rebuilding the react image in docker-compose the above error happened. I touched other things that are not related to the react container (I doubt that is the reason why the application suddenly starts crashing).",Other
https://github.com/facebook/react/issues/15321,15321,useEffect callback isn't executed in `react-test-renderer`'s `create()`,[],closed,FALSE,,6,2019-04-04T16:10:03Z,2021-11-30T11:27:30Z,2019-04-05T12:35:25Z,NONE,completed,threepointone,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
The callback provided to `useEffect` is not executed when the component is rendered.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
1. Set up `useEffect` in a component that sets up a listener for events external to the component.
2. Write a test that expects a triggered event to be processed. The event listener will never have been set up.

[See codesandbox.](https://codesandbox.io/s/rmx3llk2oo)
(Also demonstrated in [this github repo](https://github.com/imatt611/testing-socket-fetch-effect/tree/simplified), though that example is more complex and depends on socket.io-client)

**What is the expected behavior?**
The `useEffect` contents are executed, setting up a listener that can be triggered later in a test.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
- React 16.8.3
- React-test-renderer 16.8.6
Unknown whether this worked in previous versions.
",Support
https://github.com/facebook/react/issues/15329,15329,[eslint-plugin-react-hooks] setState in effect guard prevents cases like DOM measurement,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2019-04-04T23:13:18Z,2020-01-17T09:00:01Z,2020-01-17T09:00:01Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

The new guard against a direct call to `setState` inside of an effect (https://github.com/facebook/react/pull/15184) seems to prevent a class of patterns where the value being set is dependent on something other than props. For example, the rule disallows storing a value read from the DOM via a ref (see below).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```js
function MeasuredButton(props) {
  const buttonRef = useRef(null)
  const [buttonWidth, setButtonWidth] = useState(0)

  useLayoutEffect(() => {
    if (buttonRef.current) {
      // we rely on the same value bailout to avoid an infinite loop
      setButtonWidth(buttonRef.current.clientWidth)
      // we could bail out explicitly instead:
      // const {clientWidth} = buttonRef.current
      // if (clientWidth !== buttonWidth) setButtonWidth(clientWidth)
      // but the linter would still disallow it
    }
  })

  return (
    <>
      <button ref={buttonRef}>{props.children}</button>
      Button width: {buttonWidth}
    </>
  )
}
```

This code yields the error:

>React Hook useLayoutEffect contains a call to 'setButtonWidth'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useLayoutEffect Hook.

The auto-fix breaks the component because the width no longer updates on subsequent renders.

**What is the expected behavior?**

Basically, the guard assumes that the infinite loop problem can always be solved by adding a dependency array. This is true when setting a value derived from props (such as data returned from a request based on a prop), but not when the source of the value can only be retrieved inside of the effect (such as a DOM measurement). In the latter case, an infinite loop has to be avoided by adding a condition or relying on the same value bailout.

Is this known and/or intentional? I notice that #15184 considered early returns, which would help.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.8.6
eslint-plugin-react-hooks: 1.6.0",Support
https://github.com/facebook/react/issues/15360,15360,Support `useState` style lazy state initialization in `useReducer`,[],closed,FALSE,,1,2019-04-09T16:20:05Z,2019-04-09T21:30:26Z,2019-04-09T21:30:26Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

Signatures of `useState` and `useReducer` for lazy state initialization are different and not consistent.

- signature of `useState`
```ts
function useState<S>(initialState: () => S)
```

- signature of `useReducer`
```ts
function useReducer<S, I, A>(
  reducer: (S, A) => S,
  initialArg: I,
  init: I => S,
)
```

**What is the expected behavior?**

Support below signature of `useReducer` for lazy initialization.

```ts
function useReducer<S, A>(
  reducer: (S, A) => S, 
  initialState: () => S
)
```

This will allow lazy initializations like this.

```js
// Lazy initialization example in https://reactjs.org/docs/hooks-reference.html#usereducer 
// will be
function Counter({initialCount}) {
  // previously
  // `const [state, dispatch] = useReducer(reducer, initialCount, init);`
  const [state, dispatch] = useReducer(reducer, () => init(initialCount));
  // ...
}

// To get initial state from `reducer` (redux style)
// `useReducer(reducer, undefined, reducer)` will be
const [state, dispatch] = useReducer(reducer, reducer);
```

**Which versions of React, and which browser / OS are affected by this issue?**

16.8",Feature
https://github.com/facebook/react/issues/15370,15370,TestUtils.renderIntoDocument returns `null` when valid functional component passed.,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-04-10T12:31:13Z,2019-04-15T15:30:41Z,2019-04-15T15:30:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I want to report a bug.

**What is the current behavior?**
Currently when valid functional component is passed to **TestUtils.renderIntoDocument** it returns a **null** and raise no error.

**Demo**
This behavior was reproduced in a sandbox: https://codesandbox.io/s/1zpvll4j24

Check the console, to see **TestUtils.renderIntoDocument** output of prepared sample components.

**Workarounds**
Workaround that satisfies both SFC and FC is wrapping component into container:
```
const FCCounter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <div>{count}</div>
      <button onClick={() => setCount(count + 1)}>+1</button>
    </div>
  );
};

TestUtils.renderIntoDocument(
  <div>
    <FCCounter />
  </div>
);
```

**What is the expected behavior?**

- To render a functional component.
- In worst case - providing an error.

**Which versions of React are affected by this issue?**
React version: 16.8.6
",Support
https://github.com/facebook/react/issues/15382,15382,[question] reference to a DOM element as a dependency to useEffect,[],closed,FALSE,,2,2019-04-11T10:09:20Z,2019-04-12T08:04:00Z,2019-04-12T08:04:00Z,NONE,completed,,"I have a third-party library that can only work with DOM via an `id` property:

```js
let editor = new Editor({ id: 'my-editor' })
```

My initial thought was to do something like:

```jsx
let Component = () => {
  let ref = useRef()
  let editorRef = useRef()
  let { current: div } = ref

  useEffect(() => {
    if (div) {
      editorRef.current = new Editor({
        id: 'my-editor'
      })
    }
  }, [ div ])


  return (
    <div ref={ref} id='my-editor' />
  )
}
```

But the component isn't rerendered when `ref.current` is changed, so I've looked up an approach using `useState` (like here https://github.com/thebuilder/react-intersection-observer/blob/master/src/useInView.tsx):

```jsx
let Component = () => {
  let [ div, setDiv ] = useState()
  let editorRef = useRef()

  useEffect(() => {
    if (div) {
      editorRef.current = new Editor({
        id: 'my-editor'
      })
    }
  }, [ div ])


  return (
    <div ref={setDiv} id='my-editor' />
  )
}
```

Is it a valid approach for solving this task or am I missing something? Thanks.",Support
https://github.com/facebook/react/issues/15414,15414,useMemo in StrictMode,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,1,2019-04-14T22:27:51Z,2019-10-29T12:25:08Z,2019-10-29T12:25:08Z,COLLABORATOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
*feature*

**What is the current behavior?**
> Write your code so that it still works without useMemo

-- https://reactjs.org/docs/hooks-reference.html#usememo

I can try writing my code with this in mind but it would be very helpful if React could try to help spot issues.

**What is the expected behavior?**

StrictMode can already help us detect side-effects in render by calling it twice. It also helps detecting side-effects in `useMemo` by calling it twice if the dependencies change. However, there's no way to simulate a purge of the cache.

It might help calling the factory in StrictMode regardless of the dependencies (or only on the second render). Other approaches like `<StrictMode areMemoDependenciesEqual={...} />` would give more control to the user.

There's already a working solution by using some feature flag at build time e.g. `React.useMemo(factory, __STRICT__ ? undefined : [dependency])` but the linter can't work with that. Using `React.useMemo(factory, [dependency, PURGE_MEMO_CACHE.current])` would make it more controllable if we write e.g. test instructions but the linter complains about those too. I don't think we have a way to detect if React is between two render calls so that we can purge the cache by flipping `PURGE_MEMO_CACHE.current`

This is also somewhat opposite to #15278 because we want an API to opt-in to cache purging.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Future versions of React that might forget the dependencies.
",Other
https://github.com/facebook/react/issues/15416,15416,How to test multiple state changes with act?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-04-15T06:29:03Z,2019-04-15T12:17:47Z,2019-04-15T12:11:17Z,NONE,completed,threepointone,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
With the new `act` function, I'm unsure how to test state transitions that occur _during_ an event handler processing. For example if I have this handler that is called on form submission:

```
const [isSubmitting, setIsSubmitting] = useState(false);
const handleSubmit = async () => {
  setIsSubmitting(true);
  await fetcher();
  setIsSubmitting(false);
};

```
then I want to be able to test that `isSubmitting` state is indeed set to true before `fetcher` is called.

Due to the nature of `act` (I believe it defers all state changes until after its provided function has been run) I'm not sure that this is currently possible?

Previously I've been testing using `await new Promise(setTimeout)` to flush the current runtime task queue, which works fine for this use case.

I _have_ found a way to make this work without triggering the `act` warning, but it feels like a hack. I have to wrap `act` around my expectation, not the submit.

```
it('displays indicator when form is submitting', async () => {
  ReactTestUtils.Simulate.submit(form());
  await act(async () => {
    expect(container.querySelector('.submittingIndicator')).not.toBeNull();
  });
});
```

I've provided this test in a repo together with a couple of other tests which complete the feature - see the link below.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://github.com/dirv/react-act-toggle-state

**What is the expected behavior?**
There's a way for me to test this which doesn't feel like a hack.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.9.0-alpha.0",Support
https://github.com/facebook/react/issues/15434,15434,eslint-plugin-react-hooks exhaustive-deps does not detect component usage,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2019-04-17T18:30:49Z,2020-01-17T09:00:08Z,2020-01-17T09:00:08Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
This is a bug

**What is the current behavior?**

```jsx
function MyComponent({ component: CoolComponent }) {
  const element = useMemo(() => <CoolComponent />, [CoolComponent]);
  return element;
}
```

React Hook useMemo has an unnecessary dependency: 'CoolComponent'. Either exclude it or remove the dependency array. eslint(react-hooks/exhaustive-deps)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

eslint is able to detect locally-declared component types or ones passed in as props

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

eslint-plugin-react-hooks 1.6.0

**Workaround**

A workaround for this situation is:

```jsx
function MyComponent({ component: CoolComponent }) {
  const element = useMemo(() => React.createElement(CoolComponent), [CoolComponent]);
  return element;
}
```

But I'd really prefer to use JSX",Other
https://github.com/facebook/react/issues/15467,15467,lazy suspend ref props not changing,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1109407645,""node_id"":""MDU6TGFiZWwxMTA5NDA3NjQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Suspense"",""name"":""Component: Suspense"",""color"":""8ffcd6"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2019-04-21T08:15:56Z,2020-01-17T09:00:12Z,2020-01-17T09:00:12Z,NONE,completed,,"I am having a problem getting a new height from my outer component when the inner lazy components height changes. I am using getBoundingClientRect() to get height.

Everything works fine when I don't make the component lazy.

I have tryed waiting untill the component is fully loaded before getting the new height, but it still doesn't change the height.",Other
https://github.com/facebook/react/issues/15470,15470,"[Warning] Security vulnerability in 'tar' package, with the latest version","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2019-04-22T04:48:44Z,2019-04-23T12:22:03Z,2019-04-23T12:21:54Z,NONE,completed,,"**React version**: 16.8.6
A security Vulnerability is shown when is compiling.

**Steps to reproduce it:**
- Update the project to the latest version 16.8.6
- run the `npm start`
- Run `npm audit` and verify that the project is throwing a security issue inside
![image](https://user-images.githubusercontent.com/36707032/56483346-6773ea80-6497-11e9-8f53-4532dfd56a76.png)

**Package file**
![image](https://user-images.githubusercontent.com/36707032/56483363-8ffbe480-6497-11e9-9a53-ede160a6c29a.png)

",Other
https://github.com/facebook/react/issues/15472,15472,Umbrella: act,"[{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,FALSE,,9,2019-04-22T23:34:49Z,2019-08-09T00:30:37Z,2019-07-04T18:15:34Z,MEMBER,completed,threepointone,"## Action items

- [x] Before waiting for microtasks to flush, React should call `Scheduler.flushAll` to flush pending Scheduler work. https://github.com/facebook/react/pull/15591
- [x] `act` should not flush anything until the outermost `act` call exits (except for the updates that always flush early like `flushSync` and serial events). https://github.com/facebook/react/pull/15682
- [x] Add `act` warning to React DOM's `root.update()` (since `createRoot` is a new API). https://github.com/facebook/react/pull/15756
- [x] React should warn if an update is scheduled but is nested inside the wrong renderer's `act` (e.g. a DOM update nested inside Test Renderer's `act`), regardless of whether the update was triggered by a legacy API. https://github.com/facebook/react/pull/15756
- [x] React should warn if a passive effect is scheduled by an update outside of `act`, regardless of whether the update was triggered by a legacy API (e.g. `this.setState` or `ReactDOM.render`) https://github.com/facebook/react/pull/15763
- [x] nested `act`s from different renderers should work (eg - a react-art update inside a react-dom tree shouldn't warn https://github.com/facebook/react/pull/15816
- [x] `act` should force pending fallbacks to commit at the end, ignoring how much time has passed, without affecting unrelated timers.
- [ ] `act` should warn if it's called from inside a React event handler or React effect/lifecycle.
- [ ] `act` should have the same behavior regardless of whether the result is awaited.

## Discussion
- In Legacy Mode, updates that happen after the first `await` will not be batched, but they shouldn't fire the warning. We should still wait to flush passive effects, Scheduler, and microtasks until the end.
- Because passive effects are scheduled with Scheduler, they are flushed by `Scheduler.flushAll`. That means we don't need to call `flushPassiveEffects` separately in order to flush them. However, we currently use the return value of `flushPassiveEffects` to determine if additional passive effects were scheduled. So perhaps we should export a method like `hasPendingEffects` instead.
- The recommendation is to await the result of `act` even if the handler is synchronous, because that ensures that any dangling microtasks are flushed before the test proceeds. However, it's hard to fire a warning if the user neglects to do this, because such a warning needs to happen in an async task, and the test could exit before the async task fires. The warning is also controversial because of the additional boilerplate. But regardless of whether we fire a warning, we should stick to our recommendation to always await `act`.
- The API is designed primarily for Batched/Concurrent Mode. That's why we wait until the outermost `act` exits before flushing anything.
  - The behavior is slightly different in Legacy Mode, but they are the same in the simple case of a single event handler inside a single `act`. For the remaining cases, our suggestion is to switch to the Batched Mode API.
- No longer need to count the `act` ""depth"" because nested `act`s are a no-op in Batched Mode.

## Idiomatic examples

### Single event handler

```js
await act(() => setState());
```

### Using a testing framework

```js
await simulate('click', domElement);
```

where `simulate` is imported from a testing framework and looks something like:

```js
async function simulate(eventType, domElement) {
  const event = new Event(eventType);
  await act(() => domElement.dispatchEvent(event));
}
```

### Advanced: Multiple events that occur in sequence

In Batched Mode, these would all be flushed in a single batch, so we group them together with an outer `act`. 

```js
await act(async () => {
  await simulate(domElement, 'mousedown');
  await simulate(domElement, 'mouseup');
});
```",Other
https://github.com/facebook/react/issues/15494,15494,Declarative vs. imperative coding style using Hooks,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-04-25T05:38:14Z,2019-04-25T10:49:33Z,2019-04-25T09:18:31Z,NONE,completed,,"_If this should be asked on Stack Overflow instead, please let me know and feel free to close the issue._

Consider a component that fetches some data in a custom hook, saves the fetched data in a state hook, and notifies the user that data has been fetched using a prop callback.

Notifying the user can be done imperatively:

```js
function Component(props) {
  const [ data, setData ] = useState(null);

  useApi(""/api/data"")
    .then(setData)
    .then(props.onFetched);

  return dataToElements(data);
}
```

or declaratively using an effect hook:

```js
function Component(props) {
  const [ data, setData ] = useState(null);

  useApi(""/api/data"")
    .then(setData);

  useEffect(() => {
    if (data) {
      props.onFetched();
    }
  }, [ data ]);

  return dataToElements(data);
}
```

React seems to promote a declarative approach. But what I've found is that when components grow large and complex, using declarative effect hooks makes the flow of data and actions quite hard to follow. If you're not careful, a lot of things start to depend on a lot of other things, and the predicted results become non-intuitive and hard to wrap your head around.

I would like to know other peoples' opinions on this matter, and whether or not an imperative approach might sometimes be better. ",Support
https://github.com/facebook/react/issues/15508,15508,`static getDerivedStateFromProps()` does not works same as componentWillReceiveProps  ,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-04-26T09:10:44Z,2019-04-26T11:08:11Z,2019-04-26T11:06:20Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
   bug
**What is the current behavior?**
 `static getDerivedStateFromProps()` is not a replacement for `componentWillReceiveProps`


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16


Hi I'm trying to implement `toasterNotificationcards` which will be displayed when a user save an item, stating `item saved successfully`

below is my code I'm using `componentWillReceiveProps` which is depreciated I tried `static getDerivedStateFromProps()` but it didn't work 

how can I removed `componentWillReceiveProps` , assuming the close button shouldn't be in parent component(whichever is calling `notificationcomponent`)

[jsfiddle working example ](https://jsfiddle.net/munsp36f/)
requirement:

  On click of the button show `Notificationcard`
  On click on close hide `Notificationcard`

```jsx
class Notification extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: true
    };
  }

  componentWillReceiveProps(props) {
    this.setState({ open: props.show });
    // setTimeout(this.handleClick.bind(this), 8000);
  }

  handleClick() {
    this.setState({ open: false });
  }

  componentDidMount() {
    //setTimeout(this.handleClick.bind(this), 8000);
  }

  render() {
    if (!this.state.open) {
      return null;
    }

    return (
      <div>
        <br />
        <div>Item saved successfully</div>
        <div className=""cls--btn"" onClick={() => this.handleClick()}>
          &#10006;
        </div>
      </div>
    );
  }
}

class Test extends React.Component {
  handleClick() {
    this.setState({ show: true });
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick.bind(this)}>click</button>
        <Notification show={true} />
      </div>
    );
  }
}

ReactDOM.render(<Test name=""World"" />, document.getElementById(""container""));
```",Support
https://github.com/facebook/react/issues/15513,15513,Allow ReactNode as a type for the child of <option/>,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,17,2019-04-26T16:51:51Z,2021-06-10T14:24:58Z,2020-04-17T01:46:25Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Feature

**What is the current behavior?**
Currently, the options element only allows types number and string. 

**What is the expected behavior?**
An option should allow for a ReactNode as a child in addition to a number + string. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
All versions.
All browser types.
To the best of my knowledge, no.

p.s. This is my first feature request here, so let me know if I need to adjust the feature request in any way. ",Support
https://github.com/facebook/react/issues/15527,15527,Apparent memory leak using hooks,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,8,2019-04-29T13:15:32Z,2021-12-08T07:56:44Z,2020-01-16T20:59:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Maybe a bug. Maybe I'm just running into a weird edge case.

**What is the current behavior?**

I have a situation where using a combination of `useEffect`, `useCallback`, and having a function in the actual component render is causing a sort of memory leak.
The current render of the component seems to hang on to references of past renders of the component. (more details in the reproduction sample repo)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

I think I have this minimized about as much as I can:
https://github.com/rally25rs/react-mem

It's a basic `create-react-app` project, so you can just `yarn install && yarn start` it. There is some explanation/instructions in the web page that it renders.

The `src/VirtualizedTable.js` file is the key file to look at.

**What is the expected behavior?**

As best as my brain can comprehend, memoized references should be getting cleared as the component props change and data should be garbage collected (but it isn't).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* Chrome
* react@16.8.6
",Other
https://github.com/facebook/react/issues/15543,15543,Understanding `act` behaviour,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":139734344,""node_id"":""MDU6TGFiZWwxMzk3MzQzNDQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils"",""name"":""Component: Test Utils"",""color"":""eb6420"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-04-30T14:36:46Z,2019-09-04T11:28:22Z,2019-09-04T11:28:22Z,NONE,completed,," I have been trying to use `act` for the first time, and having some issues, and so I'm wondering if my expectations are wrong about what it is supposed to do, or if I am ""doing it wrong"".

**What is the current behavior?**

The only way I can observe the results of state changes I initiate is by using a timeout.

**Paste the link to your JSFiddle or CodeSandbox example below:**

https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1

**What is the expected behavior?**

What I expect is that by wrapping a state change or render operation in `act`, all of the resulting state changes / side-effects / re-renders will be complete by the time `act` returns, so that the operation appears (or is coerced to be) synchronous. 

I created an example (https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1) wherein I render a view via `unstable_ConcurrentMode`. In the view, I create a `useState` hook with a value of `0`. After the view is rendered, I use that hook's setter to change its state to `1`.

Below is a log of the [steps I take](https://codesandbox.io/s/k5zmln6w83?expanddevtools=1&fontsize=14&hidenavigation=1), showing three values at each time: `seenByRender`, the last state-value that appeared within the render body; `calculated`, the last value returned from my state-update function; and `seenByEffect`, the last value observed from a `useEffect` I create in the view. 

```
1. before act/render:   seenByRender: null, calculated: null, seenByEffect: null
2. after act/render:    seenByRender: 0,    calculated: null, seenByEffect: 0
3. ---incrementing with act/setState---
4. after act/increment: seenByRender: 0,    calculated: 1,    seenByEffect: 0
5. after timeout:       seenByRender: 1,    calculated: 1,    seenByEffect: 1
```

What I am wanting/expecting is for step 4 to look like step 5, ie, I can somehow test the full consequences of my setState call.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

16.8.6, using unstable_ConcurrentMode
",Other
https://github.com/facebook/react/issues/15548,15548,Feedback on useEffect depndencies change error,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,16,2019-05-01T02:46:22Z,2022-08-18T03:42:48Z,2020-01-16T20:59:39Z,NONE,completed,,"Some feedback on `useEffect`

**What is the current behavior?**

I am using `useEffect` to load details on a set of users that are kept in props.

I want to minimize loading and there are situations where the array of users (and the actual user objects) are recreated but really they refer to the same identities.

So I do

```
const userIds = users.map(u => id)
useEffect(() => {
  if(!userIds.length)
    return
  ...load more stuff by querying endpoints about these ids and set state..
}, userIds)
```

aand I run into a warning

> The final argument passed to useEffect changed size between renders. The order and size of this array must remain constant

which to me is...kinda the point, is it not? I understand if we don't want to do a deep comparison in the dependencies, but if the dependencies themselves change...well that seems straightforward, run the effect. 

I know that I can do `[userIds.join(' '])` in this case, but that seems like just extra work for no reason and really anti-intuitive. And ends up doing the same exact thing but with extra steps! 

To be clear, what I'm proposing is removing [this whole block here](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L308) and replacing it with

```
if (nextDeps.length !== prevDeps.length)
  return false
```

As far as I can tell, this warning serves no real purpose and makes the use case outlined above awkward to deal with",Support
https://github.com/facebook/react/issues/15559,15559,No good reasons to remove string refs from react-native,[],closed,FALSE,,1,2019-05-02T20:42:08Z,2019-05-02T20:51:39Z,2019-05-02T20:51:18Z,NONE,completed,,"There are multiple problems with it:

* It requires that React keeps track of currently rendering component (since it can't guess `this`). This makes React a bit slower.
* It doesn't work as most people would expect with the ""render callback"" pattern (e.g. `<DataGrid renderRow={this.renderRow} />`) because the ref would get placed on `DataGrid` for the above reason.
* It is not composable, i.e. if a library puts a ref on the passed child, the user can't put another ref on it (e.g. #8734). Callback refs are perfectly composable.

_Originally posted by @gaearon in https://github.com/facebook/react/pull/8333#issuecomment-271648615_",Other
https://github.com/facebook/react/issues/15582,15582,adding useVariable hook and use it to pass refs,[],closed,FALSE,,1,2019-05-08T10:35:29Z,2019-05-08T12:41:03Z,2019-05-08T12:41:03Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** feature

**What is the current behavior?**
I really love the structure returned by useState => [value, setValue], very clean!

So I wondered why not use this structure for refs?
We could add a hook called `useVariable` which returns [var, setVar] but does not update the current component on calling `setVar`.

Which could be polifilled with something like:
```
const useVariable = initialValue => {
  const ref = useRef([
    initialValue,
    param => {
      ref.current[0] = typeof param === ""function""
        ? param(ref.current[0])
        : param
}
  ]);
  return ref.current;
};
```

The array returned by useVariable could be passed to `<div ref={resultFromUseVariable}/>` Then we could get rid of accessing ref.current in our code.


",Support
https://github.com/facebook/react/issues/15584,15584,Component additional methods,[],closed,FALSE,,3,2019-05-08T12:36:38Z,2019-05-08T13:59:25Z,2019-05-08T13:02:56Z,NONE,completed,,"In React we don`t have a rich component activity methods. I want tell about self controlled methods for component.

Need methods
- this.mountComponent() - this method add component to DOM, and call from component instance
- this.unmountComponent() - this method remove component from DOM, and call from component instance

About Motivation.
We can remove component from DOM in Parent component, but need pass action (method) from parent to child, and in child component call method. It simple, but why required this steps?
Simple way add methods mountComponent and unmountComponent, this be great!
",Other
https://github.com/facebook/react/issues/15585,15585,Component ReactDOM travel,[],closed,FALSE,,3,2019-05-08T12:47:36Z,2019-05-08T13:58:03Z,2019-05-08T13:58:02Z,NONE,completed,,"In React we don`t have a methods in component for tree travel. Needle methods for DOM travel

Need methods
- this.parent() - get access to parent state and methods, can be chained this.parent().parent()
- this.parents( ref || key || other ) - find parent by
- this.neighbourPrev() - get access to neighbour component previous in DOM
- this.neighbourNext() - get access to neighbour component next in DOM

About Motivation.
In native javascript we have simular methods for DOM travel, and in RealWorld we need this important methods for organize good application. 
",Other
https://github.com/facebook/react/issues/15596,15596,Bug in conditional rendering(&&),[],closed,FALSE,,3,2019-05-09T04:07:14Z,2019-05-09T10:54:42Z,2019-05-09T10:50:21Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
> *bug*

**What is the current behavior?**
> Conditional Rendering (&&) 
1. list length value is zero(0).
2. zero(0) is falsy from javascript.
3. However, zero(0) is output as the rendered result.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
> JSFiddle: [example](https://jsfiddle.net/2dubbing/fbz8r712/)

**What is the expected behavior?**
> zero(0) is not output.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
> React v16.8.6
> Chrome browser(v73.0.3683.103)

",Support
https://github.com/facebook/react/issues/15624,15624,[Question] react-debug-tools package and `overrideHookState` devtool internal,[],closed,FALSE,,10,2019-05-12T05:23:43Z,2019-05-13T01:56:44Z,2019-05-12T09:34:36Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

For now, React has not published `react-debug-tools`. I proposed building an api in enzyme to get hook state through it (See https://github.com/airbnb/enzyme/issues/2120
). So I'd like to know when React core team will publish this. Or at least, to make sure if we can safely use that module in the future, through npm package or devtool hook.

Also I'd like to leverage the `overrideHookState` api injected into devtool to set hook stat in enzyme. I'd like to ask:

1. Is it possible to put this into `react-debug-tools`?
2. If not, is it safe (i.e. react will not drop or change `overrideHookState` api easily)for a third party user(not react nor react-devtool) to use it through building a custom devtool hook(So react will inject it into enzyme)?

**What is the expected behavior?**

I hope `react-debug-tools` published soon and `overrideHookState` can be included. Or at least I'd like to know if build a custom devtool hook to get `overrideHookState` is safe or not.

I know some people would think it's not a good testing strategy to get / set hook state directly. But I think it's still valuable to be able to do that in some cases.

Also cc @ljharb ",Other
https://github.com/facebook/react/issues/15626,15626,How to handle the form in Reactjs?,[],closed,FALSE,,2,2019-05-12T11:31:21Z,2019-05-13T11:09:46Z,2019-05-13T11:09:46Z,NONE,completed,,"Hello World ,I'm sure you  will be fine 🙂 

ANY ONE TELL ME HOW FORMS WORK IN REACTJS?

When user click on submit button how data display under the form i see from react documentation ,About form less guide me,So any one here for helping me.thank you in advance
",Support
https://github.com/facebook/react/issues/15649,15649,Feature Request: Warnings for missing Aria properties in debug mode,[],closed,FALSE,,5,2019-05-14T16:43:36Z,2019-09-05T10:25:03Z,2019-09-05T10:25:03Z,NONE,completed,,"Currently there are several default behaviors that should have associated aria attributes, for example alt text for `<img>` and `<svg>` or components with certain navigation or mouse event behaviors.

It would be really cool if those conditions that would be pointed out by tools like Lighthouse/WAVE/axe could issue `console.warn` statements on render, where reasonable for non-production builds.  This could guide developers towards at least taking care of a lot of the low hanging fruit in this regard.

Possibly done in conjunction with an `ariaset` property as mentioned in #1259.",Support
https://github.com/facebook/react/issues/15655,15655,"when install React 16.8.6 , Firefox and IE not show project but Chrome show it","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,10,2019-05-15T04:52:11Z,2019-09-03T13:32:13Z,2019-09-03T13:32:13Z,NONE,completed,,"i install react 16.8.6 and run project , chrom show it but firefox and IE not showing!!! , in react 16.8.5 i dont have this problem

firefox error in consol:SyntaxError: missing = in const declaration

IE error SCRIPT1002: Syntax error",Other
https://github.com/facebook/react/issues/15673,15673,Invalid hook call. error when using useState in HOC,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-05-16T17:39:06Z,2019-05-17T03:08:25Z,2019-05-17T03:08:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**

Trying to use state with `useState` hook inside a Higher Order Component results in runtime error:
```
Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.
```
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```ts
const withWrapper = <T extends object>(
  Component: React.ComponentType<Props<T>>
) => {
  const Wrapper: React.FC<Props<AnyIfEmpty<T>>> = props => {
    const [theme, setTheme] = React.useState(props.theme);

    return <Component theme={theme}>{props.children}</Component>;
  };

  Wrapper.displayName = `withWrapper(${Component.displayName})`;

  return Wrapper;
};

export default withWrapper ;
```

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```json
""react"": ""^16.8.6"",
```
",Other
https://github.com/facebook/react/issues/15675,15675,Create HostConfig handler for commitUnmount in react-reconciler,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,4,2019-05-16T23:14:43Z,2020-01-17T08:00:01Z,2020-01-17T08:00:01Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I would like to request a new feature.

**What is the current behavior?**
At the moment there is no way to gain access to the fiber that is unmounting outside of the `onCommitFiberUnmount` hook in React DevTools. Would it be possible to create a new handler that you can pass in your host config that would tap into unmount commits?

```javascript
commitUnmount(node, internalInstanceHandler) {
  // can be a noop by default
}
```

This could be added [where the hook handler is already being called](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberCommitWork.js#L739).

Please let me know if you would consider this. :smile_cat: ",Other
https://github.com/facebook/react/issues/15680,15680,Can we simplify type annotation in line 364?,[],closed,FALSE,,1,2019-05-20T05:01:29Z,2019-05-20T12:08:09Z,2019-05-20T12:08:09Z,NONE,completed,,"https://github.com/facebook/react/blob/31487dd82e82ef62243806b2e76b23a6fb21d0bc/packages/react-reconciler/src/ReactFiberHooks.js#L362-L365


babel outputs same code for  above and
```
 hookTypesDev = 
   current !== null 
     ? (current._debugHookTypes: Array<HookType>)
     : null; 
```
",Other
https://github.com/facebook/react/issues/15684,15684,TypeError: fsevents is not a constructor,[],closed,FALSE,,1,2019-05-20T12:46:32Z,2019-05-20T12:55:04Z,2019-05-20T12:55:04Z,NONE,completed,,"
** When I run *npm start* in a Mac environment, there was an Error：**

**my-app/node_modules/chokidar/lib/fsevents-handler.js:28**

**return (new fsevents(path)).on('fsevent', callback).start();**

**TypeError: fsevents is not a constructor**


**After I commented out this line of code, the program ran. **",Other
https://github.com/facebook/react/issues/15719,15719,React.memo doesn't work as expected in nextjs apps if Provider value changed,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,FALSE,,5,2019-05-23T09:26:18Z,2020-04-18T13:08:52Z,2020-04-18T13:08:52Z,CONTRIBUTOR,completed,,"**bug**

**What is the current behavior?**

I can't reproduce this issue out of nextjs app, but see the code of index page  https://codesandbox.io/s/helloworld-i8wzm

```javascript
import * as React from ""react"";
import Link from ""next/link"";

const Context = React.createContext({});
const TmpProvider = Context.Provider;

const MemoChild = () => {
  const r = React.useContext(Context);
  // commenting line above make memo to work as expected, it never render on click
  return null;
};

const Memo = React.memo(
  () => {
    console.info(""memo render"");
    return <MemoChild />;
  },
  // NEVER UPDATE
  () => true
);

const Test = () => {
  console.info(""test render"");
  return (
    <TmpProvider value={{}}>
      <Link href={{ pathname: ""/"" }}>
        <a>click me to force rerender</a>
      </Link>
      <Memo />
    </TmpProvider>
  );
};

export default Test;

```

On every link click log contains both console.info output

```
test render
memo render
```

But if I comment out this line `  const r = React.useContext(Context);`  at MemoChild
log contains just `test render` on link click as expected.

**What is the expected behavior?**

`React.useContext(Context);` in the child of memoized component must not somehow affect code execution, and the only console output on link click must be
```
test render
```

",Other
https://github.com/facebook/react/issues/15723,15723,Strange onScroll behaviour,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,22,2019-05-23T15:36:52Z,2020-08-09T18:50:34Z,2020-07-08T00:02:13Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Possible bug

**What is the current behavior?**

onScroll callback on parent element fires when children element is scrolled.
Native listener working as expected, thought.

Example with reproduction
https://codesandbox.io/s/kk3th

Just try to scroll little box with items.

**What is the expected behavior?**

I am not sure if this behaviour is correct, but it was unexpected for me, so it might be a bug.
I was not expecting onScroll to fire at all.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

""react"": ""16.8.6""
macOs Mojave 10.14.5

Did not tried any other versions
",Bug
https://github.com/facebook/react/issues/15740,15740,"webview element: ""Warning: Received `true` for a non-boolean attribute `nodeintegration`.""",[],closed,FALSE,,2,2019-05-26T15:38:14Z,2019-05-30T13:58:21Z,2019-05-30T13:58:21Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

I'm using TSX and Electron and using the <webview> element. 

I'm using <webview disablewebsecurity> and it's complaining that this isn't accepted.

This is a supported property.  It's also represented properly in the typescript types for this element.

```
    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
        allowFullScreen?: boolean;
        allowpopups?: boolean;
        autoFocus?: boolean;
        autosize?: boolean;
        blinkfeatures?: string;
        disableblinkfeatures?: string;
        disableguestresize?: boolean;
        disablewebsecurity?: boolean;
        guestinstance?: string;
        httpreferrer?: string;
        nodeintegration?: boolean;
        partition?: string;
        plugins?: boolean;
        preload?: string;
        src?: string;
        useragent?: string;
        webpreferences?: string;
    }
```

```
/home/burton/projects/polar-bookshelf/node_modules/react-dom/cjs/react-dom.development.js:506 Warning: Received `true` for a non-boolean attribute `disablewebsecurity`.

If you want to write it to the DOM, pass a string instead: disablewebsecurity=""true"" or disablewebsecurity={value.toString()}.
    in webview (created by TabBody)
    in TabBody (created by TabPanes)
    in div (created by TabPane)
    in TabPane (created by TabPanes)
    in div (created by TabContent)
    in TabContent (created by TabPanes)
    in TabPanes (created by TabNav)
    in div (created by TabNav)
    in TabNav (created by FakeTabbedBrowser)
    in div (created by FakeTabbedBrowser)
    in FakeTabbedBrowser (created by App)
    in div (created by App)
    in App
```
I just upgraded all my libs to:

 @types/react@16.8.18 @types/react-dom@16.8.4 react@16.8.6 react-dom@16.8.6 

**What is the expected behavior?**

The <webview> should get the attributes I specify.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

@types/react@16.8.18 @types/react-dom@16.8.4 react@16.8.6 react-dom@16.8.6 


... I'm dead in the water on this one so even a workaround would really be appreciated!

I think this is a React issue since its happening at runtime.  The compiler handles it just fine.",Other
https://github.com/facebook/react/issues/15764,15764,DevTools in production environment ,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-05-29T17:56:31Z,2019-07-29T23:36:25Z,2019-07-29T23:34:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
![2019-05-29_13-00](https://user-images.githubusercontent.com/33522235/58580030-d3254200-8211-11e9-882d-85da2664a3b2.png)


**Do you want to request a *feature* or report a *bug*?**
I think the production environment, React Devtools you should not show any information about the state or components. similar to redux Devtools. 
**What is the current behavior?**
Just now I can Edit some information with React DevTools in the production environment

",Other
https://github.com/facebook/react/issues/15774,15774,useCallback doesn't memoize callback in shallow renderer,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":204945357,""node_id"":""MDU6TGFiZWwyMDQ5NDUzNTc="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer"",""name"":""Component: Shallow Renderer"",""color"":""eb6420"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,8,2019-05-30T08:31:32Z,2020-03-18T11:18:54Z,2020-03-18T11:18:53Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

In shallow renderer, The returned callback from `useCallback` is not the same one between two rerendering even though the dependencies are the same. But `useMemo` will work as expected.

For example, the following test won't work:

```js
    function SomeComponent() {
      const noop = React.useCallback(() => {}, []);

      return (
        <div onClick={noop} />
      );
    }

    const shallowRenderer = createRenderer();
    let firstResult = shallowRenderer.render(<SomeComponent />);
    let secondResult = shallowRenderer.render(<SomeComponent />);

    expect(firstResult).toEqual(secondResult);
```

If `useCallback` returned the same callback between two rendering (I think) the assertion should pass.

but the same (almost) logic will work with `useMemo`, in the shallow renderer test suite (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/__tests__/ReactShallowRendererHooks-test.js#L273-L291).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I created a branch in https://github.com/chenesan/react/tree/usecallback-not-work-properly-in-shallow-renderer and you can run the failed shallow renderer test in https://github.com/chenesan/react/commit/b2dff28909247342cfcb9ced2fbe24a0f9ca08b7#diff-d9a78422c03941578ae9ba487e8132cb .

**What is the expected behavior?**

`useCallback` should return the memoized callback when the dependencies unchanged even in shallow renderer.

I tried to look into this and I found out that in shallow renderer `useCallback` just returns the original callback argument (See https://github.com/facebook/react/blob/master/packages/react-test-renderer/src/ReactShallowRenderer.js#L365-L371) but `useMemo` will compare the dependencies between rendering. I'm not sure if it's intended (So it's expected that `useCallback` will not memoize callback in shallow renderer). If it's triaged as a bug I'm glad to send a pr for this :)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

react@16.8.6",Bug
https://github.com/facebook/react/issues/15777,15777,React can import thirdpart react component from cdn?,[],closed,FALSE,,1,2019-05-30T11:38:26Z,2019-06-03T01:28:33Z,2019-06-03T01:28:33Z,NONE,completed,,"React can import third-part react component from cdn?
Like `import('https://domain.com/components/index.js')`",Other
https://github.com/facebook/react/issues/15787,15787,Unknown event handler property `onBeforePaste`. It will be ignored.,[],closed,FALSE,,11,2019-05-31T04:01:30Z,2020-04-02T02:33:19Z,2020-04-01T22:40:22Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Both..?

**What is the current behavior?**

Cut down example:
```jsx
<div onBeforePaste={event => console.warn('onBeforePaste', event)} />
```

According to https://github.com/facebook/react/issues/140 I should be able to just use a custom attribute since `16.x`.

But that doesn't seem to be the case:
```
Warning: Unknown event handler property `onBeforePaste`. It will be ignored.
    in div (at MarkdownField.js:122)
```

My guess is I am hitting the following clause in https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#changes-in-detail:
> Note: attributes starting with on are not passed through as an exception because this could become a potential security hole.

So my question becomes.. how can I circumvent that, when I explicitly want to be able to set a handler?

**Context:** due to 'legacy IE reasons' surrounding paste/file attachments, it seems necessary to use `onBeforePaste` to 'coerce' it into allowing images to be pasted into a textarea:
- https://technet.microsoft.com/en-us/aa743278%28v=vs.71%29?f=255&MSPPError=-2147217396

**What is the expected behavior?**

Ability to use `onBeforePaste` with my custom handler.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
`16.8.6`",Other
https://github.com/facebook/react/issues/15815,15815,`useEffect` doesn't work for `keydown` event listener,[],closed,FALSE,,4,2019-06-04T11:24:10Z,2021-02-04T02:38:45Z,2019-06-04T23:18:51Z,NONE,completed,,"I have a stateless component which needs to listen on keyboard event. It adds keydown listener when the component is mounted and remove it when the component is unmounted. There is a state test is boolean value. It is set to true when the component is mounted. But in the keydown event listener, its value always false. It looks like the listener doesn't take the state reference. What's wrong with my code?

```
const { useEffect, useState } = React;


const Comp = () => {
  const [test, setTest] = useState(false);
  const keyPressHandler = (e) => {
    setTest(!test);
    console.log(test);
  }
  useEffect(() => {
    setTest(true);
    window.addEventListener('keydown', keyPressHandler);
    return () => {
      window.removeEventListener('keydown', keyPressHandler);
    };
  }, []);

  return (
    <div className=""test"">
      hello {test + """"}
    </div>
  );
};
```

A live example can be found at: https://codepen.io/zhaoyi0113/pen/mYozVp",Support
https://github.com/facebook/react/issues/15830,15830,dispatchEvent customEvent of web components not working,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,16,2019-06-06T03:05:05Z,2022-04-21T11:12:17Z,2020-01-17T06:59:57Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

https://github.com/Tencent/omi/blob/master/packages/omim/test-react/src/MyComponent.js

**Online Demo**

https://tencent.github.io/omi/packages/omim/test-react/build/index.html

**What is the expected behavior?**

Fire all the custom events 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

All.

I found that dispatchEvent actually executed, except that the element was not bound to the event (such as onAbc) or bound to the document (such as onChange).

Can give a grammatical sugar to bind custom events, otherwise it is not friendly to web compoents integration, such as https://tencent.github.io/omi/packages/omim/docs/build/index.html

------- update --------

I changed it to okay, but it's not elegant.

![844D4012FD49F553DDD28EC252BBBDAC](https://user-images.githubusercontent.com/7917954/59006174-3129d900-8853-11e9-8900-198437424fca.jpg)

------- update --------

I tested dispatchEvent customEvent in other frameworks：


| **Framework**                         | **Result**                           |
| ------------------------------- | ----------------------------------- |
| Preact |   working|
|React| not working|
|Vue| working|
| Angular | working|
|Omi|working|

Thanks.",Support
https://github.com/facebook/react/issues/15835,15835,Not able to import json files in TSX files,[],closed,FALSE,,2,2019-06-07T10:18:07Z,2019-06-11T00:43:26Z,2019-06-11T00:43:19Z,NONE,completed,,"I have tried to import the json file in my react application(App.tsx)

[App.tsx

import * as currencies from './currencies.json';](url)

My Json file will look like below structure:

[{
  ""main"": {
     ""numbers"": {
        ""currencies"": {
         }
      }
   }
}
](url)
While running the application, it throws the below error

(1,1): unused expression, expected an assignment or function call

After further analysis, i have added the typings.d.ts file within src folder

[declare module ""*.json"" {
    const value: any;
    export default value;
}](url)

Please suggest your solution to resolve this issue",Other
https://github.com/facebook/react/issues/15842,15842,0,[],closed,FALSE,,0,2019-06-08T03:00:04Z,2019-06-08T03:00:23Z,2019-06-08T03:00:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/15856,15856,No warning or Error on component mounting itself,[],closed,FALSE,,1,2019-06-11T01:42:55Z,2019-09-04T11:13:51Z,2019-09-04T11:13:51Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When mounting a component within itself, there is no warning or error, and leads to an infinite loop until the browser tab crashes. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
const Card = (
  <Card>test</Card>
);

<Card />
```

**What is the expected behavior?**
warning in dev tools or throws an error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""^16.8.1"",
",Other
https://github.com/facebook/react/issues/15859,15859,ReactDOM.render should flush useEffect queue,[],closed,FALSE,,1,2019-06-11T08:53:27Z,2019-06-11T23:06:42Z,2019-06-11T23:06:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a possible bug

**What is the current behavior?**

Effects queued using `useEffect` are not executed synchronously by `ReactDOM.render`. This means it is impossible to execute something after the app is fully mounted.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Example showing possibly incorrect behavior: https://codesandbox.io/s/adoring-cloud-q4b17

Log order is 
>before render 
>render 
>callback 
>after render 
>effect

**What is the expected behavior?**

I'm not sure if this is intentional or not, but the behavior I'd expect is that all effects are run before control is returned from `ReactDOM.render`. This would match the behavior of `componentDidMount`, which does run before control is returned. Example: https://codesandbox.io/s/intelligent-browser-g6n2n

Log order is
>before render 
>render 
>mount 
>callback 
>after render

The concrete example I have is that I subscribe to a store, and then immediately update the store. This change triggers other external effects, so it is necessary that it happens after mount. Because the subscribe-effect has not been run, the app never updates. It can be fixed by subscribing with `useLayoutEffect` instead of `useEffect`, but this seems to run counter to the intention of the hooks.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Replicated in React/ReactDOM 16.8.4 and 16.8.6
",Support
https://github.com/facebook/react/issues/15864,15864,Try/catch picking up errors when it should be done,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2019-06-12T07:23:19Z,2020-01-17T06:59:58Z,2020-01-17T06:59:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Errors thrown in render are being picked up by try/catch that should be done

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I made an example simulating a network call in a try/catch pattern.
https://codesandbox.io/s/dazzling-brown-jyz3n

**What is the expected behavior?**
I expect the app to crash where the error happens and not in the previous try / catch that should be done.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested in 16.8.3 and 16.8.6. Not found it working anywhere as of yet.",Support
https://github.com/facebook/react/issues/15886,15886,"react-test-renderer returns TypeError: (0 , _typeof4.default) is not a function",[],closed,FALSE,,1,2019-06-14T17:46:18Z,2019-09-03T12:19:02Z,2019-09-03T12:19:02Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
It is a bug report

**What is the current behavior?**
While running my jest tests I am facing the following problem:
```
 FAIL  src/components/Campaigns/CampaignForm/__tests__/CampaignForm.test.js
 Test suite failed to run

    TypeError: (0 , _typeof4.default) is not a function

      1 | import React from 'react'
      2 | import renderer from 'react-test-renderer'
        | ^
```
I have examined the stack.  
```
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:2:39)
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:15:39)
      at node_modules/react-test-renderer/node_modules/scheduler/cjs/scheduler.development.js:61:31
```

If I open the files and see what is at the line numbers on the new files; this is what I have;
```
      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:2:39)
function _typeof2(obj) {
  if (typeof Symbol === ""function"" && typeof Symbol.iterator === ""symbol"") {
    _typeof2 = function _typeof2(obj) {

      at _typeof2 (node_modules/@babel/runtime/helpers/typeof.js:15:39)
function _typeof(obj) {
  if (typeof Symbol === ""function"" && _typeof2(Symbol.iterator) === ""symbol"") {

      at node_modules/react-test-renderer/node_modules/scheduler/cjs/scheduler.development.js:61:31
var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
```
So the react-test-renderer typeof call is getting redirected (possibly by babel) to a babel helper function for typeof, which is giving the error.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
It should testing my jest tests.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
I am running this on mac on the command line.  Using npm run test which defaults to running jest in package.json.  I am using babel 7.0.0 version.  Any guidance on how I might debug this further would be great.  Happy to debug but would need some pointers on where to look for the issue.  I searched for typeof4 in @babel but there is no string.  
Very superficially, (and I could be wrong) I suspect that babel is transpiling the regenerator runtime and when it does it ends up on this problem.
Thanks for any help that will unblock me.

",Other
https://github.com/facebook/react/issues/15893,15893,Feature Request: Keyed Hooks,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2019-06-15T00:55:47Z,2020-04-17T01:46:23Z,2020-04-17T01:46:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

*Do you want to request a feature or report a bug?* **Request a Feature**

# Previous Issues

""Keys for hooks"" was previously proposed in #14998 and closed without much discussion.

See below (""Use Cases"") for particular use cases of keyed hooks, and why they provide a better, more-general solution than other approaches today.

# Background: the rules of hooks

The [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html) outline how React hooks are allowed to be called. The rules are the following:

- Hooks can only be called *at the top level* from custom hooks or React components
- The same hooks, in the same order, must be called from any component every time it renders (or every time some custom hook is called)

There are several good reasons for these rules:

1. These rules enable the *implementation* of hooks to be simple (a global, incrementing counter identifies the state for each primitive hook).
2. The rules enable the *syntax* of hooks to be simple (a sequence of function calls, in order, without explicitly threading state between them, and without needing to arrange them into e.g. an array)
3. You can reason about hooks *independently* since they don't depend on what comes before / after them: this is what allows you to reason about custom hooks in a way that ignores their implementation
4. The rules can be easily checked by static linters

The third rule is important because we want to be able to provide custom hooks whose implementations are ""black boxes"": we don't need to know how a hook works to know what it does. The only requirement is when we call custom hooks, we also follow the Rules. It's important that this change (or other changes to hooks; or the introduction of new primitive hooks) do not cause it to break.

The main limitation of these rules is that hooks must be arranged in a line. We'd like to be able to generalize to support *trees* of hooks. In particular, just like React identifies the state for a component by its location within its parents component tree, we'd like to be able to ""relax"" the rules of hooks enough that we can call hooks *conditionally or variably* without breaking any of (1) or (2) or (3) or (4).

# Feature Overview

Allow hooks to be **grouped and keyed**.

The example below demonstrates correct usage of the proposed API:

```js
import * as React from 'react';

function useLookupMultiple(letters) {
    const lookups = React.useGroup(keyer => {
        const values = [];

        const valA = keyer('A', () => {
            return useLookup('A');
        });
        values.push(valA);


        for (const letter of letters) {
            const valLetter = keyer(letter, () => {
                 return useLookup(letter);
            });
            values.push(valLetter);
        }

        const valB = keyer('B', () => {
            return useLookup('B');
        });
        values.push(valB);

        return values;
    });

    return lookups;
}
```

## New Rules of Hooks

- Hooks still need to follow the old *rules of hooks*
- `useGroup` is a new, primitive hook which must also obey the existing rules of hooks
- *but* hooks can be called from one *new* place: the `keyer` function callback obtained from `useGroup`

We'll now go through the 4 properties outlined above and see that they still apply.

## Property 1: Ease of Implementation

Today, React essentially stores an array of ""memory cells"" for primitive hooks. A global counter is used to identify which cell is the ""current"" one, and each primitive hook increments this counter.

To implement `useGroup`, only a small detour is required:

- The `useGroup` memory cell essentially holds the following state: `{key1: memoryCellArray1, key2: memoryCellArray2, key3: memoryCellArray3}`.
- The passed `keyer` callback first replaces the global memory cell array with the one associated with the provided key; then it calls its passed callback; then it reverts the global memory cell array so that the group can continue

## Property 2: Ease of Syntax

The existing hook syntax is unchanged. The new group syntax is somewhat unwieldier, but the basic concepts still apply: regular function calls (albeit inside callbacks similar to `useEffect` or `useReducer` although run synchronously within the render like the latter rather than the former). The clumsier syntax is actually a benefit, because this feature should be seldom used, except for making certain custom hooks more powerful (see below for the intended use-cases).

## Property 3: Independence

Hooks remain independent from one another. Moreover, since hooks are clearly *grouped* as well as simply keyed, it's easy to tell the scope of keys; in particular, there's no (sensible) way to split a keyed group of hooks across multiple custom hooks (the groups form a clear hierarchy bounded by custom hook scopes), so they can still be understood completely independently.

## Property 4: Easy Linting

Linters would need to be updated in order to support this feature. Luckily, it's fairly easy! The same rules of hooks apply, except that hooks may also be called (at the top level of) the `keyer` callback argument obtained from `React.useGroup`.

# Use Case: The Problem Today

The simplest use-case that demonstrates why keyed hooks would be useful is outlined here. The [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API allows JavaScript to stream events. We can write a nice custom hook to subscribe to an endpoint in some component:

```js
export function useEventSourceListener(url, listenCallback) {
  const listenCallbackRef = React.useRef(listenCallback);

  React.useEffect(() => {
    // On re-render, the listener should be updated.
    listenCallbackRef.current = listenCallback;
  });

  React.useEffect(() => {
    const source = new EventSource(url);
    source.onmessage = e => {
      listenCallbackRef.current(e.data);
    };
    return () => {
      source.close();
    };
  }, [url]);
}
```

Using it is pretty straight-forward:

```js
const ExampleComponent = ({id}) => {
    const [messages, setMessages] = React.useState([]);

    useEventSourceListener(`https://example.com/stream/${id}`, newMessage => {
        setMessages(current => current.concat([newMessage]);
    });

    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;
}
```

This hook worked great for me, until I realized that a particular event stream that I needed was sharded across multiple URLs!

```js
const ExampleComponent = ({id}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    useEventSourceListener(`https://example.com/stream/${id}/shard-1`, onNewMessage);
    useEventSourceListener(`https://example.com/stream/${id}/shard-2`, onNewMessage);

    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;  
}
```

And now *this* works until it turns out that there are a dynamic number of URLs depending on `id`. Once that happens, you *can't* write this using React unless you're willing to very carefully violate the rules of hooks and also give up on certain maintainability benefits. For example, the following solution ""obeys the rules of hooks"" as far as React can tell at runtime (although it will fail decent lint checks):

```js
const ExampleComponent = ({id, shards}) => {
    return <ExampleComponentInternal key={shards.length} id={id} shards={shards} />
};

const ExampleComponentInternal = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    for (const shard of shards) {
        useEventSourceListener(`https://example.com/stream/${id}/${shard}`, onNewMessage);
    }
    return <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>;  
}
```

of course, this solution has a large number of problems:

- if the number of shards changes, then any other state (e.g. forms) stored inside the component get thrown away, since the `key` changed
- if the shards get reordered, then the connections will be dropped and re-instantiated, since each `useEventSourceListener` call only knows about itself!

These problems can be remedied in turn by the following solution:

```js
const ListenerComponent = ({url, onNewMessage}) => {
    useEventSourceListener(url, onNewMessage);
    return null;
}

const ExampleComponent = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    for (const shard of shards) {
        useEventSourceListener(, onNewMessage);
    }
    return <>
        {shards.map(shard => <ListenerComponent url={`https://example.com/stream/${id}/${shard}`} key={shard} />)}
        <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>
    </>;
}
```

This solution finally works in React today. Unfortunately, that stops being true if instead `useEventSourceListener` returns any useful value: there's no way to (synchronously) pass a returned value up from those `ListenerComponent`s into `ExampleComponent`. Using refs and `useLayoutEffect` you can kinda fake this, but in particular there's no way to pass those values into subsequent hooks, because hooks can't be called inside `useEffect` or `useLayoutEffect` callbacks.


# Use Case: The Solution

Using keyed hooks, we simply get:

```js
const ExampleComponent = ({id, shards}) => {
    const [messages, setMessages] = React.useState([]);

    const onNewMessage = newMessage => {
        setMessages(current => current.concat([newMessage]);
    };

    React.useGroup(keyer => {
        for (const shard of shards) {
            keyer(shard, () => {
                useEventSourceListener(`https://example.com/stream/${id}/${shard}`, onNewMessage);
           });
        }
    });
    return <>
        <ul>{messages.map((msg, index) => <li key={index}>{msg}</li>)}</ul>
    </>;
}
```

Just like components, we only need to distinguish our hooks calls among *siblings* with `keyer`. Since `useEventSourceListener` is itself already robust against changes to the URL, we don't need to include `id` inside `keyer`'s key argument.

# General Rationale

The general rationale behind this approach is to provide better composition of *custom* hooks. One workaround for the above approach is to create a new `useMultipleEventSourceListener(urls, callback)`, but this approach has several major drawbacks:

- First, the implementation is very complicated. The main appeal of hooks like `useEffect` is that they encapsulate all aspects of one feature: initialization and cleanup go together. Implementing `useMultipleEventSourceListener`, while possible, doesn't let us take advantage of this because we're stuck with doing all initialization / teardown / diffing of values ourselves, since React can no longer do it for us.

- Second, it's not compositional. Why *should* I have to *re-implement* a complex function when a simple loop ought to suffice? In particular, it's at least plausible to implement `useMultipleEventSourceListener` because here I've written the original myself, but if the custom hook comes from some third party then it's no longer feasible to fork and implement a ""multiple"" version myself

- Lastly, it makes nesting custom hooks inside each other non-compositional. Even if I implement and maintain a `useMultipleEventSourceListener`, if I want to call *that* hook multiple times, I'm out of luck; instead I need Consider the case where I find I have multiple calls to `useMultipleEventSourceListener`; in order to be able to handle *that*, I would need to be able to 

# Semantics in Detail

I glossed over several minor semantic details that need to be covered:

## What happens to `useState`/`useReducer` when their keys change?

If the key is ""new"" (i.e. **was not present** on the *previous* render) then the state is copied from the ""initial"" argument.

If the key is not ""new"" (i.e. it **was present** on the *previous* render) then the state is whatever was previously stored.

Basically, if a key disappears and reappears later, the old state was lost. This is just like how components with `key` props behave (whether they're using class `state` or functional `useState`).

## What happens to `useEffect`/`useLayoutEffect` when keys change?

If the key ceases to exist, then the cleanup code gets called (just like if the component unmounted).

This is simple, consistent, and easily understood. Again, it's just like putting the hooks inside children with `key` props that disappear. If hooks work in those situations, they'll likely work here as well.

## What happens to `useRef` when keys change?

The reference is fresh every time the key is ""new"". In particular, if a key disappears and reappears, the old `current` value is lost.

## What happens to `useContext`?

Nothing, `useContext` doesn't actually need memory cells at all.

## What happens to `useDebugValue`?

The debug value can be listed alongside the key which it lies under.

## What happens if the order of keys changes?

Not much - since hooks are independent of each other (property 3 above) it doesn't (or shouldn't) matter what order they're called as long as the memory cell array is updated appropriately. The call order should always match the order they're called inside `useGroup`.

## What happens if the same key is used twice?

There are two obvious approaches:

- Make this an error (or an error-in-debug mode, much like having multiple children with the same `key` prop today)
- Make subsequent calls a no-op

The latter option is occasionally more convenient but potentially very unsafe. The former is much better (especially because if it errors today, it can be changed to have alternative behavior in the future).

## What happens if you call hooks inside `useGroup` but not inside a `keyer` callback?

This causes an implementation-defined error, just like other misuses of keys or hooks today. The rules of hooks let you call hooks inside `keyer` callbacks, but not inside the `useGroup` callback.

## What happens if `keyer` escapes from the `useGroup` callback and gets called later?

This causes a best-effort implementation-defined error, just like other misuses of hooks today (e.g. as if you call `useState` inside of an event callback).

# Conclusion

React hooks are really nice 🥇. There's just a few edge cases like the above where they don't quite cut it - providing keyed hooks would just make writing and using custom hooks that much nicer, and solve tons of issues that are currently just-out-of-reach in maintainable, easily-understood ways.",Feature
https://github.com/facebook/react/issues/15895,15895,Release a patch version with the new warn & error utils?,[],closed,FALSE,,1,2019-06-15T20:43:08Z,2019-09-03T11:42:49Z,2019-09-03T11:42:49Z,CONTRIBUTOR,completed,,We'd [love to use these in styled-components](https://github.com/styled-components/styled-components/issues/2584) :-),Other
https://github.com/facebook/react/issues/15948,15948,Problem with refreshing initial state when props change,[],closed,FALSE,,2,2019-06-21T09:23:12Z,2019-06-23T18:53:24Z,2019-06-23T18:48:40Z,NONE,completed,,"**My custom useReducer code**
```javascript
import { useReducer } from 'react'

interface ReturnType extends StateType {
  clear: () => void
  set: (input: File) => void
}
type ValidatorType = (input: File) => { error: boolean; message: string }
type InitializerType = (input?: File, validator?: ValidatorType) => StateType
type ReducerType = (input?: File, validator?: ValidatorType) => ReturnType
type StateType = {
  value?: File
  error: boolean
  message: string
  disabled: boolean
}
type ActionType = {
  type: string
  value?: File
}

const DEFAULT_VALIDATOR: ValidatorType = input => {
  if (typeof input !== 'object') return { error: true, message: 'Invalid file' }
  if (!('size' in input) || input.size > 500000) return { error: true, message: 'File too big (max 500kb)' }
  return { error: false, message: '' }
}
const SET: string = 'set'
const CLEAR: string = 'clear'

const setInitialState: InitializerType = (input = undefined, validator = DEFAULT_VALIDATOR) => {
  const { error, message } = input ? validator(input) : { error: false, message: '' }
  return {
    value: error ? undefined : input,
    error,
    message,
    disabled: !!error || !input
  }
}

const useImageState: ReducerType = (initial = undefined, validator = DEFAULT_VALIDATOR) => {
  const reducer = (state: StateType, action: ActionType): StateType => {
    switch (action.type) {
      case SET:
        const { error, message } = action.value ? validator(action.value) : { error: false, message: '' }
        return {
          value: error ? undefined : action.value,
          error,
          message,
          disabled: !!error || !action.value
        }
      case CLEAR:
        return {
          value: undefined,
          error: false,
          message: '',
          disabled: true
        }
      default:
        return state
    }
  }
  const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))
  const set = (input: File): void => dispatch({ type: SET, value: input })
  const clear = (): void => dispatch({ type: CLEAR })
  return { ...state, clear, set }
}

export default useImageState
```

**Usage example**
```javascript
export const SomeComponent = props => {
  const image = useImageState(props.initialImage)
  ...
}
```

**What happens**
When props change and initialImage is different, the custom useReducer is invoked twice:
- first with `undefined` as initialImage and returns `state.value = undefined` as expected
- second with `object` (proper File type) including all data needed but it still returns `state.value = undefined`. The `setInitialState` from the code above returns valid state with all the data but on this line => ` const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))` the state is still `{value:undefined, ...}`

**Expected behaviour**
I want the reducer to change its initial state properly when parent's props change

**My temporary solution**
In the `SomeComponent` i introduced `useEffect` with code: 
```javascript
useEffect(() => {
    if (props.initialImage) image.set(props.initialImage)
  }, [props.initialImage])
```
and it changed the state but the question is: 
Should i do it like that or should `useReducer` change its state when the initial value changes ",Other
https://github.com/facebook/react/issues/15958,15958,video element not rendering react chromium ubuntu,[],closed,FALSE,,1,2019-06-22T01:19:44Z,2020-01-20T05:12:48Z,2019-06-23T05:56:48Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Yes.

**What is the current behavior?**

I have a problem with react not showing the video element. It shows it in the html document but it does not appear in the screen. If I use controls attribute the frame of the video will appear (the video player with controls) but the content will not be displayed (the video file). If I do not use the controls attribute it does not appears in the screen at all.

I have tested the video file within a plain html website and it works perfectly.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
The video should appear in the screen.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

  ""dependencies"": {
    ""react"": ""^16.8.6"",
    ""react-dom"": ""^16.8.6"",
    ""react-scripts"": ""3.0.1""
  }

I have used npx create-react-app and I'm using ubuntu, chromium browser.",Other
https://github.com/facebook/react/issues/15970,15970,16.8.6: Invariant Violation: Expected subtree parent to be a mounted class component,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,14,2019-06-24T01:59:10Z,2020-12-02T23:41:22Z,2019-06-25T18:34:57Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Reporting a bug

**What is the current behavior?**

We received a bug report from Rollbar (what we use to catch and report JS bugs).

```
Invariant Violation: Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.
1 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 13 col 313 in r
'use strict';var aa=require(""react""),n=require(""object-assign""),r=require(""scheduler"");function b...
2 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 14 col 166 in o
function x(a){for(var b=arguments.length-1,c=""https://reactjs.org/docs/error-decoder.html?invaria...
3 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 252 col 75 in Yr
function Ji(a,b,c,d,e){var f=b.current;a:if(c){c=c._reactInternalFiber;b:{2===ed(c)&&1===c.tag?vo...
4 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 253 col 85 in Kr
of();pf(f,e);qf(f,d);return d}function Ki(a,b,c,d){var e=b.current,f=lf();e=mf(f,e);return Ji(a,b...
5 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 261 col 426 in eo.legacy_renderSubtreeIntoContainer
Pi.prototype.render=function(a,b){var c=this._internalRoot,d=new Oi;b=void 0===b?null:b;null!==b&...
6 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 264 col 342 in [anonymous]
function Si(a,b,c,d,e){var f=c._reactRootContainer;if(f){if(""function""===typeof e){var g=e;e=func...
7 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 251 col 66 in Ur
function Hi(a,b){if(X&&!ri){ri=!0;try{return a(b)}finally{ri=!1}}return a(b)}function Ii(a,b,c){X...
8 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 264 col 328 in ro
function Si(a,b,c,d,e){var f=c._reactRootContainer;if(f){if(""function""===typeof e){var g=e;e=func...
9 File ""webpack:///./~/react-dom/cjs/react-dom.production.min.js"" line 267 col 16 in Object.unstable_renderSubtreeIntoContainer
x(""38""):void 0;return Si(a,b,c,!1,d)},unmountComponentAtNode:function(a){Qi(a)?void 0:x(""40"");ret...
10 File ""webpack:///./~/ag-grid-react/lib/legacyReactComponent.js"" line 66 col 1 in t.createReactComponentLegacy
ReactDOM.unstable_renderSubtreeIntoContainer(this.parentComponent, ReactComponent, th...
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

Unfortunately we do not know the user's actions beyond which page of our website they were viewing at the time of the error.

**What is the expected behavior?**

There should be no bug.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.8.6
OS: MacOS 10.13.6
Browser: Chrome 74.0.3729",Other
https://github.com/facebook/react/issues/15985,15985,Fragment will throw an error during unmount if it’s content is edited outside react,[],closed,FALSE,,4,2019-06-25T12:25:40Z,2019-09-03T13:02:02Z,2019-09-03T11:36:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If direct child node of fragment was replaced by other node not created by react — react will throw `Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.` when Fragment will be unmounted

**Smallest reproduction case:**
https://codesandbox.io/s/react-replace-element-fragment-error-0rkqw
Second and fourth buttons will produce error on second click.
What’s strange that if you’ll delete the content in fragment in content editable div (button 5) — it will not throw error.

**What is the expected behavior?**
React not throwing error. Maybe warning?
Why? because any browser extension in any browser can replace any node and this will lead to broken application.
Otherwise documentation should be improved and state clearly that fragment is unsafe to use if there is a chance of third party DOM modification. (I understand why it is happening in the first place, but not agree that it should).
Also it would be great to include DOM path into original error if possible, because for example we create captured this error using sentry and it is unclear where it is happening and it’s quite hard to improve the situation.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.3, no, I think it was broken all along",Support
https://github.com/facebook/react/issues/15994,15994,useEffect issue in production mode,[],closed,FALSE,,2,2019-06-26T09:23:31Z,2019-07-01T11:42:37Z,2019-07-01T11:42:37Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Report a bug.
**What is the current behavior?**
I use ""useEffect"" in my code as below:
![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)
In development mode, everything is correct, but in production mode, we will get this error:
![image](https://user-images.githubusercontent.com/17432911/60167189-27353d80-9835-11e9-855c-5a75158278cc.png)
I guess useEffect doesn't check whether the returned value is a function when unmounted in production mode, so I modified this structure as below and it works fine both in development and production mode.
![image](https://user-images.githubusercontent.com/17432911/60167476-c0fcea80-9835-11e9-814d-b63561863db3.png)

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Above description.
**What is the expected behavior?**
in production, when we use this structure, we should get right behavior as same as development mode:
![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
""react"": ""16.8.6"",
""react-dom"": ""16.8.6""",Other
https://github.com/facebook/react/issues/16006,16006,[eslint-plugin-react-hooks]: auto-fix may crash app when deps is array/object types,[],closed,FALSE,,5,2019-06-27T04:53:35Z,2020-02-17T20:36:00Z,2019-11-15T00:42:06Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**

before run lint, my code is

```js
const App = () => {
  const [options, setOptions] = useState([]);
  const [includesA, setIncludesA] = useState(false);

  const optionCodes = options.map(({ value }) => value);

  useEffect(() => {
    if (optionCodes.includes('A')) {
      setIncludesA(true);
    }
  }, [optionCodes.join(',')]); // transform array to string for compare 

  return <div onClick={() => setOptions([{ value: 'A' }])}></div>;
};

```
after 'eslint --fix'

```js

const App = () => {
  const [options, setOptions] = useState([]);
  const [includesA, setIncludesA] = useState(false);

  const optionCodes = options.map(({ value }) => value);

  useEffect(() => {
    if (optionCodes.includes('A')) {
      setIncludesA(true);
    }
  }, [optionCodes]); // optionCodes.join(',') was replaced ! 

  return <div onClick={() => setOptions([{ value: 'A' }])}></div>;
};
```
The original code works fine and after 'eslint --fix' it just crashed cuz `optionCodes` **is an array** created in render function, the effect runs every time and crash my app with error :

> react-dom.development.js:55 Uncaught Invariant Violation: Maximum update depth exceeded.

I've also notice this rule fix will add other params used by effect function to deps automatically. Like

```js
// original code
const {id} = props
useEffect(()=> {
  console.log(id)
},[])

// after fix
const {id} = props
useEffect(()=> {
  console.log(id)
}, [id]) // id has been add to deps
```


**What is the expected behavior?**

For 'eslint --fix', what we expect is 'try to fix lint error automatically and **SAFELY**', SAFELY means **DO NOT change my code logic**, run 'eslint --fix' should never change your design or crash your app .

It would be better to tell developers to fix the deps by lint message, not auto fix it in dangerous way.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

eslint-plugin-react-hooks@1.6.1",Bug
https://github.com/facebook/react/issues/16018,16018,"useEffect nested under the suspense and lazy, the second empty array parameter does not work",[],closed,FALSE,,2,2019-06-29T02:13:01Z,2019-06-29T13:40:51Z,2019-06-29T13:40:50Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Maybe bug?

**What is the current behavior?**
useEffect nested under the suspense and lazy, the second empty array parameter does not work
```js
import React, { useEffect } from 'react';
function Loader(props){
    const Component = lazy(() => {
        useEffect(() => {
            // fetchData and then update store
        }, []); // [] does not work. it will always fetchData when component rerender, but not just once.
    });
    return <Suspense fallback={<div>Loading...</div>}>
        <Component />
    </Suspense>
}
```

**What is the expected behavior?**
When useEffect nested under the suspense and lazy, the second empty array parameter does not work.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
`""react"": ""^16.5.2""`",Support
https://github.com/facebook/react/issues/16045,16045,Keep getting `TypeError: Cannot read property 'scrollTop' of null` in a custom hook...,[],closed,FALSE,,10,2019-07-03T07:42:21Z,2021-07-16T03:35:44Z,2019-07-03T17:20:36Z,NONE,completed,,"I made a hook to get the scroll position of a component, like so:

```js
function useScrollPosition() {

  function getScroll() {
    return {
      x: document.getElementById('ContentContainer').scrollTop,
      y: document.getElementById('ContentContainer').scrollLeft
    }
  }

  const [scrollPosition, setScrollPosition] = useState(getScroll)

  useEffect(() => {
    
    function handleScroll() {
      setScrollPosition(getScroll())
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, []) // Empty array ensures that effect is only run on mount and unmount

  return scrollPosition
}
```

...and implemented it in the same file, like so:

```jsx
const ContentContainer = (props) => {

  const scroll = useScrollPosition();

  return (
    <Main id='ContentContainer'>
      <ScrollInfo>
        Vertical position: {scroll.x}px / Horizontal Position: {scroll.y}px
      </ScrollInfo>
      {props.children}
    </Main>
  )
}

export default ContentContainer
```

...and i keep getting the same error:

<img width=""797"" alt=""Screenshot 2019-07-03 00 38 46"" src=""https://user-images.githubusercontent.com/7884263/60572670-f4a2ad80-9d2a-11e9-8162-d4fe1c973f87.png"">

If I disable the hook and the app runs properly, I can then find the scroll position in the console just fine.

Any thoughts as to why I might be getting `null` back for something that clearly isn't `null` when the app loads without this hook enabled?",Support
https://github.com/facebook/react/issues/16069,16069,Better prop types warnigs,[],closed,FALSE,,1,2019-07-05T12:23:18Z,2019-07-06T05:50:58Z,2019-07-06T05:50:58Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Request a feature

**What is the current behavior?**
React prop types warning doesn't reveal info on the component's instance

**What is the expected behavior?**
Print also the component's props

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
N/A

The current warnings point the developer only to the source code, and it would be AMAZING if we'll easily see which component instance caused the warnings. Consider a list with hundreds of items, each rendering a component. ATM there's no convenient way to track down the renegade instance.

So instead of the current behavior:

![image](https://user-images.githubusercontent.com/6963212/60722000-479d8000-9f38-11e9-9295-a113dbac079d.png)

Also add:

```
index.js:1375 Warning: Failed prop type: The prop `latitude` is marked as required in `RestaurantListItem`, but its value is `null`.

RestaurantListItem's instance has the following props: {OBJECT_OF_PROPS_THAT_OPENS_ON_CLICK}
```

I currently find myself many times having to temporary do this in different components.

It seems to me like a very easy thing to add, at least for development build.

Thoughts?

I can take a swing at it with some guidance (I'd love to dip my toes in React's code)",Other
https://github.com/facebook/react/issues/16070,16070,prop-types not work save child please,[],closed,FALSE,,2,2019-07-06T01:42:30Z,2019-09-03T11:23:44Z,2019-09-03T11:23:44Z,NONE,completed,,"I use prop-types package . want to validate my props, i transmit a error type of prop but prop-types not work.

MACOS
react 16.8.6
react-dom 16.8.6
prop-types 15.5.7
redux 4.0.1
react-redux 2.3.0


```
import React from 'react';
import { Button, Icon } from 'antd';
import PropTypes from 'prop-types';

const PageHeader = ({isUnflod, showFilterPanel, title}) => (
    <>
        <div class='page-title'>{title}</div>
        <div class='page-header-base-button'>
            <Button className='left-button' type='primary'>添加</Button>
            <Button type='default' onClick={() => showFilterPanel(!isUnflod)}>
                筛选<Icon type={isUnflod ? 'up' : 'down'} />
            </Button>
        </div>
    </>
)

PageHeader.propTypes = {
    title: PropTypes.number,
    isUnflod: PropTypes.bool.isRequired,
    showFilterPanel: PropTypes.func.isRequired
}

export default PageHeader;
```
```
const Vehicle = ({isUnflod, showFilterPanel, pagination}) => (
    <>
        <PageHeader title='车辆管理' isUnflod={isUnflod} showFilterPanel={showFilterPanel} />
        {
            isUnflod ? <VehicleFilterPanel /> : null
        }
    </>
)
```",Support
https://github.com/facebook/react/issues/16073,16073,Issues regarding resetting the initial state,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,2,2019-07-06T21:03:26Z,2020-01-17T07:00:00Z,2020-01-17T07:00:00Z,NONE,completed,,"I have the following hook:

```jsx
function usePromise ( promise ) {

  let [result, setResult] = useState ({ loading: true });

  useMemo ( () => {

    result = { loading: true };
    setResult ( result );

    promise.then ( value => setResult ({ loading: false, value }) )
           .catch ( error => setResult ({ loading: false, error }) );

  }, [promise] );

  return result;

}
```

It accepts a promise and returns an object that tells you if the promise did resolve/reject or if it did not settle yet. I think this is a fairly common pattern.

First of all notice how I'm using `useMemo`, as we want to attach `then`/`catch` handlers only once.

Secondly notice how inside `useMemo` I'm resetting the `result` object whenever the promise changes, as we don't want it to return the previous result object instead.

I'm resetting the `result` object both permanently, via `setResult`, and temporarily, by assigning to it directly. I believe the direct assignment is necessary here because otherwise my component will immediately receive the previous `result` object instead of the new one.

There are multiple issues even with this fairly simple hook:

### 1 - Inappropriate linter warning

The linter is complaining about assigning directly to `result` with the following message:

```
Assignments to the 'result' variable from inside React Hook useMemo will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useMemo.eslint(react-hooks/exhaustive-deps)
```

Since I'm also using `setResult` here this issue seems none existent, maybe this warning shouldn't be displayed in this situation?

### 2 - Missing linter warning

If I don't update the `result` variable immediately by directly assigning to it my component will initially receive the wrong object, which is an error, and I think it will also be rendered twice, once with the wrong object, and a second time with the right one once `setResult` does its job.

Shouldn't in situations like this be a linter rule that _encourages_, instead of discourages, you to also update the value directly in order to avoid those issues?

### 3 - Updating state while the component is unmounted

I think my `usePromise` hook will eventually call `setResult` while the component is unmounted because the promise will eventually resolve/reject after the component has been unmounted.

So I'll have to update it to check if the component is still mounted, otherwise React will log an error about this.

What's the point of this error? Why can't/shouldn't React itself just ignore my `setResult` call if the component is not mounted? Or at the very least why is React logging an error about this and not a warning?

I find myself stumbling into this issue pretty often, perhaps a linter rule can be written about this?

### 4 - Which hook to use?

If I'm understanding this correctly instead of `useMemo` I could have used `useEffect` or `useLayoutEffect` and have gotten _almost_ the same result, I say almost because:

- `useMemo` calls the passed function immediately, which is want we want or the promise may throw an exception that we won't be able to catch.
- `useLayoutEffect` would call the passed function at a later time, right before the browser is ready to render the frame, or at least I believe that's the case, but if I have 10 `useLayoutEffect` calls and the first one keeps the main thread busy for 1 minute are the other 9 always going to get executed before the browser paints?
- `useEffect` will call the passed function at a point in time that's not very clear to me. (e.g. should it be equivalent to `componentDidMount` + `componentWillUnmount`? Or was it `componentWillMount` + `componentDidUnmount` or some other permutation?)

The fact that there are 3 built-in hooks that could be used for this, which may not reveal any error for a long time, is a bit confusing to me.

### General feedback

I've recently migrated an app of mine to hooks and this particular issue has bit me more than once already, I keep stumbling upon it. In general I'm having troubles writing reliable custom hooks and components.

1. There's no linter rule that reminds me to also update the value provided by `useState` hooks immediately, in fact it seems the current one discourages it.
2. I think my components have become harder to reason about sometimes: 
	- If I call `setFoo` 10 times is my component going to render 10 times?
	- Will React re-render my component also if I pass `setFoo` the same exact value as before?
	- If I use `useState` 3 times, and call the related `set*` methods from inside 3 `useEffect` hooks, one for each, is my component going to render 4 times if the first `useEffect` block relies on and updates the value provided by the first `useState`, the second `useEffect` block relies on the value provided by the first `useState` call too and updates the second, and the third `useEffect` block relies on the value provided by the second `useState` call and updates the third? And shouldn't I try to minimize these renderings by updating those values via an assignment also? 
	- I basically use `useEffect` by default, but some times I see a bit of flickering/glitches in the UI, I replace it with `useLayoutEffect` instead, the issue gets fixed, and I notice that I'm actually mutating the DOM or something inside the hook.
		- I find this to be quite error-prone for me, as sometimes it's not clear that I'm actually mutating the DOM (say I want to update the `scrollTop` property of an element or something), as the line that actually does that may be abstracted away by some other high-level API.
		- I also find the mere existence of 2 effect-related hooks confusing, I think I understand under which scenarios `useLayoutEffect` should be used, and that it's called before the browser paints the new frame, but then when is my `useEffect` hook called? Is it always called after `useLayoutEffect`? What would happen if I replaced all my `useEffect` calls with `useLayoutEffect` calls instead?
3. Generally hooks seem like a very good abstraction to me, but writing custom ones seems too error prone to me. I'm pretty new to hooks overall, but I think I'm relatively experienced as a developer, but if even writing a relatively simple one, like the `usePromise` hook I posted, has so many pitfalls to be aware of maybe this is an issue? I realize this sounds a bit like blaming the language for the bugs I've introduced, but perhaps there's a way to make this process less error prone? i.e. new/improved linter rules, less ambiguity (`useEffect`/`useLayoutEffect`), clearer lifecycle (when is `useEffect` even called? are my components re-rendering an unexpected amount of times?), no need to update values directly (hypothetically maybe they should be proxies so that `set*` functions can update them immediately or something? I realize that proxies aren't polyfillable but there might be other ways around it), no need for specifying dependencies (the code might be statically analyzable at build-time most of the times).

In hindsight maybe this ""General feedback"" section is a bit off-topic, let me know if you guys want me to move that into a separate issue.

Sorry for the long issue, hopefully it's helpful.",Other
https://github.com/facebook/react/issues/16080,16080,"React, how call parent method from child component (via slots)",[],closed,FALSE,,6,2019-07-08T09:51:40Z,2019-09-03T11:05:29Z,2019-09-03T11:05:28Z,NONE,completed,,"Hi. I make slots via vuejs. How get/write parent state or call parent method without redux.

**Page**

```
class Users extends Component {
   callbackFilter(data) {
     console.log('callbackFilter', data)
   }

   render() {
     return (
        <div>
           <AppFilter callback={this.callbackFilter.bind(this)}>
              <AppFilter.AppSelect field=""name"" />
              <AppFilter.AppInput field=""name1"" />
              <AppFilter.AppInput field=""name1"" />
           </AppFilter>
        </div>
     )
   }
}
```

**AppFilter parent component**

```
class AppFilter extends Component {
   constructor(props) {
    super(props)
    this.state = {
      filter: {
        // dynamic fields child component
      }
    }
    this.bFilter = this.bFilter.bind(this);
   }

   static AppSelect = AppSelect
   static AppInput = AppInput
   
   bFilter(event) {
    if (event) event.preventDefault()
    // code map object for callback Users Component (page)
    this.props.callback(this.state.filter)
   }

   render() {
     return (
        <div>
           <div>
             {this.props.children} // how call bFilter
           </div>
        </div>
     )
   }
}
```

**Example child component**

```
class AppInput extends Component {
  callback(event) {
    // how get parent instants state or bFilter method for read state
  }
  render() {
    return (
      <Input onChange={this.callback.bind(this)} />
    )
  }
}
```",Other
https://github.com/facebook/react/issues/16083,16083,React ref incorrectly reports 0 height in production.,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-07-08T15:11:41Z,2019-07-09T13:26:50Z,2019-07-09T13:26:50Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
ImageViewer.js:
```
class ImageViewer extends React.Component {
  constructor(props) {
    super(props);
    this.state = { gotSize: false };
    this.containerRef = React.createRef();
  }

  componentDidMount() {
    // get zero here, only in production and only on the first run after refresh
    console.log(this.containerRef.current.clientHeight);
    this.setState({ gotSize: true });
    ...
  }
  ...
  render() {
    const { gotSize } = this.state;

    return (
         ...
        <div className={scss['canvas-container']} ref={this.containerRef}>
          {gotSize && <Canvas containerRef={this.containerRef} />}
        </div>
        ...
    );
  }
};
```
My css in container basically a box of width:100% and height: 100%, and it takes the full size in the inspector
Canvas.js:
```
class Canvas extends React.Component {
  constructor(props) {
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }

  componentDidMount() {
    window.addEventListener('resize', this.updateDimensions);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.updateDimensions);
  }

  updateDimensions() {
   ...
   // and of course zero here, but only on the first run
   // after refresh, if I close and open the component the second time it works fine
    const rect = this.props.containerRef.current.getBoundingClientRect(); 
    ...
  }

  render() {...}
}
```
**What is the expected behavior?**
Get the correct height
env:
production: default create-react-app script `""react-app-rewired build""`
macOS High Sierra 10.13.6
Chrome Version 75.0.3770.100 (Official Build) (64-bit)
""react"": ""^16.8.6""
""react-dom"": ""^16.8.6""",Other
https://github.com/facebook/react/issues/16091,16091,[Question] useRef to reduce dependencies in useEffect/useCallback,[],closed,FALSE,,3,2019-07-09T18:00:38Z,2019-07-18T19:48:40Z,2019-07-18T19:48:40Z,NONE,completed,,"Firstly, sorry for putting a question in the issues tracker, since I'm not sure where to put this.

I really love the concept of hooks & have been converting many class components to hooks. One of the common problems I usually get with hooks, is to access the latest state/props in `useEffect` and `useCallback`, while avoiding specify too many dependencies to these hooks. 

(I'm aware of exhausive deps, but for optimization, I don't want `useEffect` to be called too many times, or `useCallback` to return a different function every times)

For example, I want to maintain the identity of function returned from `useCallback`, so I'd need to put `[]` as 2nd argument (because I'm gonna pass it to a component inside `React.memo` and don't want to write custom props comparator). So it'd be like this:
```js
useCallback(() => doStuff(value1, value2), [])
```

Of course it won't work because `doStuff` will always receive initial value of `value1` and `value2`. That's why I'd need to use `useRef`:

```js
const ref = useRef({ value1, value2 });
ref.current = { value1, value2 };
useCallback(() => doStuff(ref.current.value1, ref.current.value2), [])
```

And could say that this happens so many time that I decided to write a custom hook for it :)

```ts
export function useCallbackWithRef<TRef, TCb extends (...args: any[]) => any>(
  refData: TRef,
  callback: (refData: TRef) => TCb
): TCb {
  const ref = React.useRef(refData);
  ref.current = refData;
  return React.useCallback((...args: any[]) => {
    return callback(ref.current)(...args);
  }, []) as TCb;
}

//usage
useCallbackWithRef({ value1, value2 }, ref => () => doStuff(ref.value1, ref.value2))
```

And it seems to work quite nice: [Codesandbox](https://codesandbox.io/s/white-brook-1myr7)

I'm going to use this across many places in my project, but I don't want to have many regrets later on so I just want to ask a few things:

1. Is there any performance issue with excessive use of `useRef`? Since they're just pointer to an already exist object, I guess it's not going to have any memory impact?
2. I read somewhere that React may decide to re-compute value in `useMemo` if needed, even if I specify `[]` as dependencies. Is it better if I change the implementation to `useState` with lazy init, instead of `useCallback`?
3. Or is there a much more simpler, a true React way to achieve what I want but I have overlooked?",Support
https://github.com/facebook/react/issues/16093,16093,onClick not firing,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-07-09T20:42:58Z,2019-08-03T22:44:54Z,2019-07-10T09:45:04Z,NONE,completed,,"I can't seem to get the onClick event to fire at all. I've reduced my app to the following file: 

index.js:
```
import React from 'react'
import { render } from 'react-dom'

const Index = () => {
  console.log('rendered')
  return <button onClick={() => console.log('hello')}>test</button>
}

render(
  <Index />,
  document.getElementById('app')
)
```
I get 'rendered' output to the console, but nothing when I click on the button.

package.json:
```
{ 
...
devDependencies {
    ...
    ""react"": ""^16.8.4"",
    ""react-dom"": ""^16.8.4"",
     ...
}
...
}
```
building inside a Laravel 5.2 app via: 
`browserify -t [ babelify --presets [ react es2015 ] ] resources/js/react/index.js -o public/js/test.js`
",Other
https://github.com/facebook/react/issues/16119,16119,How to make button clickable under Link,[],closed,FALSE,,4,2019-07-12T05:53:35Z,2019-07-12T08:50:10Z,2019-07-12T08:46:30Z,NONE,completed,,"Post.jsx file
Code below is Post itself...
```
<Post>
     <Link to='/somewhere'>
         <contents>
             <usename />
              <date />
              <div onClick={doSomething}>Edit</div>
         </contents>
     </Link>
</Post>
```
How can I make the div tag button clickable under Link?

I wanna implement like this...
If I click anywhere in the post except edit button, I go to post detail page.
If click edit button, edit modal shows up instead of going to post detail page.
I believed I need to nest edit button trigger in the Link, but doesnt work.
How am I supposed to implement this?
Thank you.

LIke this...
![facebook_1199-141](https://user-images.githubusercontent.com/51696880/61104391-2d701e80-a4b1-11e9-9d9b-39207d0d34cc.jpg)",Support
https://github.com/facebook/react/issues/16132,16132,Lazy load component with path stored in a variable or prop,[],closed,FALSE,,7,2019-07-14T13:38:22Z,2022-09-19T18:27:14Z,2019-07-15T09:53:58Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
Error and warning when trying to dynamically `lazy` load a component from a variable or props.

```
Warning: Critical dependency: the request of a dependency is an expression

Error: Cannot find module './Button'
(anonymous function)
.../dynamic-lazy-load/src lazy groupOptions: {} namespace object:5
```

**Reproduction**
In a Codesandbox it seems to be working https://codesandbox.io/s/angry-rgb-vs0g4 fine. For some reason in a non codesandboxed environment, I was able to reproduce the issue [here](https://github.com/ReasonableDeveloper/react-dynamic-lazy-load-bug).

**What is the expected behavior?**
It should lazily load the component even when the path is passed down via props or stored in a variable without throwing a warning or error. The behavior of following code:

```JavaScript
const buttonPath = ""./Button"";
const LazyLoadedButton = lazy(() => import(buttonPath));
```

should match the behavior of
```JavaScript
const LazyLoadedButton = lazy(() => import('./Button'));
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest version of CRA (3.0.1) and latest React (16.8.6)

This issue was first reported in the lerna support CRA pull request seen [here](https://github.com/facebook/create-react-app/pull/6599#issuecomment-511161680).",Other
https://github.com/facebook/react/issues/16144,16144,"Provide easy way to add `debugger` to ""lifecycle hook scheduled a cascading update"" errors",[],closed,FALSE,,1,2019-07-16T20:08:37Z,2019-07-16T20:10:43Z,2019-07-16T20:10:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?** Feature

**What is the current behavior?** Can't find a way to place a debugger on ""lifecycle hook scheduled a cascading update"" errors

**What is the expected behavior?**

I'm getting this error currently, I tried adding a debugger in `react-scheduler` but it seems Webpack doesn't pick it up, which means it's not actually importing that in development mode I guess. I don't see this message anywhere in react.development.js, so I guess I'm wondering where this code is coming from?

I don't need this as a feature but rather just to know where/how you can get a debug breakpoint here, but after [reading this thread](https://github.com/reduxjs/react-redux/issues/834) I didn't see any clear resolution so I wanted to start a ticket for it.",Other
https://github.com/facebook/react/issues/16147,16147,Increase `NESTED_UPDATE_LIMIT`,[],closed,FALSE,,1,2019-07-17T12:38:29Z,2019-07-17T14:28:34Z,2019-07-17T14:24:00Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

I am creating a mobile app using Expo (SDK33).  I'm using redux, redux-form, react-navigation, and redux-persist, amongst other things.  Without doing anything ridiculous, I have hit the `NESTED_UPDATE_LIMIT` just by having a reasonably deep component tree.

```
    in ConnectFunction (created by Connect(Form(Connect(BaseQuestionnairePage))))
    in Connect(Form(Connect(BaseQuestionnairePage))) (created by ReduxForm)
    in ReduxForm (created by Context.Consumer)
    in Hoc (created by ReduxForm)
    in ReduxForm (created by ConnectFunction)
    in ConnectFunction (created by Connect(ReduxForm))
    in Connect(ReduxForm) (at QuestionnaireScreen.jsx:17)
    in RCTScrollContentView (at ScrollView.js:976)
    in RCTScrollView (at ScrollView.js:1115)
    in ScrollView (at Wizard.jsx:84)
    in RCTView (at View.js:45)
    in View (at Wizard.jsx:83)
    in BaseWizardInterface (created by ConnectFunction)
    in ConnectFunction (at Wizard.jsx:173)
    in BaseWizard (created by ConnectFunction)
    in ConnectFunction (at QuestionnaireScreen.jsx:12)
    in _default (created by SceneView)
    in SceneView (at StackViewLayout.tsx:899)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at StackViewCard.tsx:93)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at screens.native.js:59)
    in Screen (at StackViewCard.tsx:80)
    in Card (at createPointerEventsContainer.tsx:95)
    in Container (at StackViewLayout.tsx:971)
    in RCTView (at View.js:45)
    in View (at screens.native.js:83)
    in ScreenContainer (at StackViewLayout.tsx:383)
    in RCTView (at View.js:45)
    in View (at createAnimatedComponent.js:151)
    in AnimatedComponent (at StackViewLayout.tsx:379)
    in PanGestureHandler (at StackViewLayout.tsx:372)
    in StackViewLayout (at withOrientation.js:30)
    in withOrientation (at StackView.tsx:103)
    in RCTView (at View.js:45)
    in View (at Transitioner.tsx:267)
    in Transitioner (at StackView.tsx:40)
    in StackView (created by Navigator)
    in Navigator (at createKeyboardAwareNavigator.js:12)
    in KeyboardAwareNavigator (at create-redux-container.js:72)
    in NavigatorReduxWrapper (created by ConnectFunction)
    in ConnectFunction (at App.jsx:36)
    in RCTView (at View.js:45)
    in View (at StatusBarWrapper.jsx:49)
    in RCTView (at View.js:45)
    in View (at StatusBarWrapper.jsx:48)
    in BaseStatusBarWrapper (created by ConnectFunction)
    in ConnectFunction (at App.jsx:35)
    in BaseAuthGate (created by ConnectFunction)
    in ConnectFunction (at App.jsx:34)
    in PersistGate (at App.jsx:33)
    in Provider (at App.jsx:32)
    in _default (at withExpoRoot.js:20)
    in RootErrorBoundary (at withExpoRoot.js:19)
    in ExpoRootComponent (at renderApplication.js:35)
    in RCTView (at View.js:45)
    in View (at AppContainer.js:98)
    in RCTView (at View.js:45)
    in View (at AppContainer.js:115)
    in AppContainer (at renderApplication.js:34)
```

From what I can tell, there are:

* Eight layers for expo or react-native's bootstrapping;
* A layer for the redux store `Provider`;
* A layer for redux-persist's `PersistGate`;
* Two layers for my `AuthGate` (as it's connected to the store with a HOC, `connect()`);
* Two layers for my `StatusBarWrapper`;
* Four layers for the `<View><View /></View>` in my `StatusBarWrapper`, (they come with `<RCTView />`s apparently);
* Twenty-eight layers for `react-navigation`'s `StackNavigator`;
* Nine layers for my `Wizard`, (two for the outer component, connected to the store, two for the inner component also connected to the store, two for a `<View />`, and three for a `<ScrollView />`);
* Seven layers for my `QuestionnairePage`, (one redux `connect()` HOC to connect the redux-form to the store to load initial values, one redux `connect()` HOC that the `redux-form` connects _itself_ to the store with for its own purposes, one for the `ReduxForm` itself, one for the HOC it contains, one for a context consumer layer (I think?), then finally two more for my actual form.

Given that's 62 in total, I imagine that perhaps the eight expo/react-native bootstrapping layers aren't counted, meaning the final seven layers push it over the edge.

**What is the expected behavior?**

`NESTED_UPDATE_LIMIT` is there to provide oven mitts for infinite loops, right?  Every single question I found on Stack Overflow about this invariant was someone not understanding how JSX works and calling `.setState()` in `.render()`, which isn't at all what I'm doing.  I don't understand why the detection for _infinite_ loops is set to such a low threshold.

In my opinion, `NESTED_UPDATE_LIMIT` should be at least 10x higher.  It'll still catch infinite loops just fine, and won't take much longer to do so, but won't kick my ass for having the audacity to use several libraries and a reasonably deep structure.

Failing that, it should be configurable.  As I said, I'm using expo, which I believe means there's no way for me to change this value when publishing my app.  I can edit it in `node_modules/` just fine on my local machine (and the error goes away of course), but with no way to do so on the build servers, I can't make this app.  Not with react, anyway.  I really don't want that to be the case, because I've been building this for months, at this point, and starting over in swift or whatever would be an awful cost to my employers just because someone thought ""50 is enough for anyone"".  :/

As it seems like the expo bootstrapping layers are being ignored, I'm going to start diving in to that code now to see if I can steal its ideas, but of course I shouldn't have to.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

```
  ""dependencies"": {
    ""@expo/browser-polyfill"": ""0.0.1-alpha.3"",
    ""@expo/vector-icons"": ""10.0.1"",
    ""@react-navigation/core"": ""3.3.1"",
    ""airbnb-prop-types"": ""2.13.2"",
    ""axios"": ""0.18.0"",
    ""buffer"": ""5.2.1"",
    ""expo"": ""33.0.0"",
    ""expo-constants"": ""5.0.1"",
    ""expo-gl"": ""5.0.1"",
    ""expo-web-browser"": ""5.0.3"",
    ""lodash"": ""4.17.11"",
    ""moment"": ""2.24.0"",
    ""path"": ""0.12.7"",
    ""pixi.js"": ""4.7.0"",
    ""prop-types"": ""15.7.2"",
    ""react"": ""16.8.4"",
    ""react-moment-proptypes"": ""1.6.0"",
    ""react-native"": ""https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz"",
    ""react-navigation"": ""3.11.0"",
    ""react-navigation-redux-helpers"": ""3.0.2"",
    ""react-redux"": ""7.1.0"",
    ""react-switch-case"": ""1.0.6"",
    ""redux"": ""4.0.1"",
    ""redux-form"": ""8.2.1"",
    ""redux-persist"": ""5.10.0"",
    ""redux-persist-expo-securestore"": ""2.0.0"",
    ""redux-thunk"": ""2.3.0"",
    ""reselect"": ""4.0.0"",
    ""whatwg-url"": ""7.0.0""
  },
```

Linux Mint 18, iOS 12.2.  Most likely didn't work in previous versions of react, but I haven't checked.",Other
https://github.com/facebook/react/issues/16154,16154,Accessing state/props in callback ref with hooks,[],closed,FALSE,,14,2019-07-18T07:03:20Z,2022-01-20T16:38:41Z,2019-08-15T13:14:30Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Requesting guidance on how to implement something with hooks that used to be possible with class components (so it's not quite a bug, but it might end up becoming a feature request)

**What is the current behavior?**

If you want to access an external value inside a callback ref (props/state/etc.), you can use `useCallback`. However, in some cases you may want to avoid re-triggering the callback ref when one of those external values change. In that case, you could use `useRef` to work around this, and update the ref's value with `useEffect`/`useLayoutEffect`, like this:

```
const valueRef = useRef(value);
useEffect(() => {
  valueRef.current = value;
}, [value]);

// Now the callback ref can use `valueRef.current`
```

However, callback refs are called before `useEffect`/`useLayoutEffect` callbacks, so if the callback ref happens to be triggered as a result of the same render in which `value` changes, it will see the old value when it access `valueRef.current`.

This could be worked around by updating `valueRef` as a side effect of render:

```
const valueRef = useRef(value);
valueRef.current = value;
```

This is admittedly a very specific edge case, but I have actually introduced bugs into real code due to this, when trying to convert existing class components to use hooks. Another motivation for this is to use it to help implement a custom hook for making callback refs nicer to use by mimicking the `useEffect` API: https://github.com/facebook/react/issues/15176#issuecomment-512185852

Interestingly, this issue does not happen with class components, because `this.props` and `this.state` have the correct value when the callback ref is triggered.

Here is a codesandbox with a contrived example that reproduces the issue (and shows how the issue does not occur with a class component): https://codesandbox.io/s/callback-refhooks-72m3p

**What is the expected behavior?**

That there is some way of handling this use case using hooks, and in such a way that works with concurrent mode:

• Wanting to access external values in a callback ref
• Wanting to avoid triggering the callback ref when those values change

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

* React/React-DOM 16.8.6
* Not a browser/OS-related issue
* Also did not work in previous versions of React",Support
https://github.com/facebook/react/issues/16158,16158,How add resize height to element on hover,[],closed,FALSE,,2,2019-07-18T19:53:21Z,2019-08-15T13:13:29Z,2019-08-15T13:13:29Z,NONE,completed,,"In my react project i want show modal on hover, but when hover last elements crashed layout, how i can add resize height to parent div on hover ?

https://codesandbox.io/embed/hardcore-poitras-mt2mw?fontsize=14",Support
https://github.com/facebook/react/issues/16162,16162,Once again on getDerivedStateFromProps being called after setState,[],closed,FALSE,,2,2019-07-19T09:41:30Z,2019-07-21T17:53:32Z,2019-07-21T17:53:32Z,NONE,completed,,"I've read all the issues end blog posts on this topic and still can't find suitable solution for my case. I'm still in the 16.3 camp, though I must be just not competent enough to judge. Please help me to do things right. So I have a sort of pivot grid component with quite heavy state and a GridCell (uncontrolled or semi-controlled) component which is basically one number input. So the value and onChange are cycled through it's state and in parent component I'm handling just onBlur. So in order to do some validation when users enter unacceptable value I notify them and then I want to reset the cell by resetting prevState. [Here](https://codesandbox.io/s/musing-mclaren-qvclh) is a simplified reproduction of the problem.
",Support
https://github.com/facebook/react/issues/16170,16170,Unicode iconfont didn't render when using map function of lists.,[],closed,FALSE,,2,2019-07-21T17:42:48Z,2019-07-22T08:59:07Z,2019-07-22T08:59:07Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

- Bug

**What is the current behavior?**

- ReactDom just renders unicode iconfont as plain text when using map function of lists, instead of iconfont. 
  ![image](https://user-images.githubusercontent.com/30968676/61594654-eefd0100-ac20-11e9-9cc0-7f7007a1cc39.png)


- However, it can render well when  I hardcode the lists without using map function.
  ![image](https://user-images.githubusercontent.com/30968676/61594627-87df4c80-ac20-11e9-9936-fddb75327141.png)


**Steps to reproduce this bug**
1. Create an iconfont project from Alibaba [iconfont](https://www.iconfont.cn).
    Like this
    ![image](https://user-images.githubusercontent.com/30968676/61594159-e30e4080-ac1a-11e9-8833-4d6d9daddc9c.png)
2. Make a list to render these icons using iconfont unicode.
    ```js
    lists.map((list, idx) => (
        <li key={idx}>
             <i className=""iconfont"">{list.unicode}</i>
        </li>
    ))
    ```

**What is the expected behavior?**

- Render these iconfont as icon instead of plain text.

**Which versions of React, and which browser / OS are affected by this issue?**

- Broswer: Google Chrome, Version 75.0.3770.100 (Official Build) (64-bit)
- OS: Ubuntu, Version 18.04.2 LTS (Bionic Beaver)
- React: Version 16.8.6

",Support
https://github.com/facebook/react/issues/16203,16203,After redirecting React is re rendered and send back to the cached login IE11,[],closed,FALSE,,1,2019-07-25T11:52:51Z,2019-07-27T12:32:33Z,2019-07-27T12:32:33Z,NONE,completed,,"I'am struggling to find a quick solution to my problem , because clients are complaining about that the Site cannot be rendered on the IE . I have done a little research and i came across this `react-app-polyfill/ie11` .
I have insert it as an entry point on mine `src/index.js` It have worked i saw my project ( only the login tho ) working on IE 11 , but after the login it is redirected again back to the login page . The error that IE throws back is :
`DOM7011 : The code on this page disabled back and forward caching.`
`Unhandled promise rejection TypeError: Unable to get property 'data' of undefined or null reference`

After a while i came also across this :
https://reactjs.org/docs/javascript-environment-requirements.html

The new JavaScript Environment Requirements . Bassicly they suggest to enable as an entry point on your `index.js` this
`import 'core-js/es/map'; import 'core-js/es/set';`

So far i have no clue what is going on , but still the app is not running properly on IE . Can somebody give me some advice what to do ?

**UPDATED**
Login.js

```jsx
export default class Login extends Component {
  constructor(props) {
    super(props);

    this.state = {
      translations: EN_TRANSLATIONS,
      clientNumber: """",
      password: """",
      redirectToReferrer: """",
      loginErrorMessage: """",
      lockedUntilDate: """"
    };
  }

  async componentWillMount() {
    let tenant = window.location.hostname;

    axios
      .post(SERVER_URL + ""/api/user/page"", {
        tenant: tenant
      })

      .then(response => {
        localStorage.setItem(""page"", JSON.stringify(response.data.branding));
        localStorage.setItem(""tenant"", tenant);

        this.setState({
          branding: response.data.branding,
          tenant: tenant,
          pageReady: true
        });
      });
  }

  login = () => {
    axios
      .post(SERVER_URL + ""/api/user/access"", {
        tenant: this.state.tenant,
        customerNumber: parseInt(this.state.clientNumber),
        password: sha1(this.state.password + FE_SALT)
      })
      .then(response => {
        localStorage.setItem(""token"", response.data.token);
        localStorage.setItem(""access"", JSON.stringify(response.data.branding));

        this.setState({
          branding: response.data.branding,
          accessReady: true
        });

        if (this.state.accessReady) {
          if (response.data.passwordValidity >= 0) {
            Auth.authenticate(response => {
              this.setState({ redirectToReferrer: ""dashboard"" });
            });
          } else {
            Auth.authenticate(response => {
              this.setState({ redirectToReferrer: ""changePassword"" });
            });
          }
        }
      });
  };

  handleSubmit = event => {
    event.preventDefault();
  };

  render() {
    const {
      redirectToReferrer,
      translations,
      notValidTenant,
      branding
    } = this.state;
    if (redirectToReferrer === ""dashboard"") {
      return (
        <Switch>
          <Route
            render={() => <Redirect to={`/dashboard/${Auth.customerId}`} />}
          />
        </Switch>
      );
    } else if (redirectToReferrer === ""changePassword"") {
      return (
        <Switch>
          <Route
            render={() => (
              <Redirect to={`/change_password/${Auth.customerId}`} />
            )}
          />
        </Switch>
      );
    }
  }
}
```

index.js

```jsx
import ""react-app-polyfill/ie9"";
import ""react-app-polyfill/ie11"";
import ""react-app-polyfill/jsdom"";

import React from ""react"";
import ReactDOM from ""react-dom"";
import App from ""./App"";
import { BrowserRouter } from ""react-router-dom"";

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById(""root"")
);
```

Also i marked that i cannot import `'react-app-polyfill/stable'` i think this should work , but i am not sure .

**UPDATE**
I have deleted the `node_modules` and installed again `react-app-polyfill` . Now the `'react-app-polyfill/stable'` is recognized , but i ran into another error .
`SCRIPT438: Object doesn't support property or method 'repeat'` ... This IE is making me crazy ...

**UPDATE**
Okey so i was able to delete my private routes and make every route after the login visible `<Route/>` . If i hardcode the URL path and disable the security i can get access to my dashboard page . So that gives me thinking that the problem is coming from the `<Redirect/>` component . Because he is the only one standing between the login and the dashboard . Any suggestion why is this conflict between `IE` and `<Redirect/>` ???
",Other
https://github.com/facebook/react/issues/16211,16211,TypeError: Assignment to constant variable.,[],closed,FALSE,,14,2019-07-25T20:03:11Z,2021-10-25T02:40:27Z,2019-07-26T17:38:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**

TypeError: Assignment to constant variable.

![image](https://user-images.githubusercontent.com/102806/61904769-1be53880-aeed-11e9-81f9-9479e40490b5.png)

System: OSX
npm: 6.10.2
node: v10.13.0
react: 16.8.6
",Support
https://github.com/facebook/react/issues/16239,16239, Error on unit test : Cannot read property 'Symbol(Symbol.iterator)' of undefined,[],closed,FALSE,,3,2019-07-29T07:09:06Z,2022-04-15T10:34:15Z,2019-07-29T09:27:43Z,NONE,completed,,"@gaearon 
i have a component that has a useState hooks as below  :

`component is so big , because of that , i just write some of the problem .`

```
function Login(props){
/*...*.
    const [, dispatch] = useLoginStateValue();
    
return(
/*...*/
)

}

```

and i have a test for this component

```
jest.mock(""../../Services/login"")

it(""mock login request testing"", (done) => {
    act(() => {
        const wrapper = mount(
            <MuiThemeProvider theme={dark}>
                <Login theme={{isResponsive: true}}/>
            </MuiThemeProvider>);

        wrapper.setState({email: ""@@22WWee""})
        wrapper.setState({password: ""test@test.com""})
        wrapper.find('button#authenticate').simulate('click');

        setTimeout(() => {
            wrapper.update();
            wrapper.setState({alert: ""Bad credentials""})
            expect(wrapper.instance().state.alert).toEqual(""Bad credentials"")
            done()
        })
    })
})
```

when i run test , it shows error :
`
    Error: Uncaught [TypeError: Cannot read property 'Symbol(Symbol.iterator)' of undefined]
`

after removing `    const [, dispatch] = useLoginStateValue();` everything is ok , how can i use dispatch , and LoginStateValue without error in test ?",Support
https://github.com/facebook/react/issues/16246,16246,React onChange event triggers the wrong props (when used with `htmlFor`),[],closed,FALSE,,1,2019-07-30T00:54:04Z,2019-09-03T08:54:48Z,2019-09-03T08:54:48Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Component triggers the wrong props on the `onChange` event.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://codesandbox.io/s/muddy-https-r6w7p
It behaves alright when the default input(file selector) is clicked. But when the div that refers to the input(with `htmlFor`) is clicked, it seems like triggering the old props.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React v16.8.6
",Support
https://github.com/facebook/react/issues/16250,16250,React Context deprecated warning,[],closed,FALSE,,9,2019-07-30T08:44:10Z,2020-04-20T09:48:13Z,2019-08-15T13:07:19Z,NONE,completed,,"
When I use this.context in a class I see a warning ""Deprecated symbol used, consult docs for better alternative"" in PhpStorm IDE.. it is really deprecated?

""react"": ""16.8.3""",Support
https://github.com/facebook/react/issues/16262,16262,ErrorBoundary can not catch children node error,[],closed,FALSE,,5,2019-07-31T03:42:15Z,2019-08-15T13:04:54Z,2019-08-15T13:04:53Z,NONE,completed,,"**Feature**

**What is the current behavior?**

ErrorBoundary component can only catch the error from the **children component**.

Is there some way can catch the error from the **children node**?

example App component:
``` js
function App() {
  const user = {}
  return (
    <main>
      <h2>main</h2>
      <ErrorBoundary>
        <User user={user} />
      </ErrorBoundary>
      {/* can not catch*/}
      <ErrorBoundary>
        <div>{user.info.name}</div>
      </ErrorBoundary>
      {/* also can not catch*/}
      <ErrorBoundary>
        {() => (<div>{user.info.name}</div>)}
      </ErrorBoundary>
    </main>
  );
}

const User = (props) => {
  return <div>{props.user.info.name}</div>
}
```

ErrorBoundary component:
``` js
class ErrorBoundary extends Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true };
    }

    componentDidCatch(error, info) {
        console.log(error, info);
    }

    render() {
        if (this.state.hasError) {
            return <h1>Something went wrong.</h1>;
        }

        if (typeof this.props.children === 'function') {
            return this.props.children()
        }

        return this.props.children;
    }
}
```
I don't think there is much difference between use  `User` component and  `<div>{user.info.name}</div>` . Also wrap *every* component in error boundary is  a bad idea. But sometimes, I can't take every small module to a separate component. So I expect the ErrorBoundary can catch the error from the children node。

Any suggestions? thanks a lot.",Other
https://github.com/facebook/react/issues/16293,16293,Hide env variable in production build,[],closed,FALSE,,4,2019-08-05T10:29:00Z,2019-08-15T13:01:10Z,2019-08-15T13:01:10Z,NONE,completed,,"Hey, I am a bit of confused about env variables in the production build. Simply i have a .env file which contains some variables like 

```
REACT_APP_ALG=A128CBC-HS256
REACT_APP_K=RvIm6UTHG0wqXWLvkSmRqQhS97NvW_IwYw0CKYhEF_0
```

and accessing then in code like 

```
            ""alg"": process.env.REACT_APP_ALG,
            ""k"": process.env.REACT_APP_K
```

But when I build my project then in bundle files i found some like 

```
                        alg: ""A128CBC-HS256"",
                        k: ""RvIm6UTHG0wqXWLvkSmRqQhS97NvW_IwYw0CKYhEF_0""
```

which is a security issue for me. Is there any way to hide them I'm well aware about that it's not a bug it's just I could not find any suitable solutions",Support
https://github.com/facebook/react/issues/16295,16295,useReducer dispatch calls reduce twice ,[],closed,FALSE,,31,2019-08-05T15:52:33Z,2022-09-24T21:05:13Z,2019-08-15T12:54:54Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
report a bug

**What is the current behavior?**
when a `dispatch()` of OOTB `useReducer` is called, some instances calls the `reduce()` twice.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
As the behavior is intermittent, I shall try to figure out a way to write a reproducer. But, based on call stacks here is what what I can narrow it down. 
Assume,

```
const [state, dispatch] = useReducer(reduce, {})
...
dispatch({something_useful...}) //this call happens twice in the execution stack.
```

Seldom calls to `dispatch()` executes the `reduce()` twice and both the times (it does preserve the previous state. Meaning, it merely calls 
T1: (s', a') => s''
T2: (s', a') => s''
Notice, the state starts with s' only and NOT s''. Hence, the resultant state s'' is still safe.

I do have some call stack that shows the difference from `react-dom`.

First stack-trace when `dispatch()` is called.
```
https://github.com/facebook/react/blob/42794557ca44a8c05c71aab698d44d1294236538/packages/react-dom/src/server/ReactPartialRendererHooks.js#L404 -- dispatchAction
wsReducer	@	useWSConnector.js:11 <-- my reduce()
dispatchAction	@	react-dom.development.js:14088
(anonymous)	@	useWSConnector.js:73 <-- my custom hook (the exact line to dispatch())
```

Second stack-trace that is called implicitly.
```
https://github.com/facebook/react/blob/42794557ca44a8c05c71aab698d44d1294236538/packages/react-reconciler/src/ReactFiberHooks.js#L658 -- updateReducer
wsReducer	@	useWSConnector.js:11 <-- my reduce()
updateReducer	@	react-dom.development.js:13741
useReducer	@	react-dom.development.js:14349
useReducer	@	react.development.js:1500
useWS	@	useWSConnector.js:41  <-- my custom hook (the stack to the start of my custom hook)
```

As, I am not familiar with `react-dom` source code, some hints around what may be happening in both the call-stacks may help.

**What is the expected behavior?**
when a `dispatch()` of OOTB `useReducer` is called, all instances should call the `reduce()` only once.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.8.6, Chrome 75.0.3770.142 (Official Build) (64-bit)",Other
https://github.com/facebook/react/issues/16299,16299,[Feature Request] Alternative to service-locator pattern in React,[],closed,FALSE,,5,2019-08-06T03:41:45Z,2019-08-07T02:27:29Z,2019-08-07T01:55:42Z,NONE,completed,,"_**I'm sorry about the long post**_
 
### The problem:
 
Achieving dependency inversion and inversion of control within React is challenging because existing solutions rely on the service locator pattern to transport dependencies from their providers into their consumers.
 
This results in strong coupling of components to their surrounding implementations, decreasing testability, increasing boilerplate and discouraging developers from creating abstractions. 
 
A common pre-context solution to dependency injection is manually wrapping all used components with “provider” functions. An example of this is using functions like `withTheme()` or `connect()`.
 
```jsx
import { withItems } from '../items'
 
export const Hello ={ items = [] }) => {
  return <div>
    { items.map(item => <div>{item}</div>) }
  </div>
}
 
export const InjectedHello = withItems(Hello)
```
 
Wrapping components like this creates silos of troublesome testability and due to it’s unergonomic nature, discourages decoupling components from the surrounding application implementation. 
 
In order to create decoupled component packages (say a UI library that lives in npm), the author must create components which receive all dependencies via props. In order to satisfy these dependencies, a consumer must import the library and re-wrap/re-export every component, injecting their dependencies from a service locator. 
 
```javascript
import { Button } from 'generic-ui'
import { withTheme } from '../somewhere' // service locator
 
export const ThemedButton = withTheme(Button)
```
 
A consumer must also exclude the wrapped “aware” components from unit tests as it’s impractical to test them in a sensible way.
 
https://en.wikipedia.org/wiki/Service_locator_pattern
 
An example of a basic service locator in JS is here
https://stackblitz.com/edit/js-6qzkak
 
An example of a service locator with React is here
https://stackblitz.com/edit/react-tdt624
 
 
### What about context?
 
Context provides a much more ergonomic solution. It still relies on the same service-locator pattern, but it’s ease of use makes it more approachable.
 
Boiled down, what context simply provides is a vehicle for dependencies to tunnel from their creator to their consumer under the floorboards of the library. It’s essentially an alternative to drilling props from the top level to the embedded components.
 
Receiving the theme from a context `const theme = useContext(ThemeContext)` also relies on the context being supplied by a concrete location.
 
If you imagine a simple, generic concept like a store using the Flux architecture; utilities like Redux, MobX. These third party libraries *must* have “React” as a peerDependency. The only alternative is supplying a ""react-connected"" variant of their library.
 
For this reason we have the two packages, ‘redux’ and ‘react-redux’. While the latter does provide some convenience utilities, it's use is not optional. It _*must*_ exist along-side the original implementation.
 
So here is a demonstration of how React enforces coupling by not providing an effective means to handle inversion of control. Below I have a factory function which creates a flux store:
 
```javascript
export const createPostStore = () => {
  const posts = createStateEmitter([])
 
  const getValue = () => posts.getValue()
 
  const add = (post) => {
    posts.setState([
      { title: post, id: randomString() },
      ...getValue()
    ])
  }
 
  return {
    posts,
    getValue,
    add
  }
}
```
It is consumed like you would consume Redux
 
```javascript
const store = createPostStore()
store.subscribe(posts => console.log(posts))
store.add('New Post!')
```
This unit has no external dependencies and can be consumed within React to hold state and trigger re-renders. It is easily tested and can be put in npm without a hard dependency on React.
 
example:
https://stackblitz.com/edit/react-gnj8ba
 
This example shows ""prop drilling"" to get the store into the component. This is ideal from an IoC standpoint, but impractical as with many layers of embedded components, you'll pass dependencies down a long tree and it's difficult to maintain.
 
Of course, I can simply export a context from my package, but I want to avoid a hard dependency on React as it's not really a concern of the library.
 
Another solution to this problem is to have a shared, global context, where there is a contract that components will consume it and extract their required dependencies from there.
 
https://stackblitz.com/edit/react-fz6ue8
 
The challenge here is that I can't expect Bootstrap, Material, or anyone on the internet to `npm install global-context` and have it be the de facto ""shared context"" which allows for IoC/agnosticism in component implementations.
 
The last solution is to make two packages, the package itself and a second package that has a hard dependency on React and exposes a context (Just like Redux and React Redux).
 
### Ok, so what's the solution?
 
Hard to say. React applications often have many layers of components so any solution must involve supplying embedded components their dependencies in a way that scopes their ""providing"" to the current instance of React.
 
Something like a PropProvider, which supplies props to all embedded components might be a solution. It's opt-in making it minimally invasive. It changes nothing for the existing public React API and simply adds another, more flexible, option to a problem you'd normally `useTheme()` to solve.
 
```jsx
<PropProvider values={{ everyone: 'gets this' }}>
    <MyComponent />
</PropProvider>
```
 
The problem with this is naming clashes. If you're a library vendor, you'll need to be creative to avoid clashes. The custom element specification stipulates that you must hyphenate your element names to avoid, or reduce the instances of clashes. Maybe that's a solution?
 
Another option is using getter functions, where key names are nearly impossible to clash and a function knows where to look.
 
```javascript
const MyComponent = (props) => {
    const theme = getTheme(props)
}
```
 
Maybe an official static context for the react instance?
 
```jsx
ReactDOM.render(
    <App/>,
    element,
    { everyone: 'gets this' }
)
```
",Support
https://github.com/facebook/react/issues/16301,16301,[ReactUpdateQueue] Why don't we stop processing higher priority update when we skip a low priority update?,[],closed,FALSE,,1,2019-08-06T15:19:35Z,2019-08-06T17:53:33Z,2019-08-06T17:53:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
A question.
**What is the current behavior?**
The current behavior is described in [ReactUpdateQueue.js](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactUpdateQueue.js#L61)
```
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
```

**What is the expected behavior?**
I think there is no need to process subsequent higher priority updates. It's a waste of cpu.",Support
https://github.com/facebook/react/issues/16305,16305,Different Suspense Behavior in ReactDOM.render vs React.createRoot().render,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2019-08-07T02:02:12Z,2020-04-01T21:24:10Z,2020-01-17T07:00:15Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

Throwing a resolved promise inside an app mounted with `React.unstable_createRoot().render()` triggers the suspense fallback render, defocusing inputs in the app.

In contrast, throwing an immediately resolved promise inside the same app rendered with  `ReactDOM.render()` does not trigger the suspense fallback render.

Here's a small reproduction showing the different behaviors: 
```javascript
import React from ""react"";
import ReactDOM from ""react-dom"";

let cache = {};

function MyApp() {
  let [text, setText] = React.useState(""edit this"");

  if (!cache[text]) {
    cache[text] = true;
    throw Promise.resolve();
  }

  return <input value={text} onChange={e => setText(e.target.value)} />;
}

let fallback = <div style={{ background: ""red"" }}>fallback</div>;
let dom = (
  <React.Suspense fallback={fallback}>
    <MyApp />
  </React.Suspense>
);

// Switch out the following two lines and type in the input
// to see the difference in behavior

ReactDOM.unstable_createRoot(document.getElementById(""root"")).render(dom);
// ReactDOM.render(dom, document.getElementById(""root""));

```

Here's a CodeSandbox with the code above: https://codesandbox.io/s/stupefied-cookies-qh8sy



**What is the expected behavior?**

Throwing an immediately resolved promise inside an app mounted with `React.unstable_createRoot().render()` should not trigger the suspense fallback render. Instead, it should behave identically to the app mounted with `ReactDOM.render()`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I'm using Chrome 75.0.3770.142, macOS 10.14.3, and react 16.9.0-alpha-0

N.B. This issue is pretty much the same as #15900, though that one seemed to have more moving parts. Please merge these if appropriate.",Other
https://github.com/facebook/react/issues/16308,16308,useEffect false positive requiring dependencies ,[],closed,FALSE,,4,2019-08-07T08:44:33Z,2019-08-09T05:30:34Z,2019-08-07T12:06:44Z,NONE,completed,,"https://codesandbox.io/s/lively-sea-2crwk

missing dependencies in useEffect throw false positive warning in some case. How can I remove the warning above? I can think of firing the callback on `setDropdown(, () => console.log('call api here'))`

```
useEffect(() => {
    if (inputVal) {
      callApi({ inputVal, dropdown });
    }
  }, [dropdown]);
```",Support
https://github.com/facebook/react/issues/16319,16319,componentDidUpdate not triggered on changes to context,[],closed,FALSE,,5,2019-08-08T16:16:26Z,2022-01-20T05:25:37Z,2019-08-09T17:38:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug.

**What is the current behavior?**
Components using a context update their content upon changes to the context, but `render` and `componentDidUpdate` are not invoked even though the the components' content changes.

[Here's a JSFiddle example](https://jsfiddle.net/0ewuj8L4/). Note how the component does update (the display on screen changes), but the ""render"" messages are only logged once (to the console), while the ""update"" messages are never logged.

**What is the expected behavior?**
I guess I understand why this is happening - the components which use `Context.Consumer` don't really re-render or get updated when the context changes; only the `Context.Consumer` component does. It would still be appreciated to at least make `componentDidUpdate` get invoked somehow (automatically).

Regardless, this behavior should certainly be documented as it is quite unclear, unintuitive and not so easy to detect.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest React I guess? I'm running on Windows 10.0.17134.799 and Chrome 75.0.3770.142, but I believe it should replicate on other environments as well.
",Support
https://github.com/facebook/react/issues/16347,16347,customized hook become bad when I open the react devtool and click the hook component dom in the tool.,[],closed,FALSE,,2,2019-08-10T08:43:56Z,2019-08-15T12:53:50Z,2019-08-15T12:53:50Z,NONE,completed,,"### issue type: bug
### react version 16.8.19
### os version: macOS Mojave 10.14.3(18D42)
### chrome version: 75.0.3770.142
### behavior:
I am a react developer, recently I found a very very strange bug/(ㄒoㄒ)/~~
look at the code below, it works very well,  but if I open the chrome react dev tool, and then click the react dom node in the tool, the magic things happen, the Counter become bad...... no matter how I click the button 'inc' or 'dec', it does not work again.... why? can you give me a reason or solution, looking forward for your reply, thank you so much.
```javascript
import React, { useState } from 'react';

let cursor = 1;
function getCursor() {
  return cursor;
}
function incCursor() {
  cursor++;
}

const cursor_ref_ = {};

function makeSetState(ccState, ccSetter) {
  return function (state) {
    ccState.state = Object.assign({}, ccState.state, state);
    const newCcState = Object.assign({}, ccState);
    ccSetter(newCcState);
  }
}

function useMySpecialHook(initState) {
  const [ccState, ccSetState] = useState({ state: initState, cursor: getCursor() });
  console.log('ccState.state', ccState.state);

  const isFirstRendered = ccState.cursor === cursor;
  let ref;
  if (isFirstRendered) {
    incCursor();
    ref = { ctx: {} };
    cursor_ref_[ccState.cursor] = ref;
  } else {
    ref = cursor_ref_[ccState.cursor]
  }
  //replace state and setState in every render period
  ref.ctx.state = ccState.state;
  ref.ctx.setState = makeSetState(ccState, ccSetState)

  return ref.ctx;
}

export default function Counter() {
  const ctx = useMySpecialHook({ count: 100 });
  const state = ctx.state;

  const dispatch = ({ type }) => {
    if (type === 'increment') ctx.setState({ count: state.count + 1 });
    else ctx.setState({ count: state.count - 1 });
  }

  return (
    <div style={{ border: '1px solid blue', margin: '8px' }}>
      <h2>MySpecialHook</h2>
      Count: {state.count}
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}
```",Support
https://github.com/facebook/react/issues/16355,16355,"Combination of wrapping component in function, updating state through hook and updating parent state through event listener does not update component's own state",[],closed,FALSE,,1,2019-08-11T08:17:37Z,2019-08-11T11:22:40Z,2019-08-11T11:21:01Z,NONE,completed,," This combination of factors results in unexpected behaviour:

* returning a child component from a function in a parent component
* having an onClick listener inside child component update its own state through a hook call
* having that same listener call an event listener that updates parent state

codesandbox.io demo: https://codesandbox.io/s/nice-kepler-bur5h

I would expect the wrapped component to behave similar to the normal child component. Instead, upon click, only the parent state updates while its own state stays unchanged.
",Other
https://github.com/facebook/react/issues/16358,16358,React state values is shared between two components!!!,[],closed,FALSE,,1,2019-08-11T17:08:56Z,2019-08-11T17:56:22Z,2019-08-11T17:56:21Z,NONE,completed,,"**Bug**

I have two components: 
 `ComponentA` 

```js
class ComponentA extends Component {
  constructor(props) {
    super(props);

    this.nextCardSet = this.nextCardSet.bind(this);
    this.prevCardSet = this.prevCardSet.bind(this);
  }
  async prevCardSet() {
    const currPage = this.state.currPage - 1;
    const data = this.state.dataStore[currPage - 1];
    await this.setState({
      currPage,
      data
    });
  }

  async nextCardSet() {
    const currPage = this.state.currPage + 1;
    const data = this.state.dataStore[currPage - 1];
    await this.setState({
      currPage,
      data
    });
  }

  async componentDidMount() {
    const response = await this.getData();

    //...Doing some stuff...

    await this.setState({
      dataStore: mainData,
      data: mainData[currPage - 1],
      currPage,
      totalPages,
      isLoading: false
    });
  }

  async getData() {
    const response = await axios.get(
      'http://localhost:4000/getUserOverviewJson'
    );
    return response;
  }

  render() {
    return (
      <div>
          <Fab size=""small"" disabled={this.state.currPage === 1 ? true : false}>
            <NavigateBefore
              onClick={this.prevCardSet}
            />
          </Fab>
          <Fab
            size=""small""
            disabled={
              this.state.currPage === this.state.totalPages ? true : false
            }
          >
            <NavigateNext
              onClick={this.nextCardSet}
            />
          </Fab>
        </div>
        <CallWorkRender data={this.state.data} />
      </div>
    );
  }
}
```

`ComponentB`
```js
class ComponentB extends Component {
  constructor(props) {
    super(props);
    this.data = props.data;
  }

  getComponent = componentID => {
    const data = this.data['pageData'].shift();
    return ComponentGetter.getComponent(componentID, data);
  };

  render() {
    const { width, data } = this.props;
    this.data = data;
    const layoutConfigCallPrep = layoutConfig['1'][width];

    return (
      <FlexGrid
        layoutConfiguration={layoutConfigCallPrep}
        getComponent={this.getComponent}
      />
    );
  }
}

export default withWidth()(ComponentB);
```



In the initial load `ComponentA` sends data to `ComponentB` , so in CompB when `getComponent()` method is called it pops elements from array which it got as props.

**Now the data in array is manipulated in CompB but when I try to print the state of  CompA  its data also get manipulated. I don't understand how this weird data manipulation is happening. How does the data of one component gets altered due to data change in other component?**

*React@16.8.6*
*Windows 10*
",Support
https://github.com/facebook/react/issues/16361,16361,Listen to state change useReducer,[],closed,FALSE,,4,2019-08-12T07:17:19Z,2019-08-15T12:57:15Z,2019-08-15T12:57:14Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
None. This is a question
**What is the current behavior?**
I try to create an object with the changed state value; however, the new object doesn't have the newest data. 

**This is the working version**
![image](https://user-images.githubusercontent.com/36496259/62849932-c7332180-bd24-11e9-94d5-16eb3a6cd672.png)
![image](https://user-images.githubusercontent.com/36496259/62850497-5ab92200-bd26-11e9-95df-52110538bb92.png)


**What is the expected behavior?**
so the basketDetails object if I assign the id: state2.basketId then this object will have the value id of """" instead of the newest value assign by the dispatch function. 
![image](https://user-images.githubusercontent.com/36496259/62850227-8b4c8c00-bd25-11e9-8871-b1be0745462c.png)
![image](https://user-images.githubusercontent.com/36496259/62850262-ac14e180-bd25-11e9-95c3-93c15b3b1370.png)
But the state print outside this function has the newest data:
![image](https://user-images.githubusercontent.com/36496259/62850340-ee3e2300-bd25-11e9-8972-ca04835eeb35.png)


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.9.0",Support
https://github.com/facebook/react/issues/16370,16370,useEffect does not get executed again after 16.8.0-alpha1,[],closed,FALSE,,0,2019-08-12T19:00:06Z,2019-08-12T19:04:10Z,2019-08-12T19:04:10Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
It is a bug

**What is the current behavior?**
As seen in this [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy), the useEffect gets updated every 500ms as expected and mentioned in the docs:  

> Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update.

But if the react version is updated to a newer version, the timeout is called, the setCounter is called with 1 again (after the second run) which leads to a rerender of the component, but the effect is not executed as expected (2 is not called again and there is no loop).  As mentioned in the docs, use Effect without a second parameter should create a loop by calling the setTimeout again after setCount. But this is not the case for versions above 16.8.0-alpha1. Is this intended or not?

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
This [codepen](https://codesandbox.io/s/react-hooks-playground-k8hxy) works by creating a infinity loop. But updating the react version here 
![image](https://user-images.githubusercontent.com/17567991/62890380-aa5a1680-bd43-11e9-8f6c-0e026510365a.png)

will break the functionality and will not loop again because the useEffect is note executed if the prevoiusState === currentState. But the component gets rerendered anyway.

If the intended behavior is not the rerender the component if the state is the same, console.log(1) should not be called. So either the useEffect does not work as intended, or it is not intended that  useState triggers a rerender, if the state is the same.


**What is the expected behavior?**
The expected behavior is for the useEffect to be called in a loop even if the state is the same and the functional component is rendered.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.8.0-alpha1 works, version above it do not.

Thanks for your time and I really enjoy coding with React. Keep it up.",Other
https://github.com/facebook/react/issues/16375,16375,Type of ContextProvider value props from useReducer,[],closed,FALSE,,1,2019-08-13T02:40:20Z,2019-08-15T12:58:23Z,2019-08-15T12:58:23Z,NONE,completed,,"I did a chunk of code to use `useContext` and `useReducer` to achieve the local state management. 

But some type errors poped up,

```javascript
(property) state: Group
Type '{ state: Group; dispatch: Dispatch<Action>; }' is not assignable to type 'Group'.
  Object literal may only specify known properties, and 'state' does not exist in type 'Group'.ts(2322)
index.d.ts(290, 9): The expected type comes from property 'value' which is declared here on type 'IntrinsicAttributes & ProviderProps<Group>'
```

To make the type `Group` to `any` will fix the problem and working well, but I don't really want to do that.

Here's the code:

    interface People {
      name: string
      age: number
    }
    
    interface Group {
      a: People
      b: People
    }
    
    interface Action {
      type: string
      payload: number
    }
    
    // const myInitalState: Group = {
    const myInitalState: any = {
      a: {
        name: 'Max',
        age: 16
      },
      b: {
        name: 'Pom',
        age: 22
      }
    }
    
    const myReducer = (state: Group, {type, payload}: Action) => {
      switch (type) {
        case 'a_increase':
          return {...state, a: { ...state.a, age: payload + 1 }}
        case 'b_decrease':
          return {...state, b: { ...state.b, age: payload - 1 }}
        default:
          return state
      }
    }
    
    const MyContext = createContext(myInitalState)
    
    const [state, dispatch] = useReducer(myReducer, myInitalState)
    
    const Comp = () => (
      // this state will cause type error, change myInitialState type to any will fix it
      <MyContext.Provider value={{state, dispatch}}>
        <div>Group</div>
               .
               .
               .
      </MyContext.Provider>
    )

So what's going on here? What's the correct type of `<MyContext.Provider value={???}>`.",Other
https://github.com/facebook/react/issues/16410,16410,React DevTools tutorial instructions are hard to read,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2019-08-15T22:35:58Z,2019-08-17T20:25:03Z,2019-08-16T04:53:37Z,NONE,completed,,"**What is the current behavior?**
https://react-devtools-tutorial.now.sh/

The text on the left is difficult to read because of thin font styling
<img width=""461"" alt=""Screen Shot 2019-08-15 at 3 32 36 pm"" src=""https://user-images.githubusercontent.com/8007686/63131305-0e622200-bf72-11e9-867a-e94551a1c422.png"">
<img width=""467"" alt=""Screen Shot 2019-08-15 at 3 35 42 pm"" src=""https://user-images.githubusercontent.com/8007686/63131388-5da85280-bf72-11e9-9d11-401600713bed.png"">


**What is the expected behavior?**
Increase the contrast on the top row buttons and increase the font-weight for the text

font-weight: 300 or 400 makes it easier to read
(300 pictured)

<img width=""467"" alt=""Screen Shot 2019-08-15 at 3 35 42 pm"" src=""https://user-images.githubusercontent.com/8007686/63131491-c099e980-bf72-11e9-9195-2ee571f384f8.png"">


Running Catalina latest, macOS.",Other
https://github.com/facebook/react/issues/16417,16417,"Error: ""Could not find commit data for root ""1"" and commit null""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-08-16T09:48:27Z,2019-08-16T15:09:19Z,2019-08-16T15:08:34Z,NONE,completed,,"<!-- please provide repro information here -->

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.2-2bcc6c6

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16552)
    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293513)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)
    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25092)

Component stack: in pl
    in div
    in ml
    in div
    in div
    in Or
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Ua
    in le
    in ve
    in ko
    in Fl",Bug
https://github.com/facebook/react/issues/16419,16419,DevTools: react-devtools-tutorial.now.sh > editing-props-and-state have a bad state,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-08-16T11:43:51Z,2019-08-16T20:10:21Z,2019-08-16T20:10:20Z,NONE,completed,bvaughn,"I don't know who's making the bug, so reporting here. I'll move to correct repo if someone helps me debug it.
**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**
Please watch below screencast:
https://drive.google.com/file/d/1KMP44qsZ4y3MwrLLDdnOzPZ8z5mMElFP/view

1. Goto https://react-devtools-tutorial.now.sh/editing-props-and-state
2. Change the last ListItem prop to isComplete from `false` to `true`.
3. Click the checkbox in the view to change the state again from `true` to `false`.
**What is the expected behavior?**
It should just change the state of that ListItem. Instead, it's adding 3 more in the list with duplicate keys.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Latest React.
Mac, Chrome Version 75.0.3770.142 (Official Build) (64-bit)
",Bug
https://github.com/facebook/react/issues/16420,16420,React Router + Lazy + Suspense (CSS not loaded correctly on IE11),"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-08-16T12:31:14Z,2019-09-03T22:49:51Z,2019-09-03T22:49:51Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug.

**What is the current behavior?**
I use react-router with *lazy* and *suspense* to lazy load routes and chunck my bundle (large application).

_Chrome :_
Everything work perfect : css loaded, good display and bundle chunks.

_IE 11:_
I get a bad display : wrong css margin, dimensions, sizes, colors, css vars not loaded...
I get my bundle chuncks.
If I refresh the page (or F5) I get the correct display.
If I remove *lazy* I have the correct display.

```javascript
const MyPage = (
  lazy(() => (
        import('./path/MyPage')
  ))
);

<Router>
      <Suspense fallback={<div />}>
        <Switch>
          <Route path=""./my-page"" component={MyPage} />
        </Switch>
      </Suspense>
</Router>
```

**What is the expected behavior?**
Same result on IE and Chrome.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Browser affected: IE11.
React version : 16.8.6
React Router Dom : 5.0.1.

Thanks.",Other
https://github.com/facebook/react/issues/16435,16435,useReducer become bad if I open the chrome react-dev-tool and click the react dom node,[],closed,FALSE,,2,2019-08-17T08:48:12Z,2019-08-19T09:45:38Z,2019-08-17T15:23:59Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
### bug
___
**What is the current behavior?**
i have [issue](https://github.com/facebook/react/issues/16347) been closed, so I `CHANGE` my writing way, I am very confused these days about the bug, just see the code below:
```jsx
import React, { useReducer } from 'react';

let cursor = 1;
function getCursor() {
  return cursor;
}
function incCursor() {
  cursor++;
}
const cursor_ref_ = {};//map cursor to ref

// always return new state
function reducer(initState, partialState) {
  Object.assign(initState.state, partialState);
  return Object.assign({}, initState);
}

// make setState handler with dispatch
const makeSetState = (cursor, ccDispatch) => {
  // broadcast is true by default, that means any ref call setState will trigger other ref update ui
  return (state, broadcast = true) => {
    console.log(`%c cursor ${cursor} update state`, 'color:purple; border:3px solid purple;');
    if(broadcast){
      console.log(`%c cursor ${cursor} broadcast state`, 'color:purple; border:3px solid purple;');
      Object.keys(cursor_ref_).filter(v => v != cursor).forEach(c => {
        const ref = cursor_ref_[c];
        console.log(`%c start trigger cursor ${c} setState`, 'color:blue; border:3px solid blue;');
        // flag broadcast false, let it only change ref state self
        ref.ctx.setState(state, false);
      });
    }
    ccDispatch(state)
  }
}

// initState is the target state that service for user 
function useMySpecialHook(initState) {
  const tmpCursor = getCursor();
  const [ccState, ccDispatch] = useReducer(reducer, { state: initState, cursor: tmpCursor });
  const targetCursor = ccState.cursor;
  let isFirstRendered = targetCursor === tmpCursor;

  let ref;
  if (isFirstRendered) {
    incCursor();
    console.log(`%c make setState for cursor ${targetCursor}`, 'color:green; border:3px solid green;');
    ref = {
      ctx: {
        cursor: targetCursor,
        state: ccState.state,
        setState: makeSetState(targetCursor, ccDispatch),
      }
    };
    cursor_ref_[targetCursor] = ref;
  } else {
    // get the ref by cursor
    ref = cursor_ref_[targetCursor];
    // replace state
    ref.ctx.state = ccState.state;
    console.log(`%c replace cursor ${targetCursor} setState `+targetCursor, 'color:red; border:3px solid red;');

    // in re-render period, alway assign a latest setState handler to ref.ctx
    ref.ctx.setState = makeSetState(targetCursor, ccDispatch);
  }

  return ref.ctx;
}

export default function DemoCounter() {
  const { state, setState } = useMySpecialHook({ count: 100 });
  const dispatch = ({ type }) => {
    if (type === 'increment') setState({ count: state.count + 1 });
    else setState({ count: state.count - 1 });
  }
  const changeCount = () => {
    setState({ count: Date.now() });
  }
  return (
    <div style={{ border: '1px solid blue', margin: '8px' }}>
      <h2>DemoCounter</h2>
      Count: {state.count}
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
      <button onClick={changeCount}>setState</button>
    </div>
  );
}
```
then I  import Counter component and init 2 instance(at least 2) in `index.js`, and I click any one of them's inc button or dec button, the other one will been trigger rendered also, it works perfectly, but if I open the chrome react dev-tool, and click one react dom node in the tool, things become bad, it does't work agian/(ㄒoㄒ)/~~，if you don't understand what I said, just see the [video](https://concentjs.github.io/concent-site/bug-video.html)

<p>
<video id=""video"" controls="""" preload=""none"">
<source id=""mp4"" 
src=""https://concentjs.github.io/concent-site/bug-video.html"" type=""video/mp4"">
</video>
</p>


**What is the expected behavior?**
no matter if I click the react dom node in the dev-tool or not, the two instance will always been trigger rendered. please run the copy the code and run it in your computer, it is really strange, if I change component from hook to class(I mean take over class ins's setState, some examples like: https://stackblitz.com/edit/cc-complex-counter), it is always fine!!!! react-dev-tool does no matter to these code, but for hook, I don't know why it become bad if I click the react dom node in the dev-tool...

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
react: 1.16.9
react dev tool: lastest",Support
https://github.com/facebook/react/issues/16443,16443,[eslint-plugin-react-hooks] JSON.stringify in ehaustive-deps,"[{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,2,2019-08-18T11:14:12Z,2020-01-24T14:22:32Z,2020-01-24T14:22:32Z,NONE,completed,,If it's practical and safe to use `[JSON.stringify(foo)]` in deps for light weight objects i think plugin should not report a warning in that case.,Other
https://github.com/facebook/react/issues/16461,16461,Initial state from props,[],closed,FALSE,,7,2019-08-19T20:41:18Z,2019-09-03T08:47:11Z,2019-09-03T08:47:11Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature Request

**What is the current behavior?**
Currently, the only way to reflect a prop change that serves as the initial state for the `useState` hook is via an explicit `useEffect` call.

```js
const TodoList = ({ todos: initialTodos }) => {
  const [todos, setTodos] = useState(initialTodos);

  useEffect(() => setTodos(initialTodos), [initialTodos]);
  
  return (
    <ul>
      {todos.map(todo => (
        <li onClick={/* Do something that setTodos */}>{todo.title}</li>
      )}
    </ul>
  )
}
```

This is not particularly a rare use case. Like, displaying any filterable list in which the items need to be acted upon is basically a use case.

**What is the expected behavior?**
The first thing that comes to mind, would be adding a second argument, which is, you guessed it, a dependency array.

```js
const TodoList = ({ todos: initialTodos }) => {
  const [todos, setTodos] = useState(initialTodos, [initialTodos]);
  
  return (
    <ul>
      {todos.map(todo => (
        <li onClick={/* Something that setTodos */}>{todo.title}</li>
      )}
    </ul>
  )
}
```

There's probably a lot that I'm missing and there might be an obvious reason why this is not the actual behavior.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Latest.",Support
https://github.com/facebook/react/issues/16499,16499,Wrong tab suggestion label in DevTools,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-08-20T01:15:56Z,2019-09-03T17:38:50Z,2019-09-03T17:38:50Z,MEMBER,completed,,The popups that appear when you click on React icon still say “React tab will appear to the right”. But the tab label has changed. ,Bug
https://github.com/facebook/react/issues/16506,16506,"Error: ""Could not find commit data for root ""1896"" and commit 16""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-08-20T10:06:36Z,2020-02-10T19:19:34Z,2020-02-10T19:19:34Z,NONE,completed,,"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.4-3c6a219

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:16721)
    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293207)
    at pl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:293442)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)

Component stack: in pl
    in div
    in div
    in Or
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Ha
    in le
    in ve
    in ko
    in Ul",Other
https://github.com/facebook/react/issues/16521,16521,React throws an error when using onSelectStart,[],closed,FALSE,,7,2019-08-21T07:49:03Z,2019-09-03T10:38:48Z,2019-09-03T10:38:48Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
When setting this event handler property, React throws an error.

Example jsx:

```jsx
<div
  onSelectStart={e => e.preventDefault()}
>
  Test
</div>
```

React throws the following error:

`Warning: Unknown event handler property `onSelectStart`. It will be ignored.`

Codesandbox link: https://codesandbox.io/embed/holy-violet-4unq8

**What is the expected behavior?**
React is aware of `onSelectStart` and connects to `onselectstart` correctly, without throwing an error

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested on latest desktop (linux) Chromium and Firefox with react/react-dom 16.8.6 and 16.9.0, react-scripts 3.0.1 and 3.1.0.

c.f. https://github.com/facebook/react/issues/15787
",Support
https://github.com/facebook/react/issues/16523,16523,Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons,[],closed,FALSE,,2,2019-08-21T09:50:00Z,2019-08-26T09:50:55Z,2019-08-26T09:50:55Z,NONE,completed,,"In ErrorPage Component this error is coming at last statement of ""export default connect(...) "".
```jsx
import React, { Component } from 'react'
import { connect } from 'react-redux';

class ErrorPage extends Component {
    state = {}
    render() {
        return (
            <div>
                ErrorPage;
            </div>
        );
    }
}
const mapStateToProps = (state) => {
    console.log('====================================');
    console.log(state);
    console.log('====================================');
}


export default connect(mapStateToProps, null)(ErrorPage);
```",Support
https://github.com/facebook/react/issues/16531,16531,eslint-plugin-react-hooks v2.0.0 is not loaded correctly.,[],closed,FALSE,,3,2019-08-21T19:08:42Z,2019-08-21T19:46:52Z,2019-08-21T19:46:52Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug (maybe)

**What is the current behavior?**

`eslint-plugin-react-hooks` is not loaded correctly.

[`eslint-plugin-react-hooks@2.0.0/index.js`](https://unpkg.com/browse/eslint-plugin-react-hooks@2.0.0/index.js) is not the correct file. [`packages/eslint-plugin-react-hooks/npm/index.js`](https://github.com/facebook/react/blob/06728290533bce24b0893461c3f4ddc1547f85b4/packages/eslint-plugin-react-hooks/npm/index.js) should be used.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```console
$ cd $(mktemp -d)
$ yarn add -D eslint eslint-plugin-react-hooks
$ touch test.js
$ yarn eslint --plugin react-hooks test.js
yarn run v1.17.3
warning package.json: No license field
$ /tmp/tmp.nAQkiU0etB/node_modules/.bin/eslint --plugin react-hooks test.js
Error: Failed to load plugin 'react-hooks' declared in 'CLIOptions': Cannot find module './src/index'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:582:15)
    at Function.Module._load (internal/modules/cjs/loader.js:508:25)
    at Module.require (internal/modules/cjs/loader.js:637:17)
    at require (/tmp/tmp.nAQkiU0etB/node_modules/v8-compile-cache/v8-compile-cache.js:161:20)
    at Object.<anonymous> (/tmp/tmp.nAQkiU0etB/node_modules/eslint-plugin-react-hooks/index.js:10:18)
    at Module._compile (/tmp/tmp.nAQkiU0etB/node_modules/v8-compile-cache/v8-compile-cache.js:194:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)
    at Module.load (internal/modules/cjs/loader.js:600:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)
    at Function.Module._load (internal/modules/cjs/loader.js:531:3)
error Command failed with exit code 2.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

**What is the expected behavior?**

Plugin is loaded successfully.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

only `eslint-plugin-react-hooks@2.0.0`
",Bug
https://github.com/facebook/react/issues/16550,16550,Devtools scrollbar hides flamegraph,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2019-08-23T02:55:42Z,2021-04-28T20:38:47Z,2021-04-28T20:38:47Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
scrollbar is covering flamegraph

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
current
![current](https://user-images.githubusercontent.com/3931792/63563638-b09a8f00-c59c-11e9-95fc-627dcea023b6.png)

without scrollbar, there is more graphs hidden by scrollbar
![without scrollbar](https://user-images.githubusercontent.com/3931792/63563645-b8f2ca00-c59c-11e9-917e-8c63be90cb2d.png)

**What is the expected behavior?**
scrollbar does not cover flame graph or if flamegraph's height is long enough to use scrollbar, flamegraph container's width should shrink about scrollbars width 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.9 / chrome 78.0.3887.7 / macOS 10.14.6 /  
",Bug
https://github.com/facebook/react/issues/16551,16551,"Error: ""Could not find node with id ""339"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-08-23T10:18:20Z,2019-08-23T14:42:43Z,2019-08-23T14:42:26Z,NONE,completed,bvaughn,"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.5-5441b09

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11441
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11387)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11920)
    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:277765)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:98280)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363

Component stack: in xi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl",Other
https://github.com/facebook/react/issues/16562,16562,DevTools: TypeError: Cannot read property '0' of null,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-08-23T18:43:03Z,2019-08-23T20:40:51Z,2019-08-23T20:40:32Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
When using the latest Dev tools (v4.0.5) on my project, when I inspect react-redux elements that use connect() devtools crashes. I can't map from my crash to the actual source but the code is react devtools: build/backend.js
```
 useMemo: function(e, t) {
            var n = w()
              , r = null !== n ? n.memoizedState[0] : e(); // <-- here n exists, but n.memoizedState itself is null
            return v.push({
                primitive: ""Memo"",
                stackError: new Error,
                value: r
            }),
            r
        },
```

up one level of stack is react: 
```
function useMemo(create, inputs) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, inputs);
}
```

and up one level is react-redux: (https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L199)
```
const childPropsSelector = useMemo(() => {
        // The child props selector needs the store reference as an input.
        // Re-create this selector whenever the store changes.
        return createChildSelector(store)
      }, [store])
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
I'll have to try and make a small repro, but I hope there's something obvious given the info above. It's not clear to me if react-redux is doing something or if its devtools. This behavior existed in v3 and i was hoping it'd get magically fixed with v4 but it remains.

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
This is in an electron app w/ react-redux v7.1.0 and react v16.8.3 (have to use this due to the version of react native i'm on)
",Bug
https://github.com/facebook/react/issues/16568,16568,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 1""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-08-26T03:49:43Z,2019-08-26T15:38:27Z,2019-08-26T15:38:14Z,NONE,completed,,"PLEASE INCLUDE REPRO INSTRUCTIONS AND EXAMPLE CODE

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.5-5441b09

Call stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5744)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8526)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:275512)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55890)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62939)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99535)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84255)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81285)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25363
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:51:4368)

Component stack: in bi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl",Other
https://github.com/facebook/react/issues/16583,16583,IE11 polyfill seems to be not working with react-scripts build,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-08-27T11:36:47Z,2019-09-03T07:22:38Z,2019-09-03T07:22:38Z,NONE,completed,,"Imported below polyfills in the index.js and using react-scripts build for creating the bundle as suggested for fixing the initial page loading issue.
```js
import 'react-app-polyfill/ie11';
import 'react-app-polyfill/stable'
```
But seems to be not working after the initial page load and throwing invalid object error in console with details like invalid symbol and is happening while doing a `this.props.history.push` method call and an error seems to be occurring from `confirmTransitionTo` method in `history` as anonymous function.

Also using the below browser list
```json
  ""browserslist"": {
    ""production"": [
      "">0.2%"",
      ""not dead"",
      ""not op_mini all"",
      ""ie 11""
    ],
    ""development"": [
      ""last 1 chrome version"",
      ""last 1 firefox version"",
      ""last 1 safari version"",
      ""ie 11""
    ]
  }
```

Using below version for react/ react scripts/polyfill.
```json
""react-scripts"": ""^3.1.1"",
 ""react"": ""^16.8.6"",
 ""react-app-polyfill"": ""^1.0.2"",
```

Please let me know if any one else face this similar issues and any working fixes.


",Other
https://github.com/facebook/react/issues/16593,16593,Stucking in an infinite loop when add some breakpoints between  `ReactFiberWorkLoop.js#L876` and `#L891``,[],closed,FALSE,,4,2019-08-28T07:28:16Z,2019-09-02T00:25:21Z,2019-09-02T00:25:21Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
maybe a bug
**What is the current behavior?**
In `ReactFiberWorkLoop.js`,if you add some **breakpoint** between line 876 and 891,It seems the condiction in [#L881](https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L881) always pass,and it return `renderRoot` as continuation,which cause an infinite loop.
It seems the  `currentTime` equal to  `expirationTime` if without any breakpoints.

**What is the expected behavior?**
Maybe it's not a bug,it only happens when you add a breakpoint between line 876 and line 891.
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.9.0, Chrome",Other
https://github.com/facebook/react/issues/16596,16596,Devtools flamegraph component sizes are not proportional to render time,[],closed,FALSE,,7,2019-08-28T12:08:11Z,2019-08-28T21:31:33Z,2019-08-28T14:57:47Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**: Bug

**What is the current behavior?**
The flamegraph appears to be intended to show the component tree with each component sized proportional to the time taken to render it & its children. Either it doesn't do this reliably, or the relative sizes are intended to show something else (in which case: I don't know what). As an example:

![Screenshot from 2019-08-28 13-53-00](https://user-images.githubusercontent.com/1526883/63853615-7580cd00-c99b-11e9-83b9-0a53d1d954c6.png)

Compare the sizes of `pane1` & `pane2` (the two direct children of the highlighted SplitPane). Pane1 is approx 75% of the size, and took 3.7ms to render, whilst Pane2 is 25% of the size and took 23.2ms.

This UI encourages me to focus on Pane1, but Pane2 is definitely what I should be looking at.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**

I'm not sure of the steps to reproduce this in general, but it's completely reliable when profiling my application in quite a few places, I think this is likely a general issue. Not sure, but I suspect comparing the numbers and relative sizes when profiling any substantial render will find odd mismatches.

Let me know if that doesn't seem to be true, and I'll find time to do some more testing & build a proper repro.

**What is the expected behavior?**

The components should be sized relative to their overall render time, so you can easily find the most expensive component trees.

It's totally possible that the bug here is that my expectations are wrong, in which case I'd love to know what this is _supposed_ to show, and imo it'd be worth considering showing the proportional render time instead.

**Which versions of React, and which browser / OS are affected by this issue?**

React: 16.6.3
Chrome: 75.0.3770.142 
React devtools addon: `Created from revision a39d9c3 on 8/26/2019.` 
",Support
https://github.com/facebook/react/issues/16604,16604,How should we set up apps for HMR now that Fast Refresh replaces react-hot-loader?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,93,2019-08-28T23:30:26Z,2022-10-25T06:17:09Z,2020-08-10T12:02:59Z,NONE,completed,,"Dan Abramov mentioned that Devtools v4 will be making `react-hot-loader` obsolete: https://twitter.com/dan_abramov/status/1144715740983046144?s=20

> **Me:**
> I have this hook:
> ```require(""react-reconciler"")(hostConfig).injectIntoDevTools(opts);```
> But HMR has always worked completely without it. Is this now a new requirement?

> **Dan:**
> Yes, that's what the new mechanism uses. The new mechanism doesn't need ""react-hot-loader"" so by the time you update, you'd want to remove that package. (It's pretty invasive)

I can't see any mention of HMR in the Devtools documentation, however; now that `react-hot-loader` has become obsolete (and with it, the `require(""react-hot-loader/root"").hot` method), how should we set up apps for HMR in:

* React DOM apps
* React Native apps
* React custom renderer apps

I'd be particularly interested in a migration guide specifically for anyone who's already set up HMR via `react-hot-loader`.

Also, for HMR, does it matter whether we're using the standalone Devtools or the browser-extension Devtools?",Support
https://github.com/facebook/react/issues/16616,16616,"Error: ""Cannot modify filter preferences while profiling""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-08-30T06:58:11Z,2019-08-30T15:23:31Z,2019-08-30T15:23:31Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at n.set (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:1:34098)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:261228
    at Fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:72851)
    at Vi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:74577)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:93355
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)
    at kt (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25093)
    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:91165)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:79859)
    at M (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:2839)

Component stack: in Ma
    in div
    in div
    in div
    in Ga
    in Xa
    in div
    in lo
    in ir
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl",Other
https://github.com/facebook/react/issues/16620,16620,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 38""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-08-30T13:41:45Z,2019-08-30T14:36:38Z,2019-08-30T14:36:27Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Start profiling app, record and reload page
2. going through profilers commits
3. crush

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at d (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:5745)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:8527)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:275553)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:25364
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:4368)

Component stack: in bi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl",Other
https://github.com/facebook/react/issues/16645,16645,React devtools always launches in Chrome,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-09-03T19:15:32Z,2019-09-03T21:16:16Z,2019-09-03T21:15:40Z,NONE,completed,,"Hi.

I have the extension installed on both chrome and firefox. My default browser is firefox. Each time I try to debug a react native app remotely it launches chrome to use the debugger there.

How do I change the default browser for devtools to Firefox?",Other
https://github.com/facebook/react/issues/16651,16651,DevTools: Allow editing props that weren't passed initially,[],closed,FALSE,,2,2019-09-04T02:57:21Z,2019-09-04T07:39:55Z,2019-09-04T07:39:55Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

Currently we can only edit the props that were passed to the component:

![image](https://user-images.githubusercontent.com/619186/64222327-15f85500-cea6-11e9-9420-59ae25017fe4.png)


**What is the expected behavior?**

But the component has other props (e.g. `loading`, `type`, etc) that weren't passed to this specific instance. And we should be able to play with them in the devtools similar to how Chrome allow us to add new css:

![Kapture 2019-09-03 at 23 55 57](https://user-images.githubusercontent.com/619186/64222438-72f40b00-cea6-11e9-92f8-2b5b72ab1b43.gif)


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Latest

@bvaughn ",Other
https://github.com/facebook/react/issues/16661,16661,There is no 'rendered by' section in my extension,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-09-04T20:55:04Z,2019-09-04T22:18:49Z,2019-09-04T22:18:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Support
https://github.com/facebook/react/issues/16676,16676,Different components with the same key replicate when toggling the key,[],closed,FALSE,,1,2019-09-05T21:26:40Z,2019-09-05T21:53:21Z,2019-09-05T21:53:21Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?** bug

**What is the current behavior?**

In the following program:

```jsx
import ""./styles.css"";

import React, {useState} from ""react"";
import {render} from ""react-dom"";

function App() {
  const [locked, setLocked] = useState(false);

  return (
    <>
      <button onClick={() => setLocked(x => !x)}>Toggle</button>
      <ul>
        <Part1 key={locked} />
        <Part2 key={locked} />
      </ul>
    </>
  );
}

function Part1() {
  return <li>Part 1</li>;
}

function Part2() {
  return <li>Part 2</li>;
}

render(<App />, document.getElementById(""root""));
```

Pressing “toggle” creates new copies of the `<Part1 />` component forever. See this Codesandbox: https://codesandbox.io/embed/suspicious-edison-gwhjk

**What is the expected behavior?**

My expectation here is either that:

- React will warn about two different component types with the same key,
- or React will unmount the component when the key changes.

The latter is how I thought React worked.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Discovered this issue when upgrading from React 15 to 16. The issue does not exist in React 15.",Other
https://github.com/facebook/react/issues/16682,16682,Is it possible to disable all contexts within the specified subcomponent?,[],closed,FALSE,,1,2019-09-06T10:34:18Z,2019-09-06T10:39:36Z,2019-09-06T10:39:35Z,NONE,completed,,"Here is an example. I want that contexts work in PageOne and PageTwo, but all subcomponents of SandBox won't get any context. How can I achieve it?

```jsx
const ContextA = React.createContext('a');
const ContextB = React.createContext('b');

class App extends React.Component {
  render() {
    return (
      <ContextA.Provider value=""A"">
           <ContextB.Provider value=""B"">
              <PageOne />
              <PageTwo />
              <SandBox>
                  <SubPage />
              </SandBox>
           </ContextB.Provider>
      </ContextA.Provider>
    );
  }
}

function SubPage() {
  return (
    <ContextA.Consumer>
      {a => (
        <ContextB.Consumer>
          {b => (
            <Content />
          )}
        </ContextB.Consumer>
      )}
    </ContextA.Consumer>
  );
}
```",Support
https://github.com/facebook/react/issues/16690,16690,Troubleshooting instructions link update,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-09-06T21:16:35Z,2019-09-25T16:18:59Z,2019-09-25T16:18:59Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Link to troubleshooting instructions in the devtools extension disabled popup is outdated. It is pointing [here](https://github.com/facebook/react-devtools/blob/master/README.md#the-react-tab-doesnt-show-up) which is redirecting [here](https://github.com/facebook/react).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
https://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html
Link needs to be updated- not sure what the correct link is

**What is the expected behavior?**
https://github.com/facebook/react/blob/master/packages/react-devtools-extensions/popups/disabled.html
Link needs to be updated- not sure what the correct link is",Bug
https://github.com/facebook/react/issues/16691,16691,DevTools: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,25,2019-09-06T22:12:51Z,2020-08-21T13:31:17Z,2020-08-21T13:31:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Report a bug.

**What is the current behavior?**

New dev tools are working fine. But I have a particular component that, when it mounts, the dev tools no longer can inspect anything about it. When I select it, the right hand side just says ""Loading..."" and nothing ever loads.

![interactive](https://user-images.githubusercontent.com/1316441/64463256-95fa0700-d0c0-11e9-9d7b-a853854a1bfe.gif)

As you can see from the gif above, before I click on that particular component that seems to break, I have no errors in my console. But as soon as I click on the component that breaks (or any of its children) the number of console errors goes up by one.

The error in the console looks like this:

![Screen Shot 2019-09-06 at 4 08 14 PM](https://user-images.githubusercontent.com/1316441/64463296-bc1fa700-d0c0-11e9-9cf4-4dd5fa10ff72.png)

```
backend.js:1 Uncaught DOMException: Failed to execute 'postMessage' on 'Window': #<HTMLAllCollection> could not be cloned.
    at Object.send (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:1:94424)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js:9:5785
```

Hard to provide steps to reproduce this since it's a custom component with business-specific logic (so can't provide the code). But I tried google-ing this problem and error and nothing showed up. So figured posting it here might help if others out there on the interwebs are having the same issue and they can comment here.

**What is the expected behavior?**

Inspecting any mounted component will work.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Currently on react/react-dom 16.3 and the previous dev tools worked just fine. I could inspect any component and see it's data. But the [latestest update](https://reactjs.org/blog/2019/08/15/new-react-devtools.html) broke that.
",Bug
https://github.com/facebook/react/issues/16711,16711,"Error: ""Could not find node with id ""44300"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2019-09-09T15:10:14Z,2020-01-02T16:59:04Z,2019-09-09T15:28:25Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Reading the flamegraph of my React app
2. Clicked on one of the options in the `Rendered at` list of the graph
  ![image](https://user-images.githubusercontent.com/41026008/64542778-69710580-d2e1-11e9-8846-ab1b810e034c.png)
3. This caused the below error to appear in React DevTools.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.0.6-a39d9c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11442
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11388)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11:11921)
    at xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:56:277807)
    at Ha (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:55891)
    at bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:62940)
    at Xl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:99536)
    at Hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:84256)
    at Fl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43:81286)

Component stack: in xi
    in div
    in div
    in div
    in Ir
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Wa
    in ce
    in be
    in So
    in Vl",Other
https://github.com/facebook/react/issues/16719,16719,npm start error on Mac,[],closed,FALSE,,4,2019-09-10T01:19:24Z,2019-09-11T22:56:13Z,2019-09-10T07:58:52Z,NONE,completed,,"I keep getting this error when plugging in npm start to the system. Any ideas?

`Davids-MacBook-Air:davidsapp davidnogueira$ npm start

> davidsapp@0.1.0 start /Users/davidnogueira/Documents/React:Redux/davidsapp
> react-scripts start

sh: react-scripts: command not found
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn
npm ERR! davidsapp@0.1.0 start: `react-scripts start`
npm ERR! spawn ENOENT
npm ERR! 
npm ERR! Failed at the davidsapp@0.1.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/davidnogueira/.npm/_logs/2019-09-10T01_15_07_461Z-debug.log
Davids-MacBook-Air:davidsapp davidnogueira$ `",Other
https://github.com/facebook/react/issues/16729,16729,Eclipse running js : Uncaught SyntaxError: Unexpected identifier ,[],closed,FALSE,,1,2019-09-10T10:22:05Z,2019-09-11T13:33:41Z,2019-09-11T13:33:23Z,NONE,completed,,"D:\javaworkspace\APP_TEST\main.js:1
import Vue from 'vue'
       ^^^

SyntaxError: Unexpected identifier
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:622:3)


Newbie in the js. Someone tell me to put in the availablr .jar, but I dont understand how to adjust the environment of my code.
By the way, it's the code that I copy from net . I try to learn a simple app but after copy it confuse me.",Other
https://github.com/facebook/react/issues/16744,16744,Devtools: Allow saving and loading a profiler run as JSON,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-09-11T00:17:56Z,2020-09-13T13:38:51Z,2019-09-11T15:54:40Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Feature
**What is the current behavior?**
Currently, a profiler run is lost when reloading/refreshing the react app. This makes it hard to compare profiler runs across changes to the react code and use the profiler in CI/CD situations.

**What is the expected behavior?**
Be able to download a completed profiler run as json. Be able to upload a profiler run to react devtools for review later. Be able to trigger react devtools profiler programmatically. Be able to save a react devtools profiler run programmatically.
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Devtools V4.",Other
https://github.com/facebook/react/issues/16746,16746,"React.Children.map(children, function[(thisArg)]) feature",[],closed,FALSE,,3,2019-09-11T07:58:00Z,2019-09-13T15:15:04Z,2019-09-13T15:15:04Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
feature
**What is the current behavior?**
React.Children.map(children, function[(thisArg)]) feature 
we must pass children arg, but in most case it is this.props.children
so why not set a default value 
so that we can use like this 
```js
React.Children.map(function[(thisArg)]) 
//or
React.Children.map(children, function[(thisArg)]) 

```
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/16761,16761,useState() bug - state value different from initial value,[],closed,FALSE,,1,2019-09-12T11:41:22Z,2019-09-12T15:55:50Z,2019-09-12T15:55:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a _feature_ or report a bug?**

Bug

**What is the current behavior?**

I have an Input component that uses `useState()` to handle the state of its floating label, like this:

```
const FloatingLabelInput = props => {
  const {
    value = ''
  } = props

  const [floatingLabel, toggleFloatingLabel] = useState(value !== '')
```

I have a series of those components and you'd expect `initialFloatingLabel` and `floatingLabel` to be always the same, but they're not for some of them! I can see by logging the values:

```
  const initialFloatingLabel = value !== ''
  console.log(initialFloatingLabel)
  const [floatingLabel, toggleFloatingLabel] = useState(initialFloatingLabel)
  console.log(floatingLabel)
```

As a result some of the components have the label in floating state (Postcode and Address Line 1) when they shouldn't (because they're empty), like this:

<img width=""524"" alt=""Screen Shot 2019-09-12 at 12 17 39"" src=""https://user-images.githubusercontent.com/1765942/64780453-4ef49180-d558-11e9-8dd9-9f7dbe362aff.png"">

A very interesting fact is that, if I reorder the fields, it will always be the two first fields that are affected, like in the image above.

These fields are part of a multi-step form (using [Formik](https://github.com/jaredpalmer/formik)) and the steps are handled by a state machine (using [xstate](https://github.com/davidkpiano/xstate)) library. This problem happens only on Step 2. If I set the machine to start on step 2 on app load, this will not happen.

That's on Google Chrome - on Safari, a different subset of fields are affected. There is consistency on which fields are affected in each browser though (if I don't change their order)

**What is the expected behavior?**

If you pass an initial value to `useState()`, the state variable should always be equal to that:

```
const [value, setValue] = useState(initialValue)
```

(```value``` must _always_ be equal to ```initialValue```)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: Version 16.8.5
Google Chrome: Version 76.0.3809.132
OS: MacOS Mojave Version 10.14.1
",Support
https://github.com/facebook/react/issues/16765,16765,Add third parameter to useState to get current value,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-09-12T14:45:25Z,2019-09-12T19:01:59Z,2019-09-12T15:47:30Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

If you set a callback on something, e.g. inside useEffect, your callback captures the current value of that state and can never update it. To know the most up-to-date value, you currently have to call the setter with a function containing the new value, even if you only return the value you receive from it. Cf. https://stackoverflow.com/questions/57847594/react-hooks-accessing-up-to-date-state-from-within-a-callback#comment102122412_57847594

**What is the expected behavior?**

There should be a way to access the current state via a getter for these situations. Adding this as a third return value from useState would be non-intrusive and backwards compatible.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

n/a",Support
https://github.com/facebook/react/issues/16774,16774,react-hooks/exhaustive-deps suggesting wrong dependency,[],closed,FALSE,,3,2019-09-13T12:29:00Z,2019-09-13T18:39:16Z,2019-09-13T12:33:55Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

The react-hooks/exhaustive-deps rule suggests an incorrect dependency.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```js
function useSomething(search: string) {
  const request = useAxios({ url });

  useEffect(() => {
    if (search.length >= 3) {
      request.execute();
    }
  }, [request.execute, search]); // missing dependency `request` is shown

  useEffect(() => {
    if (request.response) {
      console.log('success');
    }
  }, [request.response]);

  return { request };
}
```

**What is the expected behavior?**

`request.execute` should be fine as a dependency, just like `request.response`. However I get a warning that I should use `request` as a dependency which is wrong (it changes more often than `request.execute` and I just use `request.execute` in my effect).

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

`eslint-plugin-react-hooks@2.0.1`",Support
https://github.com/facebook/react/issues/16785,16785,Using a custom hook on multiple rendered components causing unexpected results,[],closed,FALSE,,2,2019-09-15T08:18:21Z,2019-09-15T15:21:27Z,2019-09-15T15:21:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
I want to report an unexpected behavior I found while using a custom hook not sure if it's a possible bug or miss understanding of how custom hooks functions.


**What is the current behavior?**
Using a custom hook on multiple components, only 1 component receives updates other components don't.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React:**

**CodeSandbox:** (https://codesandbox.io/s/react-custom-hooks-nkcn6)

**What is the expected behavior?**
expected behavior is to receive same updates on all child components.

**Note** : I'm not looking for a solution because i already found mine, (using the custom hook on the parent container and pass props to child components). 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Version : 16.8
",Other
https://github.com/facebook/react/issues/16791,16791,React Hooks don't work inside function without export default.,[],closed,FALSE,,8,2019-09-16T11:50:56Z,2019-09-17T17:45:05Z,2019-09-17T17:45:04Z,NONE,completed,,"Hello, I'm trying to call the useContext hook inside a function and I get the following error 
![image](https://user-images.githubusercontent.com/33375759/64955422-de6bae80-d890-11e9-9ef3-4e119d2ba1d2.png).
This is the code that I'm trying to make it work using hooks.

`
import {MaterialUIComponentsNavigation} from 'app/main/documentation/material-ui-components/MaterialUIComponentsNavigation';
import {authRoles} from 'app/auth';
import React, {useContext, useState} from ""react"";
import TextContext from ""../TextContext"";

export function NavigationConfig () {
  const test = useContext(TextContext);
  console.log(""Navigation"",test)
return test;
}
`
And for a reason or another if I change the syntax to export default instead of just export it works. I couldn't find any explanation online (trust me I've tried) and I think this is a bug. My React versions is > 16.8.0 so that's not the issue. 

 


",Support
https://github.com/facebook/react/issues/16840,16840,React dev tools not showing (blank),"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,TRUE,,50,2019-09-20T07:00:25Z,2020-10-29T22:21:06Z,2019-09-23T19:58:25Z,NONE,completed,bvaughn,"i was working with it a while ago but now it will only show nothing in the Components tab. I tried everything, reinstalled or even try on a different browser. I even restarted my PC. 
![Screenshot from 2019-09-20 14-53-15]

![Screenshot from 2019-09-20 14-53-15](https://user-images.githubusercontent.com/41131879/65306178-5dc1f080-dbb7-11e9-85e1-f3c7319ddd59.png)
",Bug
https://github.com/facebook/react/issues/16845,16845,“Definition for rule '@typescript-eslint/consistent-type-assertions' was not found”,[],closed,FALSE,,4,2019-09-20T20:09:10Z,2019-11-01T18:21:32Z,2019-09-21T00:01:41Z,NONE,completed,,"Hi,

There is a bug in the Create-react-app CLI.
Currently if you use and old package.json that has the : react-scripts: ^3.1.1 version. 
and you run npm i and then try to rum the site (npm start) you get the following error:

“Definition for rule '@typescript-eslint/consistent-type-assertions' was not found”

I solved this by deleting the node_module entirely, then I updated my package.json file to use the ""react-scripts: 3.1.2"" version. then i run the npm i again, and it fixed the issue.

It looks like the new create-react-app doesn't backward support the react-scripts: 3.1.1 version.

Please check this ASAP since I already see posts in StackOverflow, meaning a lot of people are going to encounter this issue.

Thanks.",Other
https://github.com/facebook/react/issues/16847,16847,it is a Hook BUG 2?,[],closed,FALSE,,1,2019-09-21T08:06:21Z,2019-09-21T09:21:57Z,2019-09-21T09:21:57Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
when i click twice , that only add once

http://jsfiddle.net/jLsephbr/",Support
https://github.com/facebook/react/issues/16848,16848,React DOM SSR crashes since React-Dom 16.6.2,"[{""id"":178761159,""node_id"":""MDU6TGFiZWwxNzg3NjExNTk="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Regression"",""name"":""Type: Regression"",""color"":""e11d21"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-09-21T12:03:22Z,2021-03-24T18:36:53Z,2021-03-24T18:36:53Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
I've setup an SSR configuration using ReactDOM.renderToString() method with react-apollo, and it throws an Invariant violation as the following, with no more information about:

<img width=""297"" alt=""Captura de pantalla 2019-09-21 a la(s) 6 29 37"" src=""https://user-images.githubusercontent.com/33379285/65372722-36136c80-dc39-11e9-8342-90369c2055e5.png"">

Everything returns to normal when downgrading to react-dom@16.6.1

*My SSR App component*

<img width=""600"" alt=""Captura de pantalla 2019-09-21 a la(s) 6 33 24"" src=""https://user-images.githubusercontent.com/33379285/65372762-b9cd5900-dc39-11e9-9045-143146e0baf9.png"">

*Things I've tried*

- I have changed the react-dom package to serve the development version (./cjs/react-dom-server.node.development.js), just for debugging, and when importing that version, everything works fine, but when I return to the production version (./cjs/react-dom-server.node.production.min.js) the same error appears.

- I removed one by one, every component wrapping my `<App/>`, and the one that seems to be causing the error is the `<AuthProvider>`, which is a context implementation of mine. By removing some things on that component, i figured out that is a problem within a HOC provided by react-apollo, but I don't know exactly what it is because it doesn't show me any information.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I actually do not have any way to reproduce it quickly.

**What is the expected behavior?**
Render correctly the website.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React - 16.9.0
React-DOM - 16.9.0
Browsers - Safari and Chrome (tested)

Working if downgrading to React-DOM 16.6.1
",Other
https://github.com/facebook/react/issues/16854,16854,[npm:create-react-class] Support PureComponent & propTypes,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,10,2019-09-22T23:12:45Z,2020-01-16T20:59:45Z,2020-01-16T20:59:45Z,NONE,completed,,"https://reactjs.org/docs/react-without-es6.html

The ""react without es6"" page should give explanation on how to use the equivalent of a `PureComponent` using `create-react-class` npm package. I Couldn't figure out how to do it. The page seems to be very outdated with new react features.

If it's not possible to do, this issue should be a feature request.",Other
https://github.com/facebook/react/issues/16855,16855,bug on ie/edge v16.9 (scheduler) ,[],closed,FALSE,,2,2019-09-23T00:34:37Z,2019-11-24T15:48:12Z,2019-11-24T15:48:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
BUG

**What is the current behavior?**
It seems that scheduler v0.15.0 use methods from window (e.g., `setTimeout`, `requestAnimationFrame`) that are not properly bound to `window`, breaking in ie11 and edge with react-dom v16.9.0.
Problem in PRODUCTION mode (development is ok).

**Repo (full example)**: https://github.com/artola/react-bug

See [README](https://github.com/artola/react-bug/blob/master/README.md) in the repo for a detailed explanation.

**What is the expected behavior?**
It should work as in previous versions, e.g., v16.8.6

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Offending version: v16.9.0
Affected browsers: ie (confirmed ie11, might be others) and edge (17 might be others).
Former versions v16.0.0 up to v16.8.6 working properly.
",Support
https://github.com/facebook/react/issues/16858,16858,Calling setState multiple times in hooks causes the previous state to be overridden,[],closed,FALSE,,6,2019-09-23T10:06:19Z,2022-09-20T20:46:27Z,2019-09-23T19:53:03Z,NONE,completed,,"[online link](https://codesandbox.io/s/condescending-clarke-nn93u)

The fetch is a public method of querying data and needs to be independent
Since setState is asynchronous, the visible value of setState in fetch is still false
How can I put the popover to close and update the list without changing the fetch method?

thanks advance! :)",Support
https://github.com/facebook/react/issues/16904,16904,More time between releasing @next and @latest,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-09-26T14:18:06Z,2021-03-24T18:37:17Z,2021-03-24T18:37:17Z,CONTRIBUTOR,completed,,"As a library author, I test against both the `@next` and `@latest` versions of `react` and `react-dom` (as well as 16.3, the oldest version we support). The rationale for that is to know up front if the upcoming version of React is going to break our library. I think this is good practice for everyone involved.

Unfortunately, when 16.9 was released, there was only 1 week between promoting the RC to `@next`, and promoting that to `@latest`. Because the last RC broke the way `act` works, I had only 1 week to fix our unit test suite, which was all the sudden mostly failing. In fact we had to wait for `react-testing-library` to be updated to deal with this change.

Luckily I was able to scramble and find time to fix this before the final release, but this won't always be the case. I imagine other library authors may struggle with this too. As such I would like to see at least a 2 week window between `next` and `latest`. I hope that's feasible.

Please advise if there's a better way to test for future compatibility.",Support
https://github.com/facebook/react/issues/16910,16910,Bootstrap select element not rendered with react-router,[],closed,FALSE,,2,2019-09-26T20:43:56Z,2019-09-26T21:06:55Z,2019-09-26T21:06:54Z,NONE,completed,,"I am making a basic app in reactjs. I've setup routes for 3 components. The problem is select fields don't appear when the component is rendered.

The select fields that have className as ""selectpicker"" do not render, they just aren't there. They showed up when I removed ""selectpicker"" from the className. When using ""selectpicker"", they show up when the browser page is reloaded.

You can read more about it here [stackoverflow.com/questions/58116697/bootstrap-select-element-not-rendered-with-react-router?noredirect=1#comment102635378_58116697](url)

Here is a sample on codesandbox [ codesandbox.io/s/elegant-platform-5vpq2](url)
JUST COPY PASTE THE ABOVE LINKS IN YOUR BROWSER
It is working perfectly on codesandbox but not with visual studio code. The problem arises only when I sure react routing. They work perfectly when i try to render them individually without routes.

Below is a snippet from my code: Component A and B both are almost similar.

```import React from 'react';
import Home from './Home'
import A from ""./A""
import B from ""./B""
import C from ""./C""
import {BrowserRouter as Router, Switch, Link, Route} from ""react-router-dom""

class App extends React.Component{
  constructor(){
    super()
  }
    render(){
      return(
        <div>
          <Router>
            <ul>
              <li><Link to=""/"">TO A</Link></li>
              <li><Link to=""/page1"">TO B</Link></li>
              <li><Link to=""/page2"">TO C</Link></li>
            </ul> 
            <Switch>
              <Route exact path='/' component={A}/>
              <Route path='/page1' component={B}/> 
              <Route path=""/page2"" component={C}/>
           </Switch>
          </Router>
        </div>
      )
    }
}

export default App```




```{/*Component A*/}

import React from ""react""

class A extends React.component{
  constructor(){
    super()
    this.state={
      componentA: """"
    }
    this.handleChange = this.handleChange.bind(this)
  }

  handleChange(event){
    const {name, value, type, checked} = event.target
    type === ""checkbox"" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })
  }

  render(){
    return(
      <div className=""form-group row"">
        <label htmlFor=""tempid"" className=""col-sm-2 col-form-label"">Choose an option</label>
        <div className=""col-sm-10"">
            <select 
              className=""form-control custom-select selectpicker""
              name = ""componentA"" 
              id = ""tempid""
              value = {this.state.componentA}
              onChange = {this.handleChange} 
              required
            >
              <option value="""" style={{display:""none""}} disabled selected>Choose one</option>
              <option value=""p"">P</option>
              <option value=""q"">Q</option>
              <option value=""r"">R</option>
              <option value=""s"">S</option> 
            </select>
        </div>
      </div>
    )
  }
}
export default A```


Following is my index.html file, and i have included the bootstrap and bootstrap-select correctly. Its working fine when rendering the components individually. The problem arose when I started with routing.

<!DOCTYPE html>
<html lang=""en""><head>
  <meta charset=""utf-8"">

  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <meta name=""theme-color"" content=""#000000"">
  <meta name=""description"" content=""Web site created using create-react-app"">

  <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"" integrity=""sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"" crossorigin=""anonymous"">
  <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.10/css/bootstrap-select.min.css"">


  <title>React App</title>

</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id=""root""></div>

  <script src=""https://code.jquery.com/jquery-3.3.1.slim.min.js"" integrity=""sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"" crossorigin=""anonymous""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"" integrity=""sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"" crossorigin=""anonymous""></script>
  <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"" integrity=""sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"" crossorigin=""anonymous""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.10/js/bootstrap-select.min.js"" type=""text/javascript""></script>

</body></html>


",Support
https://github.com/facebook/react/issues/16924,16924,react-devtools: tiny feature request (copy to clipboard related),"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,9,2019-09-27T12:02:35Z,2020-01-16T20:59:53Z,2020-01-16T20:59:53Z,NONE,completed,,"Hey guys, great job with the new devtools 💯 perhaps this request can be put in the backlog for a future release as I think it could be quite useful and could save a few steps for developers. 

**What is the current behavior?**
- Copying data to clipboard stringifies all key-value pairs of an object
- When the keys' values happen to be objects or arrays, the values are given in constructor form rather than seeing the contents of that object/array

This is what was copied:
<img width=""369"" alt=""Screen Shot 2019-09-27 at 12 24 19"" src=""https://user-images.githubusercontent.com/30755017/65767498-f4496100-e125-11e9-8f8b-3faa4516d0c2.png"">

This is a pasted version in VSCode:
<img width=""399"" alt=""Screen Shot 2019-09-27 at 12 24 48"" src=""https://user-images.githubusercontent.com/30755017/65767486-ee538000-e125-11e9-9886-7dcd165c19db.png"">

**What is the desired behavior?**
- When I click on ""Copy to clipboard"" in react-devtools, my copied object's data _keys_ and _values_ are in an unstringified format, or at least, I am presented the option to have this copied in an unstringified format
- The _values_ of each key is readable, e.g: if the value is an object, I can see the expanded object and all its key-value pairs clearly as shown here (this is logged into Chrome console from react-devtools)
<img width=""311"" alt=""Screen Shot 2019-09-27 at 12 29 11"" src=""https://user-images.githubusercontent.com/30755017/65767365-99176e80-e125-11e9-98d3-98fd9c4889f9.png"">

",Other
https://github.com/facebook/react/issues/16933,16933,"Error: ""Minified React error ",[],closed,FALSE,,2,2019-09-27T21:35:51Z,2019-09-28T00:13:25Z,2019-09-27T23:52:57Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/16954,16954,Why will Suspense for data fetching require a cache?,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,12,2019-09-29T21:56:33Z,2020-10-04T06:20:10Z,2020-10-04T06:20:10Z,CONTRIBUTOR,completed,,"I'm [integrating Suspense with React Async](https://github.com/async-library/react-async/pull/153), and I've been reading up on how it's supposed to work. All the resources I found talk about needing `react-cache` or another cache mechanism for Suspense to work properly. However, none of the resources explain WHY Suspense needs a cache. Could someone explain that? I've been able to [make it work without a cache](https://github.com/async-library/react-async/pull/153/files#diff-2d8d9c51cb93c9f7f57c81f6f7f1669a). Am I missing something?",Support
https://github.com/facebook/react/issues/16957,16957,Webkit inline styles dissapears in Firefox,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2019-09-30T13:39:44Z,2020-01-09T22:24:02Z,2020-01-09T22:24:02Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**: *bug*

**What is the current behavior?**
Missing `-webkit-print-color-adjust: exact;` in Firefox

**Demo**:
1. Run https://stackblitz.com/edit/react-skxixb in Firefox and Chrome
2. Check CSS for `.header`

**What is the expected behavior?**
`-webkit-print-color-adjust: exact;` should be placed in all browsers

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.9.0 and 16.10.1
Windows 10
Firefox 69.0.1",Bug
https://github.com/facebook/react/issues/16959,16959,panel,[],closed,FALSE,,0,2019-09-30T15:53:59Z,2019-09-30T15:54:31Z,2019-09-30T15:54:31Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/16995,16995,Hooks for Class Based Components,[],closed,FALSE,,3,2019-10-03T07:22:56Z,2019-10-03T16:55:22Z,2019-10-03T16:55:21Z,CONTRIBUTOR,completed,,"I have been thinking a lot about hooks and I want to share my idea on a possible addition that I believe will simplify hook logic -- adding Hooks to classes. I will be able to best explain my idea by giving out an example:

```jsx
const SomeComponent = ({ props }) => {
   const [state, setState] = useState('test');
   const someFn = useCallback(() => {
       ...
   }, [props.name]);
   useEffect(() => {
      someFn();  
   }, [state]);

   ...
}
```

In the code above, we are using hooks to essentially imitate class behaviors. Additionally, because the component is a function, we need to add things like `useCallback`; so that, the function does not get recreated. However, these things have been solved in classes for a very long time. Even React's class components solved these problems. What if this kind of API is added to React:

```jsx
class SomeComponent extends React.NewComponent {
    someFn = () => {
        // use this.props here
    }

    state = new State('test');
    effect1 = new Effect(this.effectFn, [this.state]);

    effectFn = () => {
        const val = this.state.getValue();
        someFn();
        // or state.setValue('some other value')
    }

    render() {
        // you can use this.state.getValue() here
        return (

        );
    }
}
```

What problem does this solve? This eliminates the rule that all hooks have to be at the top of the function. This is because classes already have this behavior implemented. It is intuitive --- you can't use loop or conditions outside the class methods. Secondly, this eliminates hooks such as `useCallback` or `useRef` (for non DOM related things) because functions are not recreated during every render.

What about dependencies in Effect? For dependencies, if a State instance is passed, the Effect hook will check if it is changed using different means (e.g State can have a ""stale"" member variable that gets updated from reconciler; then the effect uses that variable to check state. Or Effect can store the dependencies and do the normal checking using `state.getValue`).

What about custom hooks? React provides a ""CustomHook"" base class that developers can use. So, let's say I want to write a hook to fetch data:

```jsx
class FetchHook extends React.CustomHook {
    loading = new State(false);
    data = new State([]);
    error = new State(null);

    effect = new Effect(this.effectFn);

    effectFn = async () => {
        try {
            this.loading.setValue(true);
            const response = await fetch(this.props.url); // i'll talk about this in a bit
            const data = await response.json();       
            this.loading.setValue(false);
            this.data.setValue(data);
        } catch (e) {
            this.loading.setValue(false);
            this.error.setValue(e);            
        }
    }

    getLoading() {
         return this.loading.getValue();
    }

    getData() {
         return this.data.getValue();
    }

    getError() {
         return this.error.getValue();
    }
}
```

Then, we can just add it to our components:

```jsx
class SomeComponent extends React.NewComponent {
    fetch = new FetchHook(someUrl);
    render() {
          const loading = this.fetch.getLoading();
          const error = this.fetch.getError();
          const data = this.fetch.getData();
          // ...
    }
}
```

React.Hook base class (React.CustomHook and React's own hooks are derived from it) has a function called `update` or `run` that initializes all the necessary things for the hooks. The reconciler can check whether the class field is an instance of React.Hook to do the necessary updates etc.

**Why?**

In my opinion, combined with Hooks, React's composability is an implementation of [Entity-Component-System](https://en.wikipedia.org/wiki/Entity_component_system). Game Developers use this technique to set up entities (e.g a Tree or a Vehicle) in their game world. We are essentially using the same technique to set up entities (React Components) for UI. If we go on the comparison route, this is how I see it: Entity = React Component, Hooks = Components, System = React Reconciler + Renderer.

In general, ECS systems really shine when using classes. Writing components and assigning them to entities feels natural. We are using all the class features (class fields, methods, inheritance) to abstract away what is going on behind the scenes. However, with current state of using hooks with functions, React essentially created these class features in for functions. For example, a function is never recreated in a class. So, we need a `useCallback` to imitate the same behavior in function components. Same goes for `useRef` (excluding ref-ing to DOM) to imitate class member variables.

In terms of developer experience, using objects instead of functions have one major difference. At least for me, this is how it was when I was using class components. When using class member variables that are only defined (not called), it makes it simpler to think in React because I can assume that React calls these functions. If they are Hook objects (non-existent yet), I can assume that React calls their respective functions. In these two instances, React is doing the work on the components. However, when using hooks as functions, the flow is reversed: we are telling React what to do instead of letting React do what it wants based on our component logic. It almost looks like we are writing into React instead of just using React. This is something that I experienced when trying to think in Hooks. 







",Feature
https://github.com/facebook/react/issues/17002,17002,Are there any react official UI templates which I can make use?,[],closed,FALSE,,1,2019-10-03T13:24:53Z,2019-10-03T14:59:10Z,2019-10-03T14:59:10Z,NONE,completed,,,Support
https://github.com/facebook/react/issues/17009,17009,Focus on undocked DevTools window on element click,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-10-03T21:48:26Z,2019-10-09T16:22:36Z,2019-10-09T16:22:30Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
I don't believe this is a bug, but I wouldn't necessarily call this a feature. 

Rather just how the React Components Tab compares to chrome's Elements Tab node selector behavior.

**What is the current behavior?**
If I have an undocked DevTools: 

Elements Tab:
- Using the node selector tool, when I select and click on a node the devtools comes into focus with the node selected. 

Components Tab: 
- Using the component's node selector tool, when I select and click on a node the devtools doesn't come into focus -- though the node is properly selected.


**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

I made a screen recording of the current behavior: 
https://www.loom.com/share/ceeb458681774a9ebadc82732546ea54

**What is the expected behavior?**

It'd be great if the Component's element select tool would bring the undocked devTools into focus when selecting node.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

DevTools version: 4.1.3 (9/30/2019)
Browser: Chrome Version 77.0.3865.75 
OS: OSX 10.14.5

I don't recall if this worked in the previous React DevTools.

---

If this is a desired behavior I'd like to help contribute. If so, besides the contributing guidelines what files/docs would be a good to start tackling this? 
",Other
https://github.com/facebook/react/issues/17038,17038,Components not correctly displayed,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-10-08T08:07:27Z,2019-10-10T14:53:35Z,2019-10-09T17:44:43Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

elements not reconized

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

only use components tab in console of chrome.

**What is the expected behavior?**

see any elements react

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Window 10 64bit
react ^16.8.1


![image](https://user-images.githubusercontent.com/13313/66378070-068f8e80-e9b3-11e9-9956-cd8b98525efb.png)

This is my console component visualizzation, the same page visualizated with linux&chrome not have any issue",Support
https://github.com/facebook/react/issues/17060,17060,"'exhaustive-deps' lint rule warns that ""Outer scope values"" aren't valid when a hook is inside a function","[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,9,2019-10-10T05:09:49Z,2020-08-07T13:07:06Z,2020-06-26T04:00:52Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
Inside a functional component, an inner function with a dependency on value from an outer function triggers the warning, ""Outer scope values like '....' aren't valid dependencies because mutating them doesn't re-render the component.""

See: https://codesandbox.io/s/custom-hook-repro-3wfly

Here's the crux of the problem

```tsx
const List = (props: IListProps) => {
  const { items } = props;

  // Using the useMemo hook here doesn't complain, e.g. -
  // const names = useMemo(() => items.map(item => item.name), [items]);

  // Using the useMemo hook inside a function complains
  const names = useItemNames();

  return (
    <>
      <h2>There are {items.length} items in the list</h2>
      <section>
        {names.map(name => (
          <div>{name}</div>
        ))}
      </section>
    </>
  );

  ////////////////////

  function useItemNames() {
    // es-lint warns here: Outer scope values like 'items' aren't valid dependencies 
    // because mutating them doesn't re-render the component
    return useMemo(() => items.map(item => item.name), [items]);
  }
};
```

**What is the expected behavior?**
The eslint rule shouldn't be triggered.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
* React v16.10.2
* So far as I can tell, this hasn't worked previously.",Other
https://github.com/facebook/react/issues/17076,17076,"Want to understand the ""is"" method logic ""react.dom.development.js"" line number 4230",[],closed,FALSE,,1,2019-10-13T11:32:56Z,2019-10-13T11:45:00Z,2019-10-13T11:45:00Z,NONE,completed,,"/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}


Could anybody explain this logic why we are comparing the two previous and next value dependencies in the above fashion?
While it could be simply compared like x === y

This comparison is happening for the ""useMemo"" dependency comparison. 
",Support
https://github.com/facebook/react/issues/17080,17080,Are useEffect clean-ups called in the wrong order ?,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,8,2019-10-13T23:48:58Z,2020-02-15T15:03:37Z,2020-02-15T15:03:37Z,NONE,completed,,"**What is the current behavior?**

I'm trying to write a small `Title` component to render nested document titles. However the kinda unexpected order in which effect clean-up functions are called makes it impossible to do this : 

```javascript
import { Children, useEffect } from 'react'

export default ({ children }) => {
  const subtitle = Children.toArray(children).join('')
  useEffect(() => {
    const root = document.title
    document.title = `${subtitle} - ${root}`
    console.log('Wrote', document.title)
    return () => {
      document.title = root
      console.log('Restored', document.title)
    }
  }, [subtitle])
  return null
}
```

Here is a loosy sketch of my component structure (handled with `@reach/router`) : 

```
App                     // contains <Title>App</Title>
> Dashboard             // contains <Title>Dashboard</Title>
> Profile               // contains <Title>Profile</Title>
> Project               // contains <Title>Project</Title>
  > Calendar            // contains <Title>Calendar</Title>
```

Each one of these components calls my `Title` component. Everything works fine when going from profile to dashboard or from dashboard to project. But when I jump from calendar to dashboard, the document title gets messed up because the clean-up in Project is called **before** the clean-up in Calendar even though Calendar is a child of Project, which is kinda unexpected and makes tree side-effect logic using (just) `useEffect` simply impossible.

The order in which the effect functions are called is a direct reflection of the order in which the components are nested. Shouldn't the clean-up functions be called following the exact reverse order ? Isn't that one of the goals of a clean-up ?

When I navigate to the calendar and then back to the dashboard, I get the following logs : 

```
Wrote App
Wrote Project - App
Wrote Calendar - Project - App
Restored App                          // This should happen after...
Restored Project - App                // ...this.
Wrote Dashboard - Project - App       // This is messed up.
```

[codesandbox here](https://codesandbox.io/s/vigilant-feynman-0jxwb?fontsize=14)

**What is the expected behavior?**

Here is what I expected and what I would get if clean-ups in children were to be called before clean-ups in parents : 

```
Wrote App
Wrote Project - App
Wrote Calendar - Project - App
Restored Project - App
Restored App
Wrote Dashboard - App
```

I'm using React 16.10.2.

This ugly workaround works by ""forcing"" the order of what the clean-ups do (by keeping manually track of the effect functions' order and then just going the other way) : 

```javascript
const stack = []

export default ({ children }) => {
  const subtitle = Children.toArray(children).join('')
  useEffect(() => {
    stack.push(document.title)
    document.title = `${subtitle} - ${last(stack)}`
    return () => {
      document.title = stack.pop()
    }
  }, [subtitle])
  return null
}
```",Other
https://github.com/facebook/react/issues/17090,17090,Misleading (?) wording in documentation,[],closed,FALSE,,7,2019-10-15T04:57:40Z,2019-10-27T09:52:47Z,2019-10-27T09:52:46Z,CONTRIBUTOR,completed,,"> A custom Hook is a JavaScript function whose name starts with ”use” and that **may** call other Hooks.

Source: https://reactjs.org/docs/hooks-custom.html#extracting-a-custom-hook

What I find misleading is the verb _may_.

What's the point of a custom hook that doesn't call any React's hook internally? It doesn't hook to React's internals... it also needn't to follow the rules of hook, and still works perfectly fine. I would say it is just a normal function whose name starts with _use_. 

Am I missing something?",Support
https://github.com/facebook/react/issues/17098,17098,"input[type=""number""] fires onChange twice when clicking Chrome arrows",[],closed,FALSE,,4,2019-10-15T21:24:48Z,2019-10-17T13:52:10Z,2019-10-17T12:47:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
With an `input[type=""number""]`, in Chrome (confirmed only on OSX), clicking the up or down arrow inside the input increments or decrements the number twice. See example: https://codesandbox.io/s/silly-voice-syphy. 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/silly-voice-syphy. 

```jsx
function App() {
  const [number, setNumber] = React.useState(0);

  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <input
        type=""number""
        value={number}
        step=""1""
        onChange={event => {
          setNumber(event.target.value);
        }}
      />
    </div>
  );
}
```

**What is the expected behavior?**
It should only increment it once. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Tested on React 16.10.2 and 16.8. I've confirmed this happens in Chrome on OSX, but not Firefox on OSX. 
",Other
https://github.com/facebook/react/issues/17117,17117,Change ref mechanism to ids' ,[],closed,FALSE,,2,2019-10-16T19:32:41Z,2019-11-02T06:36:21Z,2019-10-17T05:53:27Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
A feature request

**What is the current behavior?**
Right now when we write a component and we need a reference to it - we need to use the ref feature. Thats a cool thing but the syntax is a bit cumbersome as the developer needs to write code to declare it and also the JSX part. 

**What is the expected behavior?**
As a suggestions - developers already know and understand the usage of 'id' as a unique attribute of an element. What if the syntax would be something like `<div id=""foo"" ...>` or  `<div idName=""foo"" ...>` (copying the syntax of className). 
If React behind the scene would generate a reference with that name, or with adding dynamic-string to it - that would make the code a bit shorter, and more readable and natural
If this is implemented inside an iterator, we can do something like `<div id=""{'${index'}_foo}"" ...>` and if the developer doesn't apply something dynamically in it - have the compiler throw an error or something.  

",Support
https://github.com/facebook/react/issues/17123,17123,"Error: ""Could not find commit data for root ""226"" and commit 6""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-10-16T21:55:57Z,2019-10-21T21:53:37Z,2019-10-21T21:53:28Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Record a 5 second profile in the React Profiler Tab
2. Switch the React root in the dropdown

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.0-a8b8ffb89

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)
    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)
    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)
    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)
    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)
    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721

Component stack: in sc
    in div
    in div
    in _o
    in Unknown
    in n
    in Unknown
    in div
    in div
    in zi
    in Ge
    in un
    in ba
    in Rc",Other
https://github.com/facebook/react/issues/17126,17126,React this.context returns empty object {},[],closed,FALSE,,4,2019-10-17T09:29:27Z,2019-10-17T14:47:44Z,2019-10-17T14:47:44Z,NONE,completed,,"it is 2 days now I'm trying to solve this nonsense riddle. I've read all documentations and answers related to this but no specific answer for my case. I run my code both on React Native 0.61 (React version 16.9.0) and Snack playground.

**Problem is: console.log(this.context) always returns empty object like this - {}**
**I must return provider value when passed console.log(this.context)** 

The code is:
`import React from 'react';
import { Text } from 'react-native';

const AppContext = React.createContext({})

class App extends React.Component {
  state = {
    products: [
      { id: 'p1', title: 'Gaming Mouse', price: 29.99 },
      { id: 'p2', title: 'Harry Potter 3', price: 9.99 },
    ],
    cart: []
  };

  render() {
    return (
      <AppContext.Provider
        value={{
          products: this.state.products
        }}
      >
      </AppContext.Provider>
    );
  }
}


export default class testScreen extends React.Component {
  static contextType = AppContext

  render() {
    console.log(this.context)

    return (
      <>
        <Text>{'Sometext'}</Text>
      </>
    );
  }
}
`

I need help urgently, because it ties my hands to go further. Thank you in advance.",Support
https://github.com/facebook/react/issues/17134,17134,React Devtools should produce a better error message when integers are present as keys on react elements,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2019-10-18T08:42:25Z,2019-10-29T15:41:49Z,2019-10-29T15:41:49Z,NONE,completed,bvaughn,"Current behavior: React Devtools throws ""RangError: Invalid Array Length"" when integers are used as keys on react elements. 

Example: 

https://codesandbox.io/s/interesting-violet-v5c5j

https://v5c5j.csb.app/

Using anything but strings as keys is as far as I understand not even correct usage, but it would be great if react devtools checked a little bit earlier and had a nicer error than ""RangeError: Invalid Array Length."" It takes a long time to figure out from this message that one somehow managed to use integers as keys and needs to correct it.

I've only tested with Chrome and the latest version of react devtools as a chrome extension. ",Bug
https://github.com/facebook/react/issues/17156,17156,Eslint plugin for Hooks gives warning about dispatch in dependencies,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-10-21T11:27:22Z,2020-03-11T18:41:53Z,2019-10-22T01:43:50Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug.

**What is the current behavior?**

If I don't include `dispatch` in the dependency list of a `useCallback` hook, I get this warning:

```
React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.eslint(react-hooks/exhaustive-deps)
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

See line 50 in `Application.js`: https://codesandbox.io/s/competent-bash-47zt1

**What is the expected behavior?**

There should be no warning, as per the [React docs](https://reactjs.org/docs/hooks-reference.html#usereducer):

> React guarantees that dispatch function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- react@16.10.2
- react-dom@16.10.2
- eslint-plugin-react-hooks@1.7.0
- eslint@6.5.1
- dbaeumer.vscode-eslint@1.9.1
- vscode@1.39.2",Support
https://github.com/facebook/react/issues/17166,17166,preventDefault() on pointerdown events don't work as expected on Chrome for Android,[],closed,FALSE,,3,2019-10-22T01:26:38Z,2019-10-22T23:37:30Z,2019-10-22T22:39:08Z,NONE,completed,,"**Do you want to request a feature or report a bug?**
I would like to report a bug.

**What is the current behavior?**
Reproduction CodeSandbox: <https://codesandbox.io/s/pointerdown-prevent-default-react-5f8by>

On Chrome for Android (tested on Chrome 77.0.3865.116):
1. Click on ""Without preventDefault() on pointerdown"": `pointerdown`, `mousedown`, `focus`, `mouseup` and `click` are triggered.
2. Click on ""With preventDefault() on pointerdown"": All of the previous events are triggered as well.

The [Pointer Events spec](https://www.w3.org/TR/pointerevents/#the-pointerdown-event) specifies that canceling the `pointerdown` event (if the `isPrimary` property is `true`) prevents the firing of certain compatibility mouse events (i.e. `mouseup` and `mousedown`).

On a React app, this work as expected on the current versions of the desktop apps I tested. It also works as expected on iOS Safari.

**What is the expected behavior?**
Clicking on ""With preventDefault() on pointerdown"": Should only trigger `pointerdown` and `click` events.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Tested on React 16.10.2 on Chrome for Android (Chrome 77.0.3865.116). Didn't work on React 16.8.6 either.",Other
https://github.com/facebook/react/issues/17176,17176,Unnecessary re-render functional components,[],closed,FALSE,,2,2019-10-24T19:51:48Z,2021-09-07T07:37:27Z,2019-10-29T18:19:19Z,NONE,completed,,"Hi,

I was thinking about functional components and performance enhancements.
Doing some tests, I noticed that react re-render children provided by functional components again when parent updates, even when they just render a static JSX (don't receive props or use any value provided by a useState hook, for example, like `const Component = () => <h1>Hellow World!</h1>`).
But using a `React.memo` HOC (with or without a mocked `propsAreEquals` function as argument, like `() => true`) the behavior is the expect ""don't re-render"". Do this really necessary? I think React can jump this automatic, because the component don't have a trigger can change its final result.
Or, am I not noticing something?
It is easy to replicate this test case, but I can provide a test repository if necessary.
What do you think?
I use devTools highlights to see render events.",Support
https://github.com/facebook/react/issues/17179,17179,Dynamic import with Hook.,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-10-24T22:07:11Z,2020-12-09T15:51:00Z,2019-10-29T18:16:25Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Report a bug.

**What is the current behavior?**

Trying dynamic import with hooks and fail with this error: 

> Should have a queue. This is likely a bug in React. Please file an issue.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

```
   const [PathTest, setPathTest] = useState("""");

  import(`Layout/ModalTest`).then(module => setPathTest(module.default))
```

**What is the expected behavior?**

Dynamic import with hooks.  This is a example with class component:

import(`${path}`).then(module => this.setState({ module: module.default }))

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

    ""react"": ""^16.9.0"",Debian,Vivaldi.

",Support
https://github.com/facebook/react/issues/17182,17182,React_.createContext is not a function,[],closed,FALSE,,7,2019-10-25T10:15:47Z,2019-10-29T10:50:49Z,2019-10-29T10:50:49Z,NONE,completed,,"Hi so i have been trying to implement react context api into my project, After follow the steps in the guide: https://developerhandbook.com/react/build-a-complete-property-listings-page-with-react/

I ended up getting an error when i tried to display some of the information.

This is the error i got in my console log:
```

OrderListProvider.js:6 Uncaught TypeError: __WEBPACK_IMPORTED_MODULE_0_react__.createContext is not a function
    at Object../src/context/OrderListProvider.js (OrderListProvider.js:6)
    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)
    at fn (bootstrap 39db4eed0e38b5656c68:88)
    at Object../src/components/Home.js (FetchData.js:3)
    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)
    at fn (bootstrap 39db4eed0e38b5656c68:88)
    at Object../src/App.js (fetch.js:461)
    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)
    at fn (bootstrap 39db4eed0e38b5656c68:88)
    at Object../src/index.js (index.css?f255:26)
    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)
    at fn (bootstrap 39db4eed0e38b5656c68:88)
    at Object.0 (registerServiceWorker.js:108)
    at __webpack_require__ (bootstrap 39db4eed0e38b5656c68:678)
    at bootstrap 39db4eed0e38b5656c68:724
    at bootstrap 39db4eed0e38b5656c68:724
```

I tried updating my react since the guide mentioned i need 16.3 at least, and i only had 16.0.0.

However after updating react to the newest version it still says the same thing. I can’t seem to find any information about it in the release notes on github.

This is my createContext function:

```

const OrderListContext = React.createContext(DefaultState);


```

And this is where i consume it:
```
<OrderListProvider>
                <OrderListConsumer>
                    {function (value) {
                        const { orderList } = value
                        return (
                            <ul>
                                {orderList.map(listing => (
                                    <li>{listing.varetitle}</li>
                                ))}
                            </ul>
                        )
                    }}
                </OrderListConsumer>
            </OrderListProvider>


```
This is my package.json
```
{
  ""name"": ""React_Demo"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""dependencies"": {
    ""bootstrap"": ""^4.3.1"",
    ""react"": ""^16.11.0"",
    ""react-bootstrap"": ""^0.32.4"",
    ""react-dom"": """"^16.11.0"""",
    ""react-router-bootstrap"": ""^0.25.0"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-scripts"": ""3.2.0"",
    ""rimraf"": ""^3.0.0""
  },
  ""scripts"": {
    ""start"": ""rimraf ./build && react-scripts start"",
    ""build"": ""react-scripts build"",
    ""test"": ""react-scripts test --env=jsdom"",
    ""eject"": ""react-scripts eject""
  }
}
```
I have recreated my code in stackblitz without data from a fetch funktion: https://stackblitz.com/edit/react-ssqc4t It doesn't seem to show the error so i don't understand why my code doesn't work in visual studio 2017

I have also tried to verify and clear my npm cache, but it still shows the same error.

Node.js have also been updates to the newest version. Still the same error.

",Support
https://github.com/facebook/react/issues/17186,17186,[concurrent mode]  useMemo and useState are initialized twice,[],closed,FALSE,,1,2019-10-26T00:11:57Z,2019-10-26T00:59:33Z,2019-10-26T00:59:33Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Report a bug

**What is the current behavior?**

In concurrent mode, `useMemo` and `useState` appear to be initialized twice.

**What is the expected behavior?**

`useMemo` callback is only called when dependencies change and`useState` initializer is only called once. https://codesandbox.io/s/upbeat-glade-cndru

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

`0.0.0-experimental-f6b8d31a7`

This bug only happens in concurrent mode. Legacy mode works as expected.
",Support
https://github.com/facebook/react/issues/17199,17199,"Identify component as 'pending', when used with useTransition","[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2019-10-28T04:43:20Z,2020-05-21T01:07:18Z,2020-02-02T07:11:44Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

When using `useTransition`, the components are re-rendered with the last state they had. 
 Without the ability to identify this 'pending' phase, components can't conditionally choose not to throw a promise - ie. the promise was created outside React.

**What is the expected behavior?**

Components should be able to differentiate the current phase they're in, eg.

```js
const phase = usePhase()
// or
const isPending = useTransitionPending()
```

**Example**

https://codesandbox.io/s/serene-wozniak-pnhhh

**Use case**

Library (pending release): [gqless](https://gqless.netlify.com/)

I've created a factory which tracks usage of 'references' during render, and updates the components when they change:

```js
const MyComponent = connected(() => {
  const data = accessReference()
  return <div>{data}</div>
})
```

```js
function connected(component) {
	return (props) => {
		const forceUpdate = useForceUpdate()

		references = startRecording()

		try {
			return component(props)
		} finally {
			references.stopRecording()
		}
		
		for (ref of references) {
			ref.onUpdate(forceUpdate)
			ref.onPendingChange(forceUpdate)
			if (ref.isLoading) throw promise
		}
	}	
}
```

Without the ability to check whether the current component is 'pending', the promise will be thrown on the 'pending' render phase - which prevents the transition from working.

This doesn't happen in the [examples](https://reactjs.org/docs/concurrent-mode-patterns.html), as the data is immutable and passed down as the `resource` prop.
",Other
https://github.com/facebook/react/issues/17200,17200,how can I set few different refs to one element?,[],closed,FALSE,,2,2019-10-28T07:26:44Z,2019-10-29T12:43:46Z,2019-10-29T12:43:46Z,NONE,completed,,"for example, I had a ref from react-dnd and another one I need for outside hook. I solved it by just setting the ref to another inner div. and I can't reuse ref from react-dnd, because it's different object at all. is it possible or it's technical limitations?
",Support
https://github.com/facebook/react/issues/17202,17202,"Error: ""Could not find node with id ""1681"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-10-28T09:53:08Z,2019-10-29T16:00:17Z,2019-10-29T16:00:12Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Was profiling component performance.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.0-a8b8ffb89

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156567
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:156513)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157036)
    at gl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314363)
    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)
    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103717)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)
    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)

Component stack: in gl
    in div
    in div
    in div
    in _o
    in Unknown
    in n
    in Unknown
    in div
    in div
    in zi
    in Ge
    in un
    in ba
    in Rc",Other
https://github.com/facebook/react/issues/17204,17204,Provide a way to identify an unmounting node in callback ref,[],closed,FALSE,,1,2019-10-28T10:53:10Z,2019-11-08T10:55:37Z,2019-11-08T10:54:17Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

A callback ref is executed with null before the corresponding component is unmounted.

**What is the expected behavior?**

I wish I could get the reference to the node before unmounting, [as a second argument](https://github.com/facebook/react/blob/4bc52ef0dfbb0389cc20b65cef0645afb7b85445/packages/react-reconciler/src/ReactFiberCommitWork.js#L208). Below is a reduced use case.

```js
const Component = () => {
  const refs = React.useRef([])
  const setRefs = React.useCallback(
    (node, unmountingNode) => {
      if (node === null) {
        return refs.current = refs.current.filter(ref => ref !== unmountingNode)
      }
      refs.current.push(node)
   },
   [])
  return (
    <>
      <div ref={setRefs}></div>
      <div ref={setRefs}></div>
      <div ref={setRefs}></div>
    </>
  )
}
```

The ""real"" usecase is a custom hook that observe intersections. It returns `setRefs`.

EDIT: as I'm editing this issue to fix typos, I realize that the callback signature is not so nice...
",Other
https://github.com/facebook/react/issues/17218,17218,Fragment under boolean condition leads to crashes,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2019-10-30T09:22:34Z,2021-07-25T23:52:49Z,2019-10-30T16:43:45Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**

Having such code sample inside render's return block
```
{booleanVariable && <Fragment>contents</Fragment>}
```

Results in error of a kind
```
NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.
```

About 1% of users of an application were affected by this, however, I myself was not able to reproduce it. From a component error stack I was able to track-down where possibly can be an issue. Replacing `{booleanVariable && ...}` with ternary `{booleanVariable ? ... : null}` resolved the problem and our users are not facing it anymore.

**What is the expected behavior?**
React not throwing error. Maybe warning? Not rendering that particular part? But not crashing the whole application.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
It crashed with react version `16.9.0`, other versions were not tested. Users that were affected have Windows 7+, Mac OS 10.13+ and Chrome 77+.
",Other
https://github.com/facebook/react/issues/17231,17231,Suspense: Ability to leave existing children mounted after successfully rendering once,[],closed,FALSE,,3,2019-10-31T00:33:49Z,2019-10-31T20:14:51Z,2019-10-31T14:02:13Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

Feature

**What is the current behavior?**

Currently Suspense will completely replace children when a promise is thrown. This leads to ugly UX when `fallback` is flashed on every prop change.

Demo: https://codesandbox.io/s/jovial-dew-x8u5p

Notice how many flashes of `fallback` you get by typing and deleting text into the input. This problem is exacerbated further by no delayMs anymore.

**What is the proposed behavior?**

After successfully rendering without catching any promises or errors, provide the previous children to `fallback` so the children can remain mounted but the developer has control of how to show a loading indicator. For example, say you had a component that would mask over the children and show a loading spinner centered over them:

```
<Suspense fallback={(staleChildren) => <LoadingWrapper>{staleChildren}</LoadingWrapper>}>
  <Component id={id}/>
</Suspense>
```
Just having a reference to the previous successfully rendered children would be huge. Is this possible to do in userland? If not is this something that can be done in core?


**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React@experimental",Other
https://github.com/facebook/react/issues/17235,17235,`input` event `onchange` Why is there a border?,[],closed,FALSE,,2,2019-10-31T06:14:10Z,2019-10-31T11:04:29Z,2019-10-31T11:04:29Z,NONE,completed,,"在我开启`chrome-devtools=` 之后, `input` 的 `change` 事件, 触发后会有边框, 这是不是`chrome` 的默认行为? 还是说, 是 `react-devtools` 开发工具的行为🧐?

After I turn on `chrome-devtools=`, the `change` event of `input` will have a border after the trigger. Is this the default behavior of `chrome`? Or, is the behavior of the `react-devtools` 🧐

![test.gif](https://i.loli.net/2019/10/31/MhfqmWpBaDuvyNU.gif)",Support
https://github.com/facebook/react/issues/17273,17273,useTransition's startTransition function can result in infinite loop when it's included as a useEffect dependency,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,2,2019-11-04T23:12:15Z,2020-08-28T18:49:01Z,2020-08-28T18:49:01Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

I've narrowed it down to this:

https://codesandbox.io/s/usetransition-useeffect-dependency-issue-2olmx

Basically, what I *think* is important is:

1. There's a state change resulting in the useEffect being called
2. The useEffect callback starts a transition
3. The transition callback sets state
4. The set state results in a render which suspends

If these are all the case, then including the `startTransition` function in the dependency array will trigger an infinite loop. In the codesandbox I have a safety in place so your browser doesn't fall over.

**What is the expected behavior?**

The `startTransition` function should be consistent between renders.

I've observed that if you do not inline the config to `useTransition` then this is not a problem. I know that the docs recommend keeping this config consistent, but if this is desirable behavior, then maybe a warning about this particular situation in the docs would be useful. I expect that inlining the config will be pretty natural for people.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- react@0.0.0-experimental-f6b8d31a7
- react-dom@0.0.0-experimental-f6b8d31a7",Bug
https://github.com/facebook/react/issues/17276,17276,Unexpected value order with useTransition,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,4,2019-11-05T09:17:35Z,2021-04-20T16:21:44Z,2021-04-20T16:21:44Z,CONTRIBUTOR,completed,,"The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.

Current: `const [startTransition, isPending] = useTransition()`.
Expected: `const [isPending, startTransition] = useTransition()`.
Also fine: `const { startTransition, isPending } = useTransition()`.

## Rationale

The order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.

Users without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.

Having this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.

## Built-in hooks

```js
const [state, setState] = useState();
const [state, dispatch] = useReducer();
const [startTransition, isPending] = useTransition();
```

## Community examples

I have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:

[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).

Hooks that use `[function, value]` pattern: none.

## Is second value optional?

One could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We’re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).

Besides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).

## Can we return an object?

useState returns a list for convenient aliasing:

```ts
const [color, setColor] = useState();
const [position, setPosition] = useState();
```

For hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.

I am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.
",Feature
https://github.com/facebook/react/issues/17277,17277,"SuspenseList blocks rendering of later items entirely, not just revealing / committing",[],closed,FALSE,,1,2019-11-05T09:19:56Z,2019-11-05T14:01:28Z,2019-11-05T14:01:28Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug / unexpected behaviour (Possibly unclear documentation rather than code)

**What is the current behavior?**
SuspenseList appears to block rendering of later items altogether, rather than simply ""revealing"" them later.
This might be a documentation / expectations issue rather than a bug in SuspenseList itself.

I've implemented the ""render-then-fetch"" pattern in a simple naive manner. The first time a `SuspendingItemInner` is rendered, it immediately creates and throws a promise with a short delay to simulate data-loading.


https://codesandbox.io/s/suspenselist-blocks-render-instead-of-in-memory-render-react-bug-utke2

In the example, these delays are 1 second, 2 seconds, 1 second, 2 seconds, 1 second, using `<SuspenseList revealOrder=""forwards"" tail=""collapsed"">` to wrap them.

_What I see is:_
 * First item suspends. Console logs `Starting load of promise #0 with 1 second delay` . One second later, it unsuspends.
 * Second item suspends. Console logs `Starting load of promise #1 with 2 second delay` . Two seconds later, it unsuspends.
 * Third item suspends. Console logs `Starting load of promise #2 with 1 second delay` . One second later, it unsuspends.
Etc.

_What I'm expecting (hoping?) to see:_
 * First item suspends. Console logs `Starting load of promise #X with N second delay` for all 5 components. One second later, it unsuspends.
 * Second item suspends. Since its required data should have started one second ago, we wait for one second. It unsuspends, as do all the rest of the items.

**What is the expected behavior?**
My understanding of Suspense + Concurrent Mode from reading various maintainer tweets / posts is that React will attempt to render ahead as much as possible in-memory. As such, I would expect later items in a SuspenseList to start being rendered even after previous ones have chosen to Suspend. (I guess I'd expect the entire list to have Suspended in parallel.)

Note you can ""fix"" this by forcing all the components to render at the same time by uncommenting lines 61 to 67, because it kicks off all the data loading immediately.
I'm guessing if SuspenseList is working as intended, the ""solution"" is to hoist data-fetching upwards (to get to the render-as-you-fetch pattern.)

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
`react@0.0.0-experimental-f6b8d31a7`

(p.s. loving experimenting with Suspense + Concurrent Mode, it's a very smooth experience and I'm excited to see it implemented in more libraries / usable in production!)",Support
https://github.com/facebook/react/issues/17279,17279,It's confusing that useTransition doesn't do anything outside of user-blocking events,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,5,2019-11-05T17:29:14Z,2019-11-15T22:46:52Z,2019-11-15T22:46:51Z,MEMBER,completed,,"I ran into this when implementing Back button transition in a router. Because the transition is inside a browser `popstate` event, it gets batched with the low pri update, and the pending state doesn't appear.

I had to do [this](https://github.com/gaearon/suspense-experimental-github-demo/blob/cb75d1a71847be85e1365d8b33f766a0d0e21463/src/createRouter.js#L68-L69) to work around it but it's unfortunate. We might want to fix this by treating pending state as special. Or maybe a warning — but then we need a first-class official API for opting into user blocking pri.",Bug
https://github.com/facebook/react/issues/17292,17292,"Error: ""Could not find commit data for root ""729"" and commit 2""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2019-11-06T19:11:13Z,2019-11-26T19:15:53Z,2019-11-26T19:15:39Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Viewing a component within Storybook
2. Opened Profiler
3. Changed the target from Root to Story

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.0-a8b8ffb89

Call stack: at n.value (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162685)
    at m (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332158)
    at sc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:332375)
    at fi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59263)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:66573)
    at lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104884)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89467)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89392)
    at pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:86341)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45721

Component stack: in sc
    in div
    in div
    in _o
    in Unknown
    in n
    in Unknown
    in div
    in div
    in zi
    in Ge
    in un
    in ba
    in Rc",Other
https://github.com/facebook/react/issues/17297,17297,Hooks and Refs: Setting state before async function causes a null ref,[],closed,FALSE,,2,2019-11-07T02:52:36Z,2019-11-07T06:13:00Z,2019-11-07T06:13:00Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**

I found a weird bug that setting the state before calling an async functions nullifies the refs for the rest of that function.

In this example, calling `setData()` before the async function in `handleChange` causes the `ref1.current` to be null. This only happens when the state is set right before the function.

It also only happens in a function component with hooks.
https://codesandbox.io/s/optimistic-taussig-bxl3s

```
function func() {
  return new Promise(resolve => {
    setTimeout(() => resolve(true), 1000);
  });
}

function App(props) {
  const [data, setData] = React.useState("""");

  const ref1 = React.createRef();

  function handleChange() {
    setData(""test"");
    func().then(success => {
      console.log(ref1.current); // This prints 'null', should be the ref
    });
  }

  return (
    <div>
      <input ref={ref1} onChange={handleChange.bind(this)} />
    </div>
  );
}
```

Here are a few more examples when it works unexpectedly:
```
  async function handleChange() {
    setData(""test"");
    await func().then(success => {
      console.log(ref1.current); // prints 'null'
    });

    console.log(ref1.current); // prints 'null'
  }
```

It seems to be related to just the async functions
```
  function handleChange() {
    setData(""test"");
    func().then(success => {
      console.log(ref1.current); // prints 'null'
    });

    console.log(ref1.current); // prints '<input></input>' correctly
  }
```

**However, when you remove the state setter, it works correctly**
```
  async function handleChange() {
    // setData(""test""); commenting the state setter out causes a correct behavior
    await func().then(success => {
      console.log(ref1.current); // prints '<input></input>'
    });

    console.log(ref1.current); // prints '<input></input>'
  }
```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.11.0 and earlier
Edge Chromium/Chrome/Windows 10 (The only ones I'v tested it on)",Support
https://github.com/facebook/react/issues/17306,17306,img onLoad does not always fire in react 18,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,11,2019-11-07T19:29:09Z,2022-03-31T15:28:14Z,2022-03-31T09:41:16Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Bug
**What is the current behavior?**

`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/quiet-dawn-t1std
You might have to use the retry button a few times, but hopefully you should be able to see it. Don't disable cache while trying

**What is the expected behavior?**

onLoad always fires if img gets loaded.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

0.0.0-experimental-f6b8d31a7
Reproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I'd be surprised if it is OS specific.

It does not happen with regular ""sync"" mode.",Bug
https://github.com/facebook/react/issues/17332,17332,"useTransition: After startTransition, it does not react to passed props changes","[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,7,2019-11-10T08:47:41Z,2020-06-29T18:30:35Z,2020-06-29T18:30:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Probably a bug
**What is the current behavior?**
After firing startTransition, ""current"" component stops reacting to passed props changes while reacting to local state changes.
**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

In the following CodeSandBox, `count` is counting up in the parent component using `setInterval` but if we click ""CLICK ME"", it suddenly stops updating.
https://codesandbox.io/s/usetransition-stop-reacting-passed-props-updates-p9k1b

**What is the expected behavior?**
When passed props change, it should show the latest value of it where possible

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Experimental build (0.0.0-experimental-5faf377df)",Bug
https://github.com/facebook/react/issues/17333,17333,Can't back to initialed state with useState,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2019-11-10T09:26:26Z,2020-02-16T14:15:05Z,2020-02-16T14:15:05Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
It's not a feature, but I'm not sure if it's a bug or mistake of mine.

**What is the current behavior?**

I initialed my state on useState with a number. but I can't back to that initialed state after doing some stuff in my code. for example, pass some conditions.

**What is the expected behavior?**

I want to be able to pass the initial value as the new state value, but it's not working.
For better understanding, I created a reproduce project in sandBox to check it out.
https://codesandbox.io/s/serene-driscoll-qlqq3?fontsize=14
",Support
https://github.com/facebook/react/issues/17352,17352,Upgrade Rollup to 0.68.1+,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,10,2019-11-13T04:07:32Z,2021-06-30T13:38:45Z,2021-06-30T13:38:45Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug-ish.

**What is the current behavior?**
`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
```
npm install react
```
`index.html`
```html
<!DOCTYPE html>
<head><meta charset='utf-8'></head>
<body>
	<script type='module'>
		import './node_modules/react/umd/react.development.js'
	</script>
</body>
```

**What is the expected behavior?**
The React UMD module can be loaded by an ES module.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: 16.11.0
Firefox: 70.0.1
Windows 10",Bug
https://github.com/facebook/react/issues/17357,17357,getDerivedStateFromError is not called until all children have finished rendering,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2019-11-13T22:02:41Z,2020-05-20T05:14:44Z,2020-05-20T05:14:44Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
If I have an array of children that each throw an error, my error boundary isn't called until all children have finished rendering. 

In my example there are 3 child components that cause an error, the error is logged to the console 3 times before getDerivedStateFromError is called:

![Screen Shot 2019-11-13 at 3 58 24 PM](https://user-images.githubusercontent.com/4808898/68808144-c0bb8b00-062e-11ea-9de3-b233d282bb78.png)



See example: https://codesandbox.io/s/heuristic-cache-y8h5d

**What is the expected behavior?**
I'd expect the first child error that is thrown to trigger my error boundary in the parent and no other children should be rendered. I understand that I should be using nested error boundaries where possible but this can be tedious. The current behavior isn't really an issue until you have an error in something like a spreadsheet cell component, where there could be hundreds or thousands of errors depending on the amount of data. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
16.11, also happens in 16.8.6
All browsers/all OS
",Other
https://github.com/facebook/react/issues/17405,17405,Devtools: broken indentation in the components tree,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2019-11-20T11:04:06Z,2019-11-27T10:50:42Z,2019-11-26T19:38:14Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
a bug

**What is the current behavior?**
Items in the components' tree are rendered as a plain list

![Screenshot 2019-11-20 at 13 58 42](https://user-images.githubusercontent.com/12268898/69233511-1697b200-0b9e-11ea-93d4-e1484195b295.png)
![Screenshot 2019-11-20 at 14 05 35](https://user-images.githubusercontent.com/12268898/69233941-fa484500-0b9e-11ea-976d-35b65a0f9761.png)

**What is the expected behavior?**
Each item has an indentation according to its depth in the tree

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React Developer Tools @ 4.2.0 (Chrome Extension)
Google Chrome @ 78.0.3904.108
",Support
https://github.com/facebook/react/issues/17410,17410,Firefox (Developer Edition) React DevTools fails to show state when using useState hook,[],closed,FALSE,,11,2019-11-20T18:20:27Z,2019-12-05T21:41:48Z,2019-11-26T19:29:30Z,NONE,completed,,"in Chrome, when inspecting a component with useState hooks, one can view the current state key/values in the wrappedComponent object of the hooks section of Components React Devtools, inside of Unmount.

When inspecting the same component in Firefox, all i see is wrappedComponent -> Unmount -> wrappedHook -> Effect. 

Can someone clarify why?

Screenshots upon request! 

Thanks!",Other
https://github.com/facebook/react/issues/17416,17416,How does react browser extension detect if the page is running on react.js?,[],closed,FALSE,,1,2019-11-21T05:23:29Z,2019-11-21T09:37:42Z,2019-11-21T09:37:42Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->
I tried to search but couldn't find a definitive answer to how does the react browser extension detect whether a page is using react.js or not?

Is the react dev tool searching the javascript in the page for react.js function identifiers? If so, how does it work when a page is being served minified, because I thought minification changes function names etc. to something minified. Is the react dev tool comparing the Javascript AST with react.js standard AST?

Just curious to learn how do the dev tools work to detect react.js?
",Support
https://github.com/facebook/react/issues/17426,17426,Passing in prop equality fn to React.memo can reset state from Hooks during updates ,[],closed,FALSE,,4,2019-11-21T20:04:02Z,2019-11-21T22:01:23Z,2019-11-21T22:01:23Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
*bug*

**What is the current behavior?**
Passing in a function as the second argument to React.memo can cause state initialized in hooks to reset to previous state.  

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/romantic-wilson-34sup

**What is the expected behavior?**
Alternating row clicks should preserve the previous state associated with each row. 

Remove the areEqual function as the 2nd parameter to React.memo and the app behaves as expected.  Another fix is passing in a function to setState ```prevState => ... ```

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.8.6, Chrome; no
",Support
https://github.com/facebook/react/issues/17431,17431,"[react-test-renderer] ""Warning: Each child in a list should have a unique ""key"" prop.""",[],closed,FALSE,,3,2019-11-22T02:11:47Z,2019-11-26T19:25:14Z,2019-11-26T19:25:14Z,NONE,completed,,"Hello!

**react-test-renderer** works just fine, but I'm getting the following Warning on all of my Tests:

> Warning: Each child in a list should have a unique ""key"" prop.

Has this been addressed? It isn't something related to my code or Tests.

Many thanks!",Support
https://github.com/facebook/react/issues/17434,17434,useEffect executes return block before the main one,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,4,2019-11-22T13:22:39Z,2020-02-27T17:17:58Z,2020-02-27T17:17:58Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Report a bug

**What is the current behavior?**
When there is a time consuming activity in main block of useEffect, return block gets executed first, then the main block. This is an anti-pattern.

**Steps to reproduce.**
https://codesandbox.io/s/react-hooks-playground-ych47

**What is the expected behavior?**
In useEffect hook, return block should always be executed last, and nothing after it, right? It doesn't make sense to do a cleanup before actually doing some activity first.
",Support
https://github.com/facebook/react/issues/17441,17441,Improve inline svg support for mask and defs,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,5,2019-11-23T21:30:01Z,2022-01-07T20:10:26Z,2020-03-05T06:15:59Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
In react dom terms a feature _(because it works as expected in Safari - but not in chrome/firefox/ie?)_

**What is the current behavior?**
Given we use an inline icon that includes defs or/and mask [Example](https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js#L31-L45)
And we reuse this icon in multiple places
When the first icon is placed in a div with display ""none"" the reference is hidden (only true if done on the first icon)

**What is the expected behavior?**
All icons should render normally without loosing the referenced element.
Reference: https://github.com/raix/react-svg-defs-issue/blob/master/src/App.js

**What fixes it?**
When creating a special `Mask` component that keeps a single reference element in a portal / outside the icon itself the problem goes away.

![svg-issue-using-react](https://user-images.githubusercontent.com/1136718/69485549-529e7180-0e41-11ea-9515-dc0fdf50a189.gif)

_(We currently convert to svg without `defs` and `mask` as it doesn't work reliable atm.)_
",Other
https://github.com/facebook/react/issues/17446,17446,Why error when rendering more hooks if they maintain order? ...and more,"[{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,10,2019-11-24T17:43:06Z,2020-08-01T09:10:11Z,2020-08-01T09:10:11Z,NONE,completed,,"Hi.

Just wondering what is the problem to allow a component to render ""less"" hooks that maintain order.

I ask because I've been using (although not very convincingly) wrapping some components to allow bailing earlier by returning `undefined`. The wrapper would just return the last value in that case.

I know I could just `useMemo` everywhere but sometimes having to provide default values or adding extra conditionals for some edge cases adds some noise to the code.

Is there any reason against this method?

Thanks
",Support
https://github.com/facebook/react/issues/17454,17454,Why useEffect's default behavior is to run on every render?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-11-25T23:35:19Z,2019-12-02T10:03:23Z,2019-12-02T10:02:41Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
API design question about `useEffect`

**What is the current behavior?**
Currently `useEffect` runs on every render. This default behavior can be dangerous in situations like dealing with HTTP requests when you forget to pass the second argument. This seems to be a common mistake especially for newcomers like myself. I can't think of many (any) patterns where you want to run `useEffect` on every render. What was the reasoning behind not defaulting to run once? 
",Support
https://github.com/facebook/react/issues/17458,17458,Circular dependencies in reconciler,[],closed,FALSE,,2,2019-11-26T09:09:30Z,2019-12-02T14:00:48Z,2019-11-28T18:19:05Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Discussion

**What is the current behavior?**

Exploring source code of React.JS I've found that ReactFiberBeginWork.js depends on some functions from ReactFiberWorkLoop.js:
https://github.com/facebook/react/blob/6470e0f169b4cf0416132aa66221bf20e264c618/packages/react-reconciler/src/ReactFiberBeginWork.js#L173-L180

At the same time ReactFiberWorkLoop.js depends on some functions from ReactFiberBeginWork.js:
https://github.com/facebook/react/blob/6470e0f169b4cf0416132aa66221bf20e264c618/packages/react-reconciler/src/ReactFiberWorkLoop.js#L121

Actually it's not a bug but it may lead to some unexpected behavior in future. Is it okay to have such circular dependencies?",Support
https://github.com/facebook/react/issues/17460,17460,[useReducer] Inconsistent behavior of `dispatch` on first call and laters,[],closed,FALSE,,3,2019-11-26T12:21:36Z,2019-11-26T22:21:11Z,2019-11-26T20:49:48Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
Maybe a bug

**What is the current behavior?**
```javascript
function reducer(state, action) {
  console.log(""run reducer"");
  switch (action.type) {
    case ""INCREMENT"": {
      return state + 1;
    }
    default:
      return state;
  }
}

function increase() {
  dispatch({
    type: ""INCREMENT""
  });
  console.log(""after dispatch"");
}
```
**The output of the first time calling `increase`:**
```
run reducer
after dispatch
```
**The output of the later times calling `increase`:**
```
after dispatch
run reducer
```

https://codesandbox.io/s/infallible-bassi-r0k3w
(open this link of reproduction, and see the console logs)
---

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
The sequence of output should keep same.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
^16.8.0",Support
https://github.com/facebook/react/issues/17467,17467,Is there any reason why React.version is still stuck in 16.8.6 ?,[],closed,FALSE,,2,2019-11-26T22:22:56Z,2019-11-27T12:10:36Z,2019-11-27T12:10:36Z,NONE,completed,,"In 16.12.0 and in some previous versions, React.version still return 16.8.6",Support
https://github.com/facebook/react/issues/17481,17481,Changelog markdown formatting issue for v16.3.0 (React Test Renderer),[],closed,FALSE,,2,2019-11-28T05:31:12Z,2019-11-29T13:57:39Z,2019-11-29T13:57:39Z,CONTRIBUTOR,completed,,"React Changelog Markdown documentation formatting issue.

## **Do you want to request a *feature* or report a *bug*?**

A bug in formatting, where subtitle should be `h3` (with `###`) but is marked with `h2` (`##`).

## **What is the current behavior?**

`React Test Renderer` subtitle is rendered as `h2`, not `h3`.

![demo](https://user-images.githubusercontent.com/8465237/69779015-8dbbe000-1174-11ea-87c5-f6a582d9a120.png)

## Finding the formatting error

### Using Chrome Devtools

1. Go to https://github.com/facebook/react/blob/master/CHANGELOG.md#react-test-renderer-3
1. Open Devtools to inspect the HTML.

### Via markdown source

1. Go to https://raw.githubusercontent.com/facebook/react/master/CHANGELOG.md
1. Search for word `* Fix handling of fragments in `toTree()`.`
1. You will see `## React Test Renderer`.
    - This should be `### React Test Renderer`

![search](https://user-images.githubusercontent.com/8465237/69779171-19357100-1175-11ea-8b79-f5c13909b79b.png)

## **What is the expected behavior?**

`React Test Renderer` subtitle is rendered as `h3` with `###`, **not** as `h2` with `##` .

## **Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

Not Applicable.

## Additional context

It might look like nitpicking but I was programmatically parsing the changelog but ran into the inconsistency.  

Hopefully this can be fixed because
1. It's easy to fix
1. To prep for automated changelog documentation (for the future possibly).
1. and for _consistency_

Demo Sandbox: https://codesandbox.io/s/parse-react-changelog-mjpkg

I can do a PR should you approve

![inconsistency](https://user-images.githubusercontent.com/8465237/69779349-ba242c00-1175-11ea-8f9a-81f7d1ec7fb0.png)
",Bug
https://github.com/facebook/react/issues/17482,17482,No workaround for issues with autofocus,[],closed,FALSE,,2,2019-11-28T08:06:22Z,2019-12-02T09:36:11Z,2019-12-02T09:36:10Z,NONE,completed,,"Bug report

There is no workaround for autoFocus! the linter will not compile typescript code when using autofocus. Readers and accessibility issues, could you please provide a workaround for this problem alternatively please remove it from the library as it causes more issues than it is worth.

",Support
https://github.com/facebook/react/issues/17497,17497,react redux firestore mapStateToProps issue while getting data,[],closed,FALSE,,1,2019-12-02T01:53:13Z,2019-12-02T03:32:20Z,2019-12-02T03:32:20Z,NONE,completed,,"i am stuck in a very weird issue the issue is i am getting firestore collection like this

```
firestoreConnect([
    {collection : 'projects'}
])
```
then in mapStateToProps function

```
const mapStateToProps = (state) => {
        console.log('from mstp' , state.firestore.ordered.projects);
        return {
            fireProjects : state.firestore.ordered.projects
        }
    }
```
in this code console.log('from mstp' , state.firestore.ordered.projects); is showing data in a state but when i

> console.log(this.props) in component code

first i see fireProjects is undefined 
and then i see another console.log having fireProjects array of objects as i want . 
when i try to print the object from fireProjects then i see error undefined . is there any help i can get ? or if you want more clarification i can do that as well .. stuck in it from so much time",Other
https://github.com/facebook/react/issues/17507,17507,"Error: ""Could not find node with id ""18486"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-12-03T08:09:08Z,2019-12-03T15:42:23Z,2019-12-03T15:41:53Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Clicked restart and start profiling
2. Finished profiling
3. Clicked on a commit and got the error below

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc",Other
https://github.com/facebook/react/issues/17511,17511,CSS Not Being Applied (or Overwritten?) Route Based Code Splitting,[],closed,FALSE,,2,2019-12-03T16:04:32Z,2019-12-04T05:22:09Z,2019-12-04T05:22:09Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?** Bug

**What is the current behavior?** 

At our website, we have a branch where we're converting to route based code splitting to reduce bundle sizes. The issue now is that our global `index.scss` properties aren't be applied to the lazy loaded modules. This is breaking things like our font faces / `<a>` tag styling.

```ts
// routes.ts BEFORE
import Home from '../components/home');

const Routes: React.FC = () => (
    <Switch>
      // ...
      <Route exact path=""/"" component={Home} />
      <Redirect from=""*"" to=""/"" />
    </Switch>
);
```
```ts
// routes.ts AFTER
const Home = lazy(() => import('../components/home'));

const Routes: React.FC = () => (
  <Suspense fallback={/*...*/}>
    <Switch>
      // ...
      <Route exact path=""/"" component={Home} />
      <Redirect from=""*"" to=""/"" />
    </Switch>
  </Suspense>
);
```

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:** 

N/A because of reliance on bootstrap but the [link to the branch](https://github.com/RITesports/Website/tree/route-spliting/react-app/src)

1. Clone Branch
2. install deps for react-app
3. npm start

`/teams` wont' work but all of the text is left aligned on the cards and the link are normal blue and underlined (I can provide pictures if needed). You can compare this to the live site  [here](https://www.esportsrit.com).

**What is the expected behavior?** The global css should be applied the same, lazy loaded or not.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** All Browsers. No idea on older versions.
",Other
https://github.com/facebook/react/issues/17515,17515,"Strange behaviour of <SuspenseList revealOrder=""forwards""/> in concurrent mode","[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,5,2019-12-03T23:13:30Z,2020-01-28T08:00:38Z,2020-01-28T08:00:38Z,NONE,completed,,"_Behaviour looks pretty strange in my opinion but it might be the expected one. I just wanted to open an issue in case it was not. Please note that it is relative to the coming concurrent mode. Please feel free to close if it is not considered as a bug._

**What is the current behavior?**

_In concurrent mode_

The output of the following scenario looks strange to me. I'd have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`. (`A`, `B`, `C` are described right after)

Here is the scenario ([live demo with concurrent mode enabled](https://dubzzz.github.io/react-suspenselist-bug/build/)):

1. Render:
```jsx
render(
  <SuspenseList revealOrder=""forwards"">
    <Suspense fallback={<span>Loading B</span>}>
      <B />
    </Suspense>
    <Suspense fallback={<span>Loading C</span>}>
      <C />
    </Suspense>
  </SupenseList>
)
```

2. Resolve `B` and `C`

3. (Re-)render:
```jsx
render(
  <SuspenseList revealOrder=""forwards"">
    <Suspense fallback={<span>Loading A</span>}>
      <A />
    </Suspense>
    <Suspense fallback={<span>Loading C</span>}>
      <C />
    </Suspense>
    <Suspense fallback={<span>Loading C</span>}>
      <C />
    </Suspense>
  </SupenseList>
)
```

4. Output is: `Loading A / C / Loading C`

With:

```jsx
// You can considerer the following:
const A = React.lazy(() => import('./A'));
const B = React.lazy(() => import('./B'));
const C = React.lazy(() => import('./C'));
```
In my code: https://github.com/dubzzz/react-suspenselist-bug/blob/master/src/App.js#L189_L205

**What is the expected behavior?**

I'd have expected to have either `Loading A / Loading C / Loading C` or `Loading A / C / C`.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: `master` branch
React: `0.0.0-experimental-b53ea6ca0`

**How did I found this bug?**

This _potential bug_ has been discovered while I was trying to run property based tests based on [fast-check](https://github.com/dubzzz/fast-check/) against React library.

See https://github.com/dubzzz/react/commit/79d49ed85c34a5339f1d3163a0c6e99eddaf4405

In my test I was assessing the following properties:
- `""together""`: only renders when all components are ready (test covers complex and deep structures containing nested `<SuspenseList revealOrder=""together"" />` and `<Suspense />` referencing potentially multiple times the same `Component`)
- `""forwards""`: only renders components up to the last resolved one, all components after this one will be considered as unresolved",Other
https://github.com/facebook/react/issues/17516,17516,"map through connected component, get data of last saga call within all componenets",[],closed,FALSE,,1,2019-12-03T23:39:37Z,2019-12-04T05:30:10Z,2019-12-04T05:30:10Z,NONE,completed,,"
** want to report a *bug*?**

**What is the current behavior?**

i have a connect componenet name Section(Redux component), which render a section within a View.

Sometimes the View has more than one Section and this how i render:
`/**
 *
 * SubViews
 *
 */

import React, { memo, useEffect } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import { Box } from '@material-ui/core';
import { handleErrorStatus } from 'utils/apiUtils';
import EmptyPaper from 'components/layout/atoms/EmptyPaper';
import ViewSection from 'containers/ViewSection';

import { strings } from 'constants/strings';
import { useInjectSaga } from 'utils/injectSaga';
import { useInjectReducer } from 'utils/injectReducer';
import reducer from './reducer';
import saga from './saga';
import { loadSubViews } from './actions';
import makeSelectSubViews, {
  makeSelectSubViewsLoading,
  makeSelectSubViewsError,
} from './selectors';

export function SubViews({
  handleLoadViewSections,
  views,
  viewsLoading,
  viewsError,
  siteId,
  assessmentId,
  location,
  history,
}) {
  useInjectReducer({ key: 'subViews', reducer });
  useInjectSaga({ key: 'subViews', saga });
  const pathnames = location.pathname.split('/').filter(x => x);
  useEffect(() => {
    const viewcode = pathnames[6];
    if (siteId !== undefined && siteId !== null) {
      handleLoadViewSections(siteId, assessmentId, viewcode);
    }
  }, []);

  if (viewsLoading) {
    return <EmptyPaper type=""loading"" text={strings.viewSectionsLoading} />;
  }
  if (handleErrorStatus(viewsError)) {
    return <EmptyPaper type=""empty"" text={handleErrorStatus(viewsError)} />;
  }
  if (views === null || views.length === 0) {
    return (
      <Box p={4}>
        <EmptyPaper type=""empty"" text=""no data"" />
      </Box>
    );
  }
  return (
    <>
      <Box p={4}>
        {views[0].sections.map(section => (
          <ViewSection
            key={section.id}
            viewcode={views[0].viewCode}
            section={section}
            history={history}
            location={location}
            siteId={siteId}
            assessmentId={assessmentId}
          />
        ))}
      </Box>
    </>
  );
}

SubViews.propTypes = {
  handleLoadViewSections: PropTypes.func.isRequired,
  views: PropTypes.array,
  viewsLoading: PropTypes.bool.isRequired,
  viewsError: PropTypes.bool.isRequired,
  siteId: PropTypes.number,
  assessmentId: PropTypes.string,
  location: PropTypes.object,
  history: PropTypes.object,
};

const mapStateToProps = createStructuredSelector({
  views: makeSelectSubViews(),
  viewsLoading: makeSelectSubViewsLoading(),
  viewsError: makeSelectSubViewsError(),
});

function mapDispatchToProps(dispatch) {
  return {
    handleLoadViewSections: (siteId, assessmentId, viewcode) => {
      dispatch(loadSubViews(siteId, assessmentId, viewcode));
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(SubViews);
`





and my Section code is:







`/**
 *
 * ViewSection
 *
 */

import React, { memo, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import SectionTitle from 'components/layout/atoms/SectionTitle';
import QuestionsPanel from 'components/sections/QuestionsPanel';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import Location from 'containers/sections/Location';
import Assets from 'containers/sections/Assets';
import Threats from 'containers/sections/Threats';
import { useInjectSaga } from 'utils/injectSaga';
import { useInjectReducer } from 'utils/injectReducer';
import {
  makeSelectQuestions,
  makeSelectQuestionsLoading,
  makeSelectQuestionsError,
} from './selectors';
import reducer from './reducer';
import saga from './saga';
import { loadQuestions, updateAnswer } from './actions';
import {
  makeSelectDescriptors,
  makeHelperDataSelector,
} from '../Site/selectors';
import { toggleHelpPanel } from '../Site/actions';

export function ViewSection({
  section,
  viewcode,
  siteId,
  assessmentId,
  history,
  location,
  handleLoadQuestions,
  questions,
  loading,
  error,
  handleUpdateAnswer,
  descriptors,
  helperData,
  handletoggleHelpPanel,
}) {
  useInjectReducer({ key: 'viewSection', reducer });
  useInjectSaga({ key: 'viewSection', saga });
  console.log('ViewSection()');
  console.log(section);
  // console.log(viewcode);
  useEffect(() => {
    console.log('ViewSection() useEffect()');
    if (section.contentType === 'Questions') {
      handleLoadQuestions(
        siteId,
        assessmentId,
        viewcode,
        section.sectionCode,
        descriptors,
      );
    }
  }, [section]);

  const onHandleUpdateAnswer = useCallback((answer, answerId) => {
    handleUpdateAnswer(siteId, assessmentId, answer, answerId);
  }, []);

  if (section.contentType === 'Locations') {
    return (
      <Location
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
        loading={loading}
        error={error}
      />
    );
  }
  if (section.contentType === 'Assets') {
    return (
      <Assets
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
      />
    );
  }
  if (section.contentType === 'Threats') {
    return (
      <Threats
        history={history}
        location={location}
        siteId={siteId}
        assessmentId={assessmentId}
        section={section}
      />
    );
  }

  const handleDrawerClose = (itemId, isDrawerOpen, ratings, colorOrder) => {
    handletoggleHelpPanel({ itemId, isDrawerOpen, ratings, colorOrder });
  };
  console.log('ViewSection() render');
  console.log(questions)

  if (section.contentType === 'Questions') {
    return (
      <QuestionsPanel
        headingText={section.title}
        helperData={helperData}
        handleDrawerClose={handleDrawerClose}
        key={section.id}
        loading={loading}
        error={error}
        questionsList={questions}
        handleAnswerSubmit={onHandleUpdateAnswer}
      />
    );
  }

  return (
    <div>
      <SectionTitle text={section.title} />
    </div>
  );
}

ViewSection.propTypes = {
  section: PropTypes.object.isRequired, // from parent compoenent
  viewcode: PropTypes.string.isRequired, // the view code from parent
  location: PropTypes.object,
  history: PropTypes.object,
  siteId: PropTypes.number,
  assessmentId: PropTypes.string,
  handleLoadQuestions: PropTypes.func,
  questions: PropTypes.array,
  loading: PropTypes.bool,
  error: PropTypes.any,
  handleUpdateAnswer: PropTypes.func,
  descriptors: PropTypes.array.isRequired,
  helperData: PropTypes.object,
  handletoggleHelpPanel: PropTypes.func,
};

const mapStateToProps = createStructuredSelector({
  questions: makeSelectQuestions(),
  loading: makeSelectQuestionsLoading(),
  error: makeSelectQuestionsError(),
  descriptors: makeSelectDescriptors(),
  helperData: makeHelperDataSelector(),
});

function mapDispatchToProps(dispatch) {
  return {
    handleLoadQuestions: (
      siteId,
      assessmentId,
      viewcode,
      sectioncode,
      descriptors,
    ) => {
      dispatch(
        loadQuestions(siteId, assessmentId, viewcode, sectioncode, descriptors),
      );
    },
    handleUpdateAnswer: (siteId, assessmentId, updatedAnswer, answerId) => {
      dispatch(updateAnswer(siteId, assessmentId, updatedAnswer, answerId));
    },
    handletoggleHelpPanel: (action, helperData) => {
      dispatch(toggleHelpPanel(action, helperData));
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(ViewSection);
`

Now, when my page renders, i get list of sections with their own headings but i get same lits of questions within all the sections.

this screen schot of console will explain it better
![console](https://user-images.githubusercontent.com/29419606/70099157-1f9a8000-1682-11ea-8c87-caf480d31c62.PNG)


**What is the expected behavior?**

it is expected when i map through my connected component, each one triggers it's own saga and reducer and render its own related question list
",Other
https://github.com/facebook/react/issues/17517,17517,Stale values for useState inside callback functions,[],closed,FALSE,,3,2019-12-04T00:25:36Z,2019-12-04T05:51:05Z,2019-12-04T05:29:37Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
potential bug

**What is the current behavior?**
When calling `setState` from `useState`, the `state` value is stale from inside a function. The value is correct inside the body of the component, but not inside the function itself.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
Begin by typing `a@g` which should autocomplete to `a@gmail.com`. You will see the `expected` and `actual` values for the input below each.
https://codesandbox.io/s/useemailautocomplete-material-ui-04423

**What is the expected behavior?**
It should have the correct value for `email` inside the `handleChange` function.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React: `v16.12.0`
Browser: chrome
OS: Catalina",Support
https://github.com/facebook/react/issues/17526,17526,Triggering suspense with rejected promise causes re-render instead of error boundary,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1109407645,""node_id"":""MDU6TGFiZWwxMTA5NDA3NjQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Suspense"",""name"":""Component: Suspense"",""color"":""8ffcd6"",""default"":false,""description"":""""}]",closed,FALSE,,19,2019-12-04T13:49:31Z,2021-09-13T20:02:04Z,2021-01-28T15:12:01Z,CONTRIBUTOR,completed,,"**Do you want to request a *feature* or report a *bug*?**

This *might* be a bug. @gaearon and @sebmarkbage shared differing opinions on it [in this twitter thread](https://twitter.com/dan_abramov/status/1202045662189228032)

**What is the current behavior?**

If you throw a promise that rejects from a react component's render function, that rejection will be completely ignored. It will not show up in browser console, nor will it trigger a React error boundary. Instead, it will trigger a re-render (the same as if the promise had resolved).

[Codepen example](https://codepen.io/joeldenning/pen/bGNNQJb?editors=1010)

**What is the expected behavior?**

My expectation was that the error boundary would be hit and the component would not re-render. [Sebastian's tweet](https://twitter.com/sebmarkbage/status/1202055557718216705?s=20) indicates that that is not the desired behavior, though.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

This impacts `react@experimental`, and also `react@>=16.9.0`",Support
https://github.com/facebook/react/issues/17530,17530,onChange handler for controlled input is not called when bootstrap js file is included,[],closed,FALSE,,2,2019-12-05T00:41:48Z,2019-12-05T22:41:17Z,2019-12-05T22:41:17Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

Bug

**What is the current behavior?**

The `onChange` handler of a controlled radio button is not called if you include the bootstrap js file (popper.js and jquery and are fine).

Removing the script tag allows the change handler to be called, but it is necessary for bootstrap's responsive navbar collapsing.

This does not seem to be an issue with bootstrap because it works fine when not using React ([see gist](https://gist.github.com/nmay231/e60ede8015280baa495b31f1c56d82bc)).

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**

Create a fresh react app with `npx create-react-app` and replace `App.js` and `index.html` with the versions from [this gist](https://gist.github.com/nmay231/db5196bc68cb7e6f3aa06eb5fa5ed337).
Try commenting out/uncommenting the indicated script tag in the html file and see how the output is logged or not logged to the console.

As an example, the following input's change handler would not be called.
```jsx
<label className=""btn btn-secondary"">
  <input
    type=""radio""
    name=""options""
    id=""option1""
    value={1}
    checked={currentOption === 1}
    //  Not called when selected or deselected
    onChange={handleChange}
  />
  Option 1
</label>
// More options...
```

**What is the expected behavior?**

The onChange handler of the input should be called even when the bootstrap js file is included

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

I tried this in Chrome 78 and Firefox 70 with React 16.12.0
This also did not work in v15.6 (after converting to class-based components).
",Support
https://github.com/facebook/react/issues/17534,17534,Jest React UI - unit testing,[],closed,FALSE,,1,2019-12-05T11:53:20Z,2019-12-07T16:30:41Z,2019-12-07T16:30:40Z,NONE,completed,,"I am pretty new to React and Jest unit test framework. I have my component and trying to write few unit test cases , tried few ways and unable to proceed further. Here is my code and test case. Can anyone guide /suggest the best approaches please. Non of the tests work and Thanks

React UI component Header

import React from 'react';
import { Navbar, NavbarBrand } from 'reactstrap';
import { Link } from 'react-router-dom';


const Header = ({children}) =>
    <Navbar light className=""sticky-top navbar-expand-lg navbar-toggleable-sm bg-white border-bottom"">
        <NavbarBrand tag={Link} to=""/"">Abc: Portal</NavbarBrand>
        <div className=""d-flex w-100 justify-content-end"">
            {children}
        </div>
    </Navbar>

export default Header
Tests - First two test cases passes, the third test case fails with error Expected is """" for received is ""undefined "" could anyone please guide me in the right direction.

import React from 'react'
import { shallow, mount } from 'enzyme';
import { Navbar, NavbarBrand } from 'reactstrap';
import { cleanup } from '@testing-library/react';
import renderer from 'react-test-renderer';
import { render, unmountComponentAtNode, ReactDOM } from ""react-dom"";
import { act } from ""react-dom/test-utils"";
import GlobalSettings from './../features/Header/GlobalSettings';
import UserDisplayName from './../features/Header/UserDisplayName';
import { Link, MemoryRouter  } from 'react-router-dom';
import Header from './../features/Header/';

import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({ adapter: new Adapter() });

// automatically unmount and cleanup DOM after the test is finished.
afterEach(cleanup);

let container = null;
beforeEach(() => {
    // setup a DOM element as a render target
    container = document.createElement(""div"");
    document.body.appendChild(container);
});

afterEach(() => {
    // cleanup on exiting
    unmountComponentAtNode(container);
    container.remove();
    container = null;
});
    
test('renders correctly', () => {
    const tree = shallow(
        <NavbarBrand>
            Damage Matrix: Customer Portal
        </NavbarBrand>
        );
       
    expect(tree).toMatchSnapshot();
});

test('renders correctly', () => {
    const tree = renderer.create(
        <NavbarBrand>
            Damage Matrix: Customer Portal
        </NavbarBrand>
        ).toJSON();

    expect(tree).toMatchSnapshot();
});
test('test Header', () => {
    act(() => {
        render(<MemoryRouter><Header /></MemoryRouter>, container);
    });
    expect(container.children.afterEach).toBe("""");

    act(() => {
        render(<MemoryRouter><Header children=""Hello"" /></MemoryRouter>, container);
    });
    expect(container.appendChild).toBe(""Hello"");

    act(() => {
        render(<MemoryRouter><Header>Testing Hello Children</Header></MemoryRouter>, container);
    });
    expect(container.appendChild).toBe(<UserDisplayName />);

});
",Support
https://github.com/facebook/react/issues/17552,17552,react-refresh load from CDN?,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":1649755876,""node_id"":""MDU6TGFiZWwxNjQ5NzU1ODc2"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Fast%20Refresh"",""name"":""Component: Fast Refresh"",""color"":""473bcc"",""default"":false,""description"":""""}]",closed,FALSE,,10,2019-12-09T07:42:10Z,2022-08-26T06:23:28Z,2019-12-17T13:56:36Z,CONTRIBUTOR,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

feature

**What is the current behavior?**

When `react-dom` is loaded from CDN like `<script src=""https://cdn.jsdelivr.net/npm/react-dom@16.12.0/umd/react-dom.development.js""></script>`, `react-refresh` failed to inject hook into devtools.

I've created a related issue here: https://github.com/pmmmwh/react-refresh-webpack-plugin/issues/13

We should find a way to invoke `injectIntoGlobalHook` function from `react-refresh/runtime`, however this file is in cjs format so we cannot currently do this in a simple way.

**What is the expected behavior?**

I'd like `react-refresh` to publish runtime as a umd bundle so we can reference it from CDN and put it before `react-dom`'s `<script>` element, then invoke `injectIntoGlobalHook` in the right place.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

- `react-dom`: 16.12.0
- `react-refresh`: 0.7.0",Feature
https://github.com/facebook/react/issues/17576,17576,React Hooks are unable to queue to process,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,6,2019-12-11T13:12:30Z,2020-04-06T18:10:03Z,2020-04-06T18:10:03Z,NONE,completed,,"![image (2)](https://user-images.githubusercontent.com/20770645/70624330-14c58980-1c46-11ea-81c6-c284ef07b470.png)
<!--
 When i try to use react Hooks inside another Hook, React is unable to queue those operations .

-->

## Steps To Reproduce

1. Create a Customer Hook 
```javascript
import { useContext } from ""react"";
import { SomeContext } from ""src/SomeContext"";

export const useCustomHook = () => {
  const {
    state: { deal }
  } = useContext(SomeContext);


const[contextVal, setContextVal] = useState("""")

useEffect ( () => {  setContextVal( get(deal, ""saleVehicle.pricing"", {});) },[ deal])
  return contextVal;
};

useCustomHook.defaultProps = {
  deal: {},
  DealContext: {}
};
```

2. now Consume this hook into your component

```javascript 
import {useCustomHook} from ""...relative path""

const salePrice = ({
  SomeContext: {
    state: { deal, shadowState },
  }
}) => {
//some handlers  - assume it working :D 
 const handleFocus = event => event.target.select();
  const handleOnBlur = ()=> { some call backs}
  });
  const handleOnChange = (ev, value) =>
    updateDeal(dispatch)({ target: { name: ""salePrice"", value } });

useEffect ( () => { useCustomHook(),[deal.id])

  return (
    <TextField
      value={deal.salePrice || vehSalePrice()}
      fullWidth
      onChange={handleOnChange}
      onBlur={handleOnBlur}
      disabled={hasOpenModal}
      quickEntry={quickEntryEnabled}
      decimalDigits={2}
      onFocus={handleFocus}
    />
  );
};

salePrice.propTypes = {
  DealContext: DealContextShape.isRequired,
};

salePrice.defaultProps = {

  deal: { price: """", Vehicle: { retailPrice: """" } },
  retailPrice: """"
};

```
3 - Once `<SalePrice / >` starts executing , It looks for the Hook `useCustomHook` but then `useCustomHook` internally calls another hooks `useContext, useState, useEffect` and while executing those hooks , it does not queue them up and screen blows up.




Describe what you expected to happen:
- React should handle the queue of hooks within and execute them as callStack does.


![](https://files.slack.com/files-pri/TJZUB1VM1-FR3UR5HSP/image.png)




",Other
https://github.com/facebook/react/issues/17578,17578,"Error: ""Could not find node with id ""6"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-12-11T22:45:02Z,2019-12-12T00:18:30Z,2019-12-12T00:18:21Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc",Other
https://github.com/facebook/react/issues/17593,17593,validateDOMNesting incorrectly validates <tr> - children of <table>,[],closed,FALSE,,3,2019-12-13T07:27:54Z,2021-04-25T06:39:01Z,2019-12-13T08:16:17Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

bug.

**What is the current behavior?**

validateDOMNesting shows warning when`<tr>` used as a child of  `<table>`, after any `<caption>`, `<colgroup>` and `<thead>` but only if there no `<tbody>` are children of the `<table>`.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/empty-rgb-s5x9w
In the console, you will see warning: `validateDOMNesting(...): <tr> cannot appear as a child of <table>. Add a <tbody> to your code to match the DOM tree generated by the browser.`

**What is the expected behavior?**

According to [`<tr>` definition from W3C](https://www.w3.org/TR/html52/tabular-data.html#the-tr-element),  warning should not be showed for the situation.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React 16.12.0, Windows 10, 1909(64bit), Chrome 79.0.3945.79,
",Other
https://github.com/facebook/react/issues/17595,17595,[HMR] Waiting for update signal from WDS...,[],closed,FALSE,,4,2019-12-13T09:10:01Z,2020-02-15T18:56:08Z,2020-02-15T18:56:08Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug

**What is the current behavior?**
With react-scripts@3.3.0, `[HMR] Waiting for update signal from WDS...` is written to the console after running npm start.

**What is the expected behavior?**
No console statement is produced.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Observed in react-scripts@3.3.0 but not observed in react-scripts@3.2.0
",Other
https://github.com/facebook/react/issues/17598,17598,variable declaration is not working in eval,[],closed,FALSE,,3,2019-12-13T12:35:19Z,2019-12-16T06:01:12Z,2019-12-13T19:10:35Z,NONE,completed,,"eval(var a = 10); console.log(b)
this works in normal javascript code and variable is declared in outer scope.

But when I do the same in the render function, it doesn't work.

Some react Guru please help.",Other
https://github.com/facebook/react/issues/17600,17600,"Error: ""Could not find node with id ""26038"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2019-12-13T21:36:24Z,2020-01-02T16:58:15Z,2019-12-13T21:41:34Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Start profile recording
2. Click once a component (some components will hide)
3. Stop profile recording
4. Click ""Ranked"" tab

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107381)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:89544)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc",Other
https://github.com/facebook/react/issues/17602,17602,haml,[],closed,FALSE,,0,2019-12-14T14:04:27Z,2019-12-18T10:17:34Z,2019-12-18T10:17:34Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/17617,17617,getDerivedStateFromProps not update state,[],closed,FALSE,,2,2019-12-16T10:39:48Z,2019-12-20T21:37:18Z,2019-12-20T21:37:18Z,NONE,completed,,"I have problem when use getDerivedStateFromProps. This is my code 

```jsx
   static getDerivedStateFromProps(nextProps, prevState) {
    console.log('run here to rerender', nextProps.userInfo)
    let route = [];
    nextProps.userInfo.listtab.map((item, index) => {
      route.push({
        title_vi: item.name_vi,
        title_en: item.name_en,
        key: item.id.toString(),
        is_vip: item.is_vip_price,
        flagTab: index
      });
      console.log('Check data item shop:', item, route)
    });
    console.log(""data rerender tabbar:"", route)
    return { routes: route };
  }
```

With first console, i'm get good value and it is what i want. But when second and third console and ""return"" value i receive not nextProps, and state not change with new data",Support
https://github.com/facebook/react/issues/17635,17635,Node Process 132 exit code. ,[],closed,FALSE,,1,2019-12-17T09:57:08Z,2019-12-18T10:14:08Z,2019-12-18T10:14:08Z,NONE,completed,,"Any idea why always get 132 exit code following coding? This work fine on window platform, but not on Linux platform.

$script = 'var d = 1;console.log(d);';
file_put_contents($tempFilePath, $script);
$process = new \Symfony\Component\Process\Process([$this->nodePath, $tempFilePath ], null, null, null, null);
$process->mustRun()->getOutput();",Other
https://github.com/facebook/react/issues/17636,17636,Lint rule for hooks report error for non hook function starting by `useXXX` ,[],closed,FALSE,,5,2019-12-17T10:33:56Z,2021-05-17T14:12:27Z,2019-12-18T15:32:17Z,NONE,completed,,"Declaring non-hook function like:

```js
import { useWith, identity } from ""ramda"";

const test = useWith(Math.pow, [identity, identity]);
```

causes

```js
React Hook ""useWith"" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.eslint(react-hooks/rules-of-hooks)
```

I'm using latest version of eslint-plugin-react-hooks `2.3.0`

It would be useful to have settings to override this regexp.

https://github.com/facebook/react/blob/36a6e29bb3eead85e3500ba7269cbcd55516a8fb/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L11-L20

I can make PR for it if you think that this is a good idea.",Feature
https://github.com/facebook/react/issues/17664,17664,console tab,[],closed,FALSE,,2,2019-12-19T17:52:25Z,2019-12-19T22:04:59Z,2019-12-19T21:44:46Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/17671,17671,Unexpected component function call using useState ,[],closed,FALSE,,0,2019-12-20T03:08:20Z,2019-12-20T03:08:35Z,2019-12-20T03:08:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

*bug*

**What is the current behavior?**

There is a simple count component with two buttons: +1 or +0. When I click the +0 button, component will not 

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

https://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/17672,17672,Unexpected function component call using useState,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,3,2019-12-20T03:11:53Z,2019-12-25T02:58:01Z,2019-12-20T21:00:48Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**

*question*

**What is the current behavior?**

``` typescript
import React, { useState, useEffect } from ""react"";
import ReactDOM from ""react-dom"";

import ""./styles.css"";

function Child() {
  console.log(""Child render"");
  return null;
}

function App() {
  const [count, setCount] = useState(0);

  console.log(""Render"");

  useEffect(() => {
    console.log(""count changed"", count);
  }, [count]);

  return (
    <div>
      <h2>UseState</h2>
      <p>clicked: {count}</p>
      <button
        onClick={() => {
          setCount(count + 1);
        }}
      >
        +1
      </button>
      <button
        onClick={() => {
          setCount(count);
        }}
      >
        +0
      </button>
      <Child />
    </div>
  );
}

const rootElement = document.getElementById(""root"");
ReactDOM.render(<App />, rootElement);

```

There are two button in this count example. Clicking one makes count +1，another makes count no change. If clicking the no change button first, ""Render"" will not be logged. But if clicking the +1 button first and then clicking anthor，""Render"" will show twice, but """"Child render"" will only show once.

I found the explain in document.

> If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the Object.is comparison algorithm.)

Does React only promise that Children component will not be rendered in this situation? The current component may still be rendered?

This is an example in sandbox.

https://codesandbox.io/s/long-firefly-nz5px?fontsize=14&hidenavigation=1&theme=dark

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

""react"": ""^16.12.0"",
""react-dom"": ""^16.12.0"",




",Support
https://github.com/facebook/react/issues/17673,17673,"Error: ""Could not find node with id ""678"" in commit tree""",[],closed,FALSE,,0,2019-12-20T04:09:58Z,2019-12-20T04:10:30Z,2019-12-20T04:10:30Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.2.1-3816ae7c3

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157108
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157054)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:157577)
    at vl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:314907)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59907)
    at el (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:68139)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:108547)
    at Lc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92715)
    at Pc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:92640)

Component stack: in vl
    in div
    in div
    in div
    in wo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Li
    in $e
    in dn
    in Ca
    in Pc",Other
https://github.com/facebook/react/issues/17677,17677,How can i create a dynamic ENum,[],closed,FALSE,,2,2019-12-20T07:55:18Z,2019-12-20T17:23:06Z,2019-12-20T17:23:06Z,NONE,completed,,"This request asking about existing features supported by ReactJS. I have an enum in use on several reactJS pages(200 implementations across 32 code files). Now the requirement is to make it dynamic. I am not sure how can i achieve it in ReactJS+REDUX implementation. 

I am working on the latest version of ReactJS",Other
https://github.com/facebook/react/issues/17687,17687,"React theme, context",[],closed,FALSE,,0,2019-12-21T18:37:30Z,2019-12-22T16:05:35Z,2019-12-22T16:05:35Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**

**What is the current behavior?**

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
",Other
https://github.com/facebook/react/issues/17702,17702,React Js Context Api(invariant violation) element type is invalid,[],closed,FALSE,,1,2019-12-24T08:42:27Z,2019-12-25T02:32:43Z,2019-12-25T02:32:42Z,NONE,completed,,"Am trying to setup Context Api for my project but i get an error that i cannot wrap my head around, i have two files one for the data context,
createDataContext is the name of the file
import React, {useReducer} from 'react';


export default (reducer, actions, defaultValue) => {

    const Context = React.createContext();
    const Provider = ({children}) => {
        const [state, dispatch] = useReducer(reducer, defaultValue);
   
    const boundActions = {};
    for (let key in actions){
        boundActions [key] = actions[key](dispatch);
    }
    return(
        <Context.Provider value={{state, ...boundActions}}>
            { children }
        </Context.Provider>
    );
};
return(Context, Provider);
};

AuthContext js file
import createDataContext from './createDataContext';

const authReducer = (state, action) => {
    switch(action.type){
        default:
            return state;
    }
};
export const {Provider, Context} = createDataContext(
    authReducer,
    {},
    { isSignedIn: false }
);

And the Consumer App which has a switch navigator
App.js
import React from 'react';
import {createAppContainer, createSwitchNavigator} from 'react-navigation';
import {createStackNavigator} from 'react-navigation-stack';
import { createDrawerNavigator } from 'react-navigation-drawer';
import Login from './src/screens/Login';
import Register from './src/screens/Register';
import Account from './src/screens/Account';
import  Earnings from './src/screens/Earnings';
import Scheduledrides from './src/screens/Scheduledrides';
import Home from './src/screens/Home';
import {Provider } from './src/Context/AuthContext';



const Screens = createSwitchNavigator({
  loginFlow: createStackNavigator({
    Login: Login,
    Register:Register,
  }),

  mainFlow: createDrawerNavigator({
    Home: Home,
    Account: Account,
    Earnings: Earnings,
    Scheduledrides:  Scheduledrides,   
  }),
  

});
 const App =  createAppContainer(Screens);

 
 export default () => {
  return(
    <Provider >
      <App />
    </Provider>
  );
};
Below is the error i get, thanks in advance
![Capture](https://user-images.githubusercontent.com/23630466/71403903-3a896000-2642-11ea-9956-87ed7c3efa0c.PNG)
 




",Support
https://github.com/facebook/react/issues/17711,17711, Duplicate identifier 'LibraryManagedAttributes,[],closed,FALSE,,4,2019-12-25T06:49:51Z,2019-12-25T07:33:12Z,2019-12-25T07:33:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
error message: 
`/node_modules/@types/react-router/node_modules/@types/react/index.d.ts(2314,14):
TS2300: Duplicate identifier 'LibraryManagedAttributes'.`

**What is the expected behavior?**
正常编译
**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
package.json:
`""react"": ""^16.8.6"",`
`""@types/react"": ""^16.8.6"",`


yarn.lock file:
`""@types/react@^16.8.6"":
  version ""16.9.17""
  resolved ""https://registry.yarnpkg.com/@types/react/-/react-16.9.17.tgz#58f0cc0e9ec2425d1441dd7b623421a867aa253e""
  integrity sha512-UP27In4fp4sWF5JgyV6pwVPAQM83Fj76JOcg02X5BZcpSu5Wx+fP9RMqc2v0ssBoQIFvD5JdKY41gjJJKmw6Bg==
  dependencies:
    ""@types/prop-types"" ""*""
    csstype ""^2.2.0""`",Support
https://github.com/facebook/react/issues/17741,17741,hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,12,2019-12-29T19:33:12Z,2022-08-17T19:22:26Z,2022-03-30T00:22:36Z,NONE,completed,,"
**Do you want to request a *feature* or report a *bug*?**

bug

**What is the current behavior?**

It seems like `ReactDOM.hydrate` doesn't play nice with certain kinds of inline SVGs.
Specifically ones that have `clipPath`s

When nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.

```
Expected server HTML to contain a matching <clipPath> in <svg>.
```

I have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG

The strange part is when next builds the site statically it all works.

I originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.

See https://github.com/zeit/next.js/issues/9871 for all the details.

**What is the expected behavior?**

The SVG containing the `clipPath` gets rendered correctly on the client side.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**

React: 16.12, not sure about previous versions
Browser: Firefox and Chrome
OS: macOS
",Support
https://github.com/facebook/react/issues/17743,17743,Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.,[],closed,FALSE,,1,2019-12-29T21:59:37Z,2019-12-30T15:49:25Z,2019-12-30T15:49:25Z,NONE,completed,,"```js
import React from ""react"";
import * as reactNative from ""react-native"";
import { MapView } from ""react-native-maps"";

export default class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      region: {
        latitude: 37.78825,
        longitude: -122.4324,
        latitudeDelta: 0.922,
        longitudeDelta: 0.0421
      }
    };
  }
  render() {
    return (
      <reactNative.View style={styles.container}>
        <reactNative.Text>home screen</reactNative.Text>
        <MapView
          initialRegion={this.state.region}
          ShowsCompass={true}
          rotateEnabled={false}
          Style={{ flex: 1 }}
        ></MapView>
      </reactNative.View>
    );
  }
}

const styles = reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: ""#fff""
  }
});
```

**Edited** for formatting by @bvaughn",Support
https://github.com/facebook/react/issues/17755,17755,Implement a method in serviceWorker.js file for skipWaiting in service worker life cycle,[],closed,FALSE,,1,2020-01-02T09:59:59Z,2020-01-02T16:04:49Z,2020-01-02T16:04:49Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

I have propose for implementing a method in CRA that skip waiting for service-worker after new update in app detected by it
",Other
https://github.com/facebook/react/issues/17762,17762,Bug: Component state resets inconsistently with Suspense for data fetching,[],closed,FALSE,,2,2020-01-03T09:49:35Z,2020-01-04T03:04:12Z,2020-01-03T22:55:35Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
Here is the codesandbox example: https://codesandbox.io/s/blissful-wilbur-xz8dy

##### Background
In the sandbox, there are two main components; `<Parent />` and `<Child />`. `Parent` is rendered as a child of React.Suspense. `Child` is rendered as a child of `Parent`. `Parent` has a count variables coming from a useState hook.

There is a fake fetch function, which gets data from a `Map`. We pass the count as the key to the fetch call. If data is not found, it throws a promise which will set the data on the map after one second.

##### Issue
The `count` state gets reset to its initial state when we call the `fetch()` function from the `Parent` component. However, it preserves the last state if we call the `fetch()` only from the `Child` component.

This behaviour change can be observed by looking at the console.log. With the fetch call in the Parent component, it fires the fetch() call as many times until the same count is received twice. With the fetch call only in the Child component, it renders correctly the first time.

**What is the expected behavior?**
I suppose the behaviour of the `count` state should be consistent despite of from where we call the `fetch()` function. 

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
React 16.12, React-DOM 16.12",Support
https://github.com/facebook/react/issues/17782,17782,Parsing error: Unexpected token,[],closed,FALSE,,1,2020-01-05T19:52:18Z,2020-01-05T20:15:19Z,2020-01-05T20:15:19Z,NONE,completed,,"When I Try To Run My React App It Says [This](https://gist.github.com/Hoidberg/435a70f80a33668716eadec1907df174) Which Is Preventing Me From Running The App. Is There Any Way I Can Fix It?
",Support
https://github.com/facebook/react/issues/17808,17808,react-hooks/rules-of-hooks is taking useRouterHistory as hook,[],closed,FALSE,,2,2020-01-09T11:50:43Z,2020-02-11T16:14:19Z,2020-01-09T14:27:12Z,NONE,completed,,"<!--
  Note: if the issue is about documentation or the website, please file it at:
  https://github.com/reactjs/reactjs.org/issues/new
-->

**Do you want to request a *feature* or report a *bug*?**
bug
**What is the current behavior?**
eslint gives error when useRouterHistory function of React router 3 is used along with eslint-plugin-react-hooks saying that 

error  React Hook ""useRouterHistory"" is called in function ""getSsrWebRoute"" which is neither a React function component or a custom React Hook function  react-hooks/rules-of-hooks

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**

**What is the expected behavior?**
It should whitelist library functions

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Latest",Support
https://github.com/facebook/react/issues/17813,17813,[DevTools] Component inspector not loading for large components,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-01-09T17:12:37Z,2020-01-28T19:21:33Z,2020-01-09T18:34:08Z,NONE,completed,,"**Do you want to request a *feature* or report a *bug*?**
Bug report.

**What is the current behavior?**
The component inspector works fine on most components, but on ones that are particularly large with many large props it is stuck on ""Loading..."".

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**
You should be able to reproduce the issue on: https://data.world/jonloyens/an-intro-to-dataworld-dataset

Navigate to the component with the key: ""jonloyens/an-intro-to-dataworld-dataset"". Other components above and below that one will load, but that one specifically will not.

**What is the expected behavior?**
It should load the component tree eventually. Previous to the 4.3.0 update these components loaded fine.

**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**
Our app uses React version 16.8.3.
I am on dev tools version 4.3.0 on Chrome 79.0.3945.88 on MacOS Catalina 10.15.2 (but others on earlier versions of MacOS are having the same issue).

I have a suspicion that this may be related to https://github.com/facebook/react/pull/17579 as this change has made a big impact on our app (mostly in a good way). We use ImmutableJS, and that change has made it much easier to navigate Immutable props since it preloads the values. The component that is loading slowly uses a proportionately large number of Immutable props to other components.
",Bug
https://github.com/facebook/react/issues/17814,17814,emoji in useState string makes useState stop working,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-01-09T17:50:18Z,2020-01-09T18:41:09Z,2020-01-09T18:40:44Z,NONE,completed,,"I am running on latest React. When I try to use unicode emojis in a useState string, the useState function stops updating the string.

Example:
```javascript
const [text, setText] = useState('😀');

console.log(text);
```

Emoji will be visibile in console log. However, when I run:

```javascript
setText('different text');
```

`text` now is an empty string.

What is happening? Why? How can I solve it?",Other
https://github.com/facebook/react/issues/17823,17823,"Error: ""Could not find node with id ""32"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-01-12T05:04:15Z,2020-01-12T20:38:28Z,2020-01-12T19:22:11Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.3.0-3e0967783

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159833
    at Map.forEach (<anonymous>)
    at commitIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:159779)
    at e.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:160302)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:322998)
    at ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59363)
    at Sl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:107431)
    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99973)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99898)
    at vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96672)

Component stack: in Sl
    in div
    in div
    in div
    in vo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Qi
    in Ve
    in nn
    in Da
    in Yc",Bug
https://github.com/facebook/react/issues/17832,17832,[react-devtools-extensions] Bug: Uncaught TypeError: Cannot read property 'sub' of undefined when navigating to plain-text pages,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,12,2020-01-14T09:43:10Z,2020-02-02T20:04:49Z,2020-02-02T20:04:49Z,NONE,completed,wfnuser,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React Developer Tools: 4.4.0 f749045a5 (1/3/2020) from chrome webstore
Chromium: 81.0.4024.0 snapshot
Ubuntu: 18.04

## Steps To Reproduce

1. Open chrome with React Developer Tools installed
2. Open developer console
3. In console settings (cogwheel in console's top right corner)  check ""Preserve log"" checkbox (to make sure that the log is not overwritten on navigation)
4. Navigate to a React-enabled website, e.g. `https://reactjs.org`
5. Navigate to a plain-text page, such as `https://reactjs.org/robots.txt`

## The current behavior

Error is printed in console:

```
backend.js:32 Uncaught TypeError: Cannot read property 'sub' of undefined
    at g (backend.js:32)
    at e (backend.js:8)
g @ backend.js:32
e @ backend.js:8
postMessage (async)
a @ contentScript.js:1
117 @ contentScript.js:1
n @ contentScript.js:1
(anonymous) @ contentScript.js:1
(anonymous) @ contentScript.js:1

```
where `backend.js` is a link to `chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/backend.js`

`fmkadmapgofadopljbjfkapdkoienihi` is an ID of React Developer Tools: I verified by opening `chrome://extensions/` and performing page search for this ID.


## The expected behavior

No errors

## Notes

It's a convoluted usecase, but I thought it may help to catch bugs for more important ones. 

I am not sure whether it's plain-text-ness of the page that is important, but that's how you can reproduce it.

The hypothesis is that dev tools do not expect HTML tree to disappear on navigation, or either extension enters a state where it cannot digest the plain text pages (and it probably shouldn't try).


<sup>
P.S. Thanks for the refreshed extension, it makes dev experience so wonderful! ❤️ 
</sup>",Bug
https://github.com/facebook/react/issues/17843,17843,the worst arabic translation ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-01-15T00:31:27Z,2020-01-15T00:47:12Z,2020-01-15T00:47:11Z,NONE,completed,,"language and translation
i'm sure that you translated your react site by google 
the worst result at all 
i hope you correct it 

https://github.com/reactjs/rfcs
",Other
https://github.com/facebook/react/issues/17846,17846,"Warning: Did not expect server HTML to contain the [first prerendered] text node ""[chinese characters]""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,16,2020-01-15T15:41:52Z,2020-04-22T13:42:10Z,2020-04-22T13:42:10Z,NONE,completed,Arlen22,"I don't even know where to start with this. When I inspect the source of this error, it is a very well-written section of code, but I can find almost no documentation on this problem anywhere. I don't know what causes it and short of spending the next two weeks stepping through React and Next.js, I have no way of know where to start. I thought I had fixed the problem by making FontAwesome a dynamic import, but then the text next to it through the same error. I've also had classes causing errors by not resolving to the same class names on hydration as the prerendered HTML has. I don't understand this problem and I don't know what it means. 

Here's my package.json, if that helps anything. This problem doesn't make any sense to me but i've been running into it since I started with next.js, but I don't know anything about it. 

```json
{
  ""name"": ""next-project"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""src/pages/index.ts"",
  ""scripts"": {
    ""dev"": ""rm -rf .next .expo && next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""next"": ""next""
  },
  ""author"": ""https://github.com/arlen22/"",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""@expo/vector-icons"": ""^10.0.6"",
    ""@unimodules/core"": ""^5.0.0"",
    ""@unimodules/react-native-adapter"": ""^5.0.0"",
    ""@zeit/next-css"": ""^1.0.1"",
    ""babel-preset-expo"": ""^8.0.0"",
    ""expo-asset"": ""^8.0.0"",
    ""expo-font"": ""^8.0.0"",
    ""native-base"": ""^2.13.8"",
    ""next"": ""^9.1.5"",
    ""next-fonts"": ""^0.19.0"",
    ""next-images"": ""^1.2.0"",
    ""next-progressbar"": ""^1.0.0"",
    ""node-fetch"": ""^2.6.0"",
    ""react"": ""^16.12.0"",
    ""react-dom"": ""^16.12.0"",
    ""react-icons"": ""^3.8.0"",
    ""react-native-drawer-layout"": ""^2.0.0"",
    ""react-native-web"": ""^0.11.7"",
    ""rxjs"": ""^6.5.4""
  },
  ""devDependencies"": {
    ""@expo/next-adapter"": ""^2.0.0-beta.10"",
    ""@types/node"": ""^12.12.18"",
    ""@types/react"": ""^16.9.16"",
    ""@types/react-native"": ""^0.60.25"",
    ""@types/react-native-drawer-layout"": ""^1.3.5"",
    ""file-loader"": ""^5.0.2"",
    ""next-transpile-modules"": ""^2.3.1"",
    ""typescript"": ""^3.7.3"",
    ""url-loader"": ""^3.0.0""
  }
}
```",Support
https://github.com/facebook/react/issues/17868,17868,I was getting an issue about React Devtools and i had downloaded that and as per the instructions ,[],closed,FALSE,,1,2020-01-19T11:05:12Z,2020-01-19T18:14:26Z,2020-01-19T18:14:26Z,NONE,completed,,"👉 Please follow one of these issue templates:
- https://github.com/facebook/react/issues/new/choose

Note: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.
",Other
https://github.com/facebook/react/issues/17871,17871,"Bug: React.Node should not have `true`, or PropTypes.node warns it","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,7,2020-01-19T19:30:36Z,2020-01-21T01:01:21Z,2020-01-21T00:11:34Z,NONE,completed,,"React version: 16.8.6

## Steps To Reproduce

```js
import PropTypes from 'prop-types';

type Props = {
  component: React.Node
};

function Container(props: Props) {
  return ...;
}

Container.propTypes = {
  component: PropTypes.node
}

<Container component={true} />
```

## The current behavior

Flow does not emit error (as React.Node accepts `true`), but PropTypes.node emits below runtime error in browser's console.

```
Invalid prop `component` supplied to `Container`, expected a ReactNode.
```

## The expected behavior

Flow emits type error.

----

[According to a maintainer of prop-types](https://github.com/facebook/prop-types/issues/310#issuecomment-574986751), formerly React itself did not accept `true` for JSX node (in flow `React.Node`) (so not changing prop-types for now), is it right?",Support
https://github.com/facebook/react/issues/17879,17879,Bug: Hooks fail with renderToString,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-01-21T12:02:32Z,2020-01-21T14:39:33Z,2020-01-21T14:39:32Z,NONE,completed,,"So I'm loading a precompiled react file into my server.js and using that to rendertostring.
(there is a very good reason why I'm doing it like this, don't ask about it, that's no part of the issue here)

This actually works but the moment you introduce hooks... it all goes to hell. I've tried setting react/react-dom as externals and such. Nothing works. It keeps throwing the same issue.

1. There are no mismatching versions
2. There are no duplicate react versions I can see
3. The rules of hooks are not broken as far as I know.

React version: 16.12.0

## Steps To Reproduce

1. https://github.com/Pixelatex/hooks-ssr-issue
2. Yarn build
3. Yarn serve
4. Go to localhost:3000 and see it crash, removing the hooks from app.js shows it working.


Link to code example:

https://github.com/Pixelatex/hooks-ssr-issue

## The current behavior

It should render a string with the resulting html.

## The expected behavior

Hooks should just work.",Bug
https://github.com/facebook/react/issues/17883,17883,Bug: onPointerEnterCapture and onPointerLeaveCapture result in `unknown event handler property`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2020-01-21T18:19:58Z,2020-05-19T00:29:45Z,2020-05-19T00:29:36Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: v16.12.0 from https://unpkg.com/react/umd/react.development.js

## Steps To Reproduce

1. attach onPointerEnterCapture to a JSX element
2. observe `unknown event handler property` error in console

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://jsfiddle.net/tommedema/1uqoemxs/2/

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

It displays a `unknown event handler property` warning

## The expected behavior

The capturing phase of the onPointerEnter and onPointerLeave events should be supported",Support
https://github.com/facebook/react/issues/17885,17885,Enable a lint rule not to define after return and fix existing callsites,"[{""id"":155984225,""node_id"":""MDU6TGFiZWwxNTU5ODQyMjU="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20New"",""name"":""Status: New"",""color"":""006b75"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,14,2020-01-21T19:07:16Z,2020-09-01T13:02:31Z,2020-09-01T12:55:11Z,COLLABORATOR,completed,M-Izadmehr,"https://twitter.com/therealyashsriv/status/1219691914523545601

We shouldn't generate code that might cause browser or linting to complain.

https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/legacy-events/SyntheticEvent.js#L259

It's also just a confusing pattern at best.",Bug
https://github.com/facebook/react/issues/17895,17895,Bug: fix BigInt in copyElementPath in react-devtools,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,7,2020-01-23T11:59:29Z,2020-01-31T22:36:00Z,2020-01-31T22:36:00Z,CONTRIBUTOR,completed,,"This is a continuation of an previous issue to add support for the BigInt data type in React DevTools.

Original PR https://github.com/facebook/react/pull/17233 (merged)

This happens when you try to copy a BigInt value to clipboard via React DevTools.

![](https://image.prntscr.com/image/c4SnNIPXR1GlSXIt49FOlw.png)

Would @nutboltu mind taking a look?

```
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
trackError @ <./app-insights/app-insights>:50
eval @ <./app-insights/app-insights>:22
setTimeout (async)
eval @ <./app-insights/app-insights>:21
error (async)
initAppInsights @ <./app-insights/app-insights>:17
main @ VM70658 client>:101
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31
async function (async)
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27
(anonymous) @ 219:3435
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
trackError @ <./app-insights/app-insights>:50
eval @ <./app-insights/app-insights>:22
setTimeout (async)
eval @ <./app-insights/app-insights>:21
error (async)
initAppInsights @ <./app-insights/app-insights>:17
main @ VM70658 client>:101
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:31
async function (async)
main @ ./../../../node_modules/@tessin/tcm/lib/dev/boot-loader:27
(anonymous) @ 219:3435
backend.js:1 Uncaught TypeError: Do not know how to serialize a BigInt
    at JSON.stringify (<anonymous>)
    at c (backend.js:1)
    at Object.copyElementPath (backend.js:6)
    at t.<anonymous> (backend.js:6)
    at t.r.emit (backend.js:6)
    at backend.js:32
    at t (backend.js:8)
c @ backend.js:1
copyElementPath @ backend.js:6
(anonymous) @ backend.js:6
r.emit @ backend.js:6
(anonymous) @ backend.js:32
t @ backend.js:8
postMessage (async)
(anonymous) @ contentScript.js:1
<./app-insights/app-insights>:50 Uncaught TypeError: Cannot read property 'message' of null
    at trackError (<./app-insights/app-insights>:50)
    at eval (<./app-insights/app-insights>:22)
```",Bug
https://github.com/facebook/react/issues/17911,17911,Bug: startTransition suspends immediately when useLayoutEffect is present,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""}]",closed,FALSE,,13,2020-01-25T19:24:27Z,2020-06-29T19:21:37Z,2020-06-29T19:21:37Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 0.0.0-experimental-f42431abe

Please note that I do realize my repro steps are poor at best. I'm *not* filing this issue in hopes of support; I'm only filing this issue to provide one more datum point to help diagnose what I believe to be a bug, which I'm assuming you'll see more reports of.

## Steps To Reproduce

tl;dr - there are some circumstances when a thrown promise inside a hook causes an immediate suspense, instead of respecting the startTransition it's inside of.

startTransition for me is always, in this case, called outside of the normal React handlers. In this case history.listen

https://github.com/arackaf/booklist/blob/special/suspense-blog/react/modules/books/booksSearchState.ts#L75

This is my Suspense-enabled hook that's called as a result of the state update inside the code above

https://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/useQuery.js#L22

the Promise throwing happens here

https://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/queryManager.js#L116

Here's the specific chain of events that leads to the breakage. 

Things work so long as there's always been an existing promise, for the queryManager to throw, ie line 116 in the code immediately above. But the minute there's cached results, and the queryManager invoke's the hook's setState method (which it passed it), ie line 120 here

https://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/queryManager.js#L120

then all future suspenses immediately start suspending, and I always get my fallback, always.

The setState method is shared between the hook, and queryManager here

https://github.com/arackaf/micro-graphql-react/blob/feature/suspense/src/useQuery.js#L17

I stress that I do *not* need support, here; this is just a side project, an unimportant one, and this whole branch is only for Suspense experimenting. But something does definitely appear to be wrong, and I'm hoping this report can help you guys find it.

## The current behavior

startTransition only works until the hook's setState is called from the queryManager it creates, at which point startTransition always triggers hard suspenses, showing my fallback.

## The expected behavior

startTransition should never trigger the fallback until the timeout has expired. 
",Bug
https://github.com/facebook/react/issues/17927,17927,Bug: Autocomplete not working for controlled input,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-01-29T20:31:05Z,2020-07-09T12:25:03Z,2020-07-09T12:25:03Z,NONE,completed,,"React version: 16.12.0

## Steps To Reproduce
1. Have a form with controlled input (i.e. value is set through `onChange` handler)
1. Type `cheese` into the input
1. Submit the form
1. Reload the page
1. Focus the input, type `c`
1. `cheese` is *not* suggested

https://codesandbox.io/s/ancient-currying-oqgt6

It works when a uncontrolled input is used (i.e. value is not set by react `onChange` handler)
1. Have a form with uncontrolled input
1. Type `cheese` into the input
1. Submit the form
1. Reload the page
1. Focus the input, type `c`
1. `cheese` is being suggested

https://codesandbox.io/s/naughty-dijkstra-p3n42

It's not about autofilling address data or passwords, but data previously filled in by the user.
We noticed this issue in Chrome, Firefox and Safari. Even though we could not get any autocompletion to work in Safari, even without React. (We could in Chrome and Firefox)

Thanks!",Bug
https://github.com/facebook/react/issues/17940,17940,"Bug: ComponentDidMount gives different ref vs useEffect(()=>{}, [])","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-01-30T18:50:14Z,2020-01-31T04:24:54Z,2020-01-31T04:24:54Z,NONE,completed,,"React version: 16.12

I know `useEffect` works different than `componentDidMount/Update` it's in the docs. however, in many places states that 

```
useEffect(() => {}, []);
```
is a replacement of 
```
componentDidMount() {}
```

However in the following code, `useEffect` retuns the expected ref but not `componentDidMount`, I expect them to work differently but didn't expect they give different result. (actual dom vs undefined)

Wrapper.js
```
const Wrapper = ({ children }) => {
  const wrapperRef = useRef();

  const getRef = useCallback(() => {
    return wrapperRef.current;
  }, []);

  const renderChildren = useMemo(
    () => () => {
      debugger;
      if (children instanceof Function) {
        return children({
          prop1: 1,
          prop2: 2,
          parentRef: wrapperRef,
          getParentRef: getRef
        });
      } else {
        return children;
      }
    },
    []
  );

  return <div ref={wrapperRef}>{renderChildren()}</div>;
};
```

Inner1.js
```
const Inner = ({ prop1, prop2, getParentRef }) => {
  useEffect(() => {
    if (getParentRef) {
      console.log(""ref in inner"", getParentRef());
    }
  }, []);

  return (
    <div style={{ background: ""green"" }}>
      {prop1}
      {prop2}
    </div>
  );
};
```

Inner2.js
```
class Inner2 extends React.Component {
  componentDidMount() {
    console.log(""ref in Inner2"", this.props.getParentRef());
  }

  render() {
    return (
      <div style={{ background: ""yellow"" }}>
        {this.props.prop1}
        {this.props.prop2}
      </div>
    );
  }
}
```

app.js
```
<Wrapper>
        {({ prop1, prop2, parentRef, getParentRef }) => {
          return (
            <React.Fragment>
              <Inner
                prop1={prop1}
                prop2={prop2}
                parentRef={parentRef.current}
                getParentRef={getParentRef}
              />
              <Inner2
                prop1={prop1}
                prop2={prop2}
                parentRef={parentRef.current}
                getParentRef={getParentRef}
              />
            </React.Fragment>
          );
        }}
      </Wrapper>
```


## Steps To Reproduce

1. run the live example
2. see the output log

Link to code example:

https://codesandbox.io/s/busy-platform-4l8ch

## The current behavior
in `componentDidMount` it's undefined
in `useEffect` the ref is not undefined

## The expected behavior
both shouldn't be undefined.",Other
https://github.com/facebook/react/issues/17953,17953,Bug: useReducer runs the queued updates with new props,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1109410193,""node_id"":""MDU6TGFiZWwxMTA5NDEwMTkz"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Hooks"",""name"":""Component: Hooks"",""color"":""c2f27b"",""default"":false,""description"":""""}]",closed,FALSE,,18,2020-02-01T07:58:03Z,2021-09-27T23:25:11Z,2021-09-27T23:25:11Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.8.0

## Steps To Reproduce

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/usereducer-wfcmq Link to codesandbox.

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Initially step is 0. So for every step react does not rerender due to this https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L1347. But state updates are queued. So when `step` changes all the state updates are done and hence creates a bug by adding the new step prop.

https://overreacted.io/a-complete-guide-to-useeffect/#why-usereducer-is-the-cheat-mode-of-hooks",Bug
https://github.com/facebook/react/issues/17957,17957,Docs: ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,FALSE,,0,2020-02-03T06:30:19Z,2020-02-03T06:31:11Z,2020-02-03T06:31:11Z,NONE,completed,,"🚨 This issue tracker is not for documentation issues. 🚨

The React website is hosted on a separate repository. You may let the
team know about any issues with the documentation by opening an issue there:
- https://github.com/reactjs/reactjs.org/issues/new
",Other
https://github.com/facebook/react/issues/17986,17986,"Error: ""Object.entries is not a function""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-02-06T07:05:26Z,2020-02-29T19:55:26Z,2020-02-29T19:55:25Z,NONE,completed,komlraj,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.4.0-f749045a5

Call stack: at Ka (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:281424)
    at ei (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:58864)
    at yl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:106932)
    at kc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99474)
    at wc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:99399)
    at fc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:96173)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45937
    at n.unstable_runWithPriority (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:3676)
    at qo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45647)
    at Xo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:45883)

Component stack: in Ka
    in div
    in bi
    in div
    in Ai
    in Suspense
    in ei
    in div
    in div
    in la
    in Ur
    in vo
    in Unknown
    in n
    in Unknown
    in div
    in div
    in Qi
    in Ve
    in nn
    in Da
    in Yc",Other
https://github.com/facebook/react/issues/18017,18017,Argument passed to useState hook or value setter method is mutated,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-02-11T12:53:27Z,2020-02-11T16:14:42Z,2020-02-11T16:14:41Z,NONE,completed,,"No really sure that is an issue, but I detected that behavior and could not find documentation about it. My guess here is that argument reference is passed down to the value, but I couldn't find where to find the cause in source code.

In a case where 
```jsx
const [value, setValue] = useState(props.data)

const method = (v) => {
  value.v = v
  setValue(value)
}
```

React version: 16.12.0

## Steps To Reproduce

1. Declare a useState hook passing initialState from a prop or outside variable
2. Mutate the value
3. props.data should be mutated

Link to code example: [issue reproduced here](https://codesandbox.io/s/react-hooks-state-management-k4d3z)

## The current behavior
Argument passed to useState or value setter is changed if value mutates

## The expected behavior
Argument should not mutate",Support
https://github.com/facebook/react/issues/18037,18037,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-02-14T03:54:34Z,2021-10-19T08:07:30Z,2020-02-15T23:06:48Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0

## Steps To Reproduce

1. location: react-reconciler/src/ReactUpdateQueue/processUpdateQueue method
2. updateQueue: sufficient->insufficient>sufficient>insufficient
3. baseState is not up-to-date for update of insufficient priority
<!-- 
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/18053,18053,Question: It's not problem just question in my mind,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null},{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-02-17T13:33:08Z,2020-02-22T06:33:25Z,2020-02-22T03:58:28Z,CONTRIBUTOR,completed,,"Why all implements of hooks in `react-dom` and we have to import from `react`?
Just I want to know about it",Support
https://github.com/facebook/react/issues/18058,18058,Context API not working in production,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-02-17T15:41:00Z,2020-02-22T03:56:07Z,2020-02-22T03:56:07Z,NONE,completed,,"Hi! React Context works perfectly on my application on development environment with Webpacker but when I precompile my assets to serve my application in production environment it throw me TypeError: undefined is not an object (evaluating 'n.context.user.username') error. I tried implementing all the suggested solutions but it still didn't work. I upgrade the versions: to ""react"": ""^16.7.0"", ""react-dom"": ""^16.6.0"" and defining the Context creation in a separate file. The app will work fine if we use <UserContext.Consumer/> but want to stick to try our best to stick to the contextType method. Would appreciate any help. Thank you.

Link to code example:

Context Creation
https://github.com/VantageSG/Vantage/blob/master/app/javascript/contexts/UserContext.jsx

Context Provider
https://github.com/VantageSG/Vantage/blob/master/app/javascript/components/App.jsx

Context Consumer
https://github.com/VantageSG/Vantage/blob/master/app/javascript/components/navBar/desktopNavBar.jsx

React version: 16.6

## The current behavior
`TypeError: undefined is not an object (evaluating 'n.context.user.username') error`

## The expected behavior
Context API working properly.",Other
https://github.com/facebook/react/issues/18065,18065,"False positives with warning ""React Hook useEffect has missing dependencies""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-02-18T13:27:20Z,2020-02-26T10:45:22Z,2020-02-24T15:27:04Z,NONE,completed,,"The useEffect() hook produces false positive warnings concerning ""React Hook useEffect has missing dependencies"" in rare cases.

React version: 16.12.0

## Steps To Reproduce

There are situations in which ""React Hook useEffect has missing dependencies"" is not correct concerning the problem and implementation logic at hand. Example:

```ts
const [current, send] = useMachine(machine);
const currentMatchesSignedIn = current.matches('signedIn');

useEffect(() => {
    if (currentMatchesSignedIn) {
        send('UPDATE_ENTRIES');
    }
  }, [currentMatchesSignedIn]);
```

`current` represents the current state, `send` is a function that the effect should not depend upon. It would be wrong if the effect would depend upon a change of it.

I had other circumstance in which the warning was plainly wrong, that didn't involve Xstate. It would be nice if there was a way to disable this warning for this rare cases.",Support
https://github.com/facebook/react/issues/18089,18089,Fetch API call inside use effect to get items in page load not working in IOS devices,[],closed,FALSE,,1,2020-02-20T19:02:39Z,2020-02-21T12:02:34Z,2020-02-21T12:02:34Z,NONE,completed,,"I tried to get list of items to display in the page load using use effect with React 16.4..
async function fetchData() {
    const res = await fetch(""https://swapi.co/api/planets/4/"");
    res
      .json()
      .then(res => setPlanets(res))
      .catch(err => setErrors(err));
  }

  useEffect(() => {
    fetchData();
  });

It's working with desktop and Android devices. But it's not working with IOS. Iphone 7, iphone 8+ etc

Please suggest to resolve issue with IOS devices..
@coryhouse @acdlite ",Support
https://github.com/facebook/react/issues/18097,18097,40 errors associated with this file,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-02-21T19:16:46Z,2020-02-22T08:04:21Z,2020-02-22T03:29:43Z,NONE,completed,,"

![https://i.imgur.com/o4MKh9p.jpg](https://i.imgur.com/o4MKh9p.jpg)

https://github.com/reactjs/reactjs.org

I decided to try react and reactjs.org and saw a lot of errors.

i use windows

Strange, but even with these errors the site seems to work.

```
GET http://0.0.0.0:8000/__webpack_hmr net::ERR_ADDRESS_INVALID

C:/react/reactjs.org/node_modules/react-error-overlay/lib/index.js:2172 Warning: The <HeaderLink /> component appears to be a function component that returns a class instance. Change HeaderLink to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `HeaderLink.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.

C:/react/reactjs.org/node_modules/react-error-overlay/lib/index.js:2172 Warning: The <Header /> component appears to be a function component that returns a class instance. Change Header to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `Header.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.



__stack_frame_overlay_proxy_console__ | @ | C:/react/reactjs.org…y/lib/index.js:2172
-- | -- | --
  | warningWithoutStack | @ | C:/react/reactjs.org….development.js:530
  | mountIndeterminateComponent | @ | C:/react/reactjs.org…evelopment.js:18805
  | beginWork$1 | @ | C:/react/reactjs.org…evelopment.js:20162
  | beginWork$$1 | @ | C:/react/reactjs.org…evelopment.js:25756
  | performUnitOfWork | @ | C:/react/reactjs.org…evelopment.js:24695
  | workLoopSync | @ | C:/react/reactjs.org…evelopment.js:24671
  | performSyncWorkOnRoot | @ | C:/react/reactjs.org…evelopment.js:24270
  | scheduleUpdateOnFiber | @ | C:/react/reactjs.org…evelopment.js:23698
  | updateContainer | @ | C:/react/reactjs.org…evelopment.js:27103
  | eval | @ | C:/react/reactjs.org…evelopment.js:27528
  | unbatchedUpdates | @ | C:/react/reactjs.org…evelopment.js:24433
  | legacyRenderSubtreeIntoContainer | @ | C:/react/reactjs.org…evelopment.js:27527
  | render | @ | C:/react/reactjs.org…evelopment.js:27608
  | eval | @ | C:/react/reactjs.org/.cache/app.js:94
  | setTimeout (async) |   |  
  | eval | @ | C:/react/reactjs.org…omready/ready.js:26
  | eval | @ | C:/react/reactjs.org/.cache/app.js:93
  | Promise.then (async) |   |  
  | eval | @ | C:/react/reactjs.org/.cache/app.js:91
  | Promise.then (async) |   |  
  | eval | @ | C:/react/reactjs.org/.cache/app.js:48
  | eval | @ | C:/react/reactjs.org/.cache/app.js:130
  | ./.cache/app.js | @ | commons.js:827
  | __webpack_require__ | @ | commons.js:725
  | fn | @ | commons.js:102
  | eval | @ | C:/react/reactjs.org…js.org/.cache/app:3
  | 0 | @ | commons.js:5470
  | __webpack_require__ | @ | commons.js:725
  | (anonymous) | @ | commons.js:792
  | (anonymous) | @ | commons.js:795


```",Support
https://github.com/facebook/react/issues/18109,18109,i can not see the components,[],closed,FALSE,,0,2020-02-23T04:47:09Z,2020-02-23T05:19:48Z,2020-02-23T05:19:48Z,NONE,completed,,"👉 Please follow one of these issue templates:
- https://github.com/facebook/react/issues/new/choose

Note: to keep the backlog clean and actionable, issues may be immediately closed if they do not follow one of the above issue templates.
",Other
https://github.com/facebook/react/issues/18123,18123,Discussion: useEffect hook with array dependency that has a default value causes render loop,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,12,2020-02-25T12:14:38Z,2021-10-19T23:50:48Z,2020-10-12T01:57:16Z,NONE,completed,,"So maybe this is not a bug (because it's default JavaScript behavior) but a pitfall that should be documented in the `useEffect`-section of the hooks documentation. I'm not quite sure because it feels like react should handle this as default value assignment on destructuring functional component props is recommended.

When a `useEffect`-Hook that has an array-prop with a default value as one of its dependencies calls a function mutating any other prop, a render loop will occur.

React version: 16.12.0

## Steps To Reproduce
1. Create a functional component that has 3 props:
 -- an array prop that has a default value (created within destructuring)
 -- any other prop (e.g. string)
 -- a callback function to mutate the second prop
2. Have an `useEffect` function that calls the callback to mutate the second prop. The `useEffect` needs to have the array prop as one of its dependencies

Link to code example:

https://codesandbox.io/s/smoosh-field-fqduq

## The current behavior
When the default value for the array prop is set to an ""anonymous"" array (or object) inside of the props destructuring, the `useEffect` will always trigger and so the second prop will be changed via the callback function and a re-render will happen. Then the effect will be triggered again as the value for the array will have changed again.

## The expected behavior
Default values for arrays (and objects) can be assigned within the destructuring of the props without causing re-renders (or even render loops) when the mentioned `useEffect` is not present (like, why should it trigger a re-render?).
I'd expect react to behave the same in this case (don't compare empty arrays/objects by reference). If not, there should be at least a warning in the docs of `useEffect` that this is something to look out for.

## Workaround
If the default prop is saved as a variable outside the functional component and then assigned as the default value (read: if you have referential equality), the issue does not occur obviously (default JavaScript behavior).",Support
https://github.com/facebook/react/issues/18134,18134,setState takes type State but it should be Partial<State>,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-02-26T01:12:49Z,2020-02-26T01:47:43Z,2020-02-26T01:47:43Z,NONE,completed,,"Not sure where TS typing complaints belong, I have this one:

![Screenshot from 2020-02-25 17-13-18](https://user-images.githubusercontent.com/11139560/75302291-27d20980-57f2-11ea-9ad9-3dad9ef128d1.png)


As far as I know it should be `Partial<State>` not `State` for the type. Here is the type of setState() 

```js
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
```

but this is better:

```js
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<Partial<S>>>];
```",Support
https://github.com/facebook/react/issues/18147,18147,[React DevTools] Bug: Cannot update a component from inside the function body of a different component.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,19,2020-02-27T09:08:35Z,2020-09-30T17:01:47Z,2020-02-27T12:45:29Z,NONE,completed,,"After updating React to 16.13, I am receiving this error, which is pretty cryptic and only occurs on that update (16.12 works fine)
<img width=""639"" alt=""Screen Shot 2020-02-27 at 5 07 33 PM"" src=""https://user-images.githubusercontent.com/4783372/75428761-a7431280-5983-11ea-9ad9-f8f6157a485e.png"">

Demo can be found here:
https://github.com/LXSMNSYC/react-scoped-model/tree/master/example",Support
https://github.com/facebook/react/issues/18148,18148,Bug: No matching version found for scheduler@^0.19.0,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-02-27T09:46:22Z,2020-02-27T12:49:46Z,2020-02-27T12:49:45Z,NONE,completed,,"Error ""No matching version found for scheduler@^0.19.0""  during npm i

React version: 16.8

## The current behavior
<img width=""558"" alt=""Schermata 2020-02-27 alle 10 44 30"" src=""https://user-images.githubusercontent.com/41707194/75432089-27e71c00-594e-11ea-8998-73366ba262f0.png"">

## The expected behavior
install works",Other
https://github.com/facebook/react/issues/18183,18183,useMutableSource and hydration,"[{""id"":1775958285,""node_id"":""MDU6TGFiZWwxNzc1OTU4Mjg1"",""url"":""https://api.github.com/repos/facebook/react/labels/React%20Core%20Team"",""name"":""React Core Team"",""color"":""9149d1"",""default"":false,""description"":""Opened by a member of the React Core Team""}]",closed,FALSE,,2,2020-02-28T21:38:11Z,2020-05-21T23:00:47Z,2020-05-21T23:00:47Z,COLLABORATOR,completed,bvaughn,"Follow up to PR #18000 and RFC https://github.com/reactjs/rfcs/pull/147

The new `useMutableSource` hook will need at least one additional API to be able to support server rendering and hydration. This API would likely be on the React root (the object returned by `createRoot`) and would enable mutable sources to have their versions eagerly captured before hydration begins.

##### How is the version used?

Currently a work-in-progress version of each mutable source is stored on the source itself. This version enables us to [avoid tearing before a source has been subscribed to](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md#reading-from-a-source-before-subscribing). This version number is lazily populated (the first time a source is read during a given render).

##### How will the version be used during hydration?

In the case of server rendering, this version will need to be eagerly populated for every source so that we can detect tearing between the version of the source used for the server respond, and the version we will eventually read from while hydrating on the client.

##### How will this work?

One way to do this would be to store an array on each React root of mutable source and version number pairs. Each time we start (or resume) hydration, we can iterate through this array and use it to initialize the work-in-progress version for each source.

Once all outstanding hydration work is finished, we can clear the array. (Although this will require an additional change as we do not currently have a way to detect that we've finished all pending hydration work.)",Bug
https://github.com/facebook/react/issues/18198,18198,Bug: Child component Ref current is null,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-03-02T20:03:41Z,2020-03-03T15:20:49Z,2020-03-03T15:20:48Z,NONE,completed,,"<!--
  I am going to use React.createRef() to call child component's method in parent component.
when I use this for normal tag, it works well.
but doesn't work for custom component.
-->
```
React version:
16.8.6
## Steps To Reproduce


import AUserList from '../AUserList';
class AUsers extends Component {
  
  constructor(props) {
    super(props);
    
    this.list = React.createRef();
    this.divTag = React.createRef();
  }
  handleChangeDataList = () => {
    console.log(this.list.current);//null
    console.log(this.divTag.current);//it works
   this.list.current.reloadAUserTable();//it is error
  }
  render() {
   return (
        <>
            <div className=""animated fadeIn"" ref={this.divTag}/>
            <AUserList ref={ref => this.list=ref}/>
            <Button  onClick={() => this.handleChangeDataList()}>atest</Button>
       </>
   )
  }
}
export default connect(mapStateToProps, mapDispatchToProps, null, {forwardRef : true})(AUsers);

class AUserList extends Component {
//from AUsers
  reloadAUserTable = () => {
    console.log('good');
  }
render() {
    const {
      AUserData_arr,
    } = this.props;
    return (
      <div>
        <Card>
          <CardBody>
            {AUserData_arr  &&
              <BootstrapTable data={AUserData_arr} version=""4"" striped hover pagination search tabIndexCell >
                
                <TableHeaderColumn dataField=""UserLevel_Name"" dataFormat={this.userLevelFormatter} dataSort>LEVEL</TableHeaderColumn>
              </BootstrapTable>
            }
          </CardBody>
        </Card>
      </div>
    );
  }
```
![image](https://user-images.githubusercontent.com/45660446/75713270-7c9ae600-5d04-11ea-89f8-6cf33e5e5302.png)
If I use connect(), ref doesn't works?",Support
https://github.com/facebook/react/issues/18200,18200,Feature: extend propTypes functionality,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-03-03T14:11:07Z,2020-03-03T14:15:11Z,2020-03-03T14:15:11Z,NONE,completed,,"React version: Latest

## More of a feature request 😄 

```
const Parent = ({ x, y }) => <p>{x}{y}</p>;
Parent.propTypes = {
  x: PropTypes.string,
  y: PropTypes.string,
};

const Child = ({ a, b, x, y }) => {
  return (
    <div>
      <Parent x={x} y={y} />
      <p>{a}</p>
      <p>{b}</p>
    </div>
  );
};
Child.propTypes = {
  a: PropTypes.string,
  b: PropTypes.string,
  ...PropTypes.extend(Parent), // => Can this be possible?
};
```

Link to code example:

- shared the code snippet in the issue itself 😅 

## The current behavior

The current behaviour doesn't let you extent propTypes functionality from one component to the other. I see this as a very common practise for e.g, in UI libraries where you build components on top of other components. For example a `BaseButton` & on top of it you will build `PrimaryButton`, 'SecondaryButton` where the 2 buttons extend on `BaseButton` functionalities.

The functionality itself works, but there is no one in `propTypes` to have a feature where it can inherit props from it's parent class.

For my use case, in my UI library I am trying to generate an API table from `propTypes` section of the component, but since I can not extend props from class I have to manually re-add each prop from parent component to child component for API generation.

## The expected behavior

The propTypes does not have a feature where you can extent props from a certain component.
",Feature
https://github.com/facebook/react/issues/18205,18205,Bug: backend.js Uncaught TypeError: Cannot read property 'sub' of undefined,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-03-03T20:44:52Z,2020-03-03T23:28:52Z,2020-03-03T23:28:52Z,NONE,completed,bvaughn,"```
backend.js:32 Uncaught TypeError: Cannot read property 'sub' of undefined
    at g (backend.js:32)
    at e (backend.js:8)
```

It happens when a server returns a string without HTML. I suppose React dev tools expect DOM.

![Screenshot 2020-03-03 at 21 43 42](https://user-images.githubusercontent.com/66249/75817818-18c1fd00-5d98-11ea-89f5-547e97c44632.png)

",Bug
https://github.com/facebook/react/issues/18225,18225,link test build then Can't resolve './cjs/react-dom.development.js',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-03-05T17:11:46Z,2020-03-14T13:34:39Z,2020-03-14T13:34:39Z,NONE,completed,,"React Source Code version: 16.13.0

## Steps To Reproduce

1. clone react souce code 
2. yarn build react and react-dom then link them ( [from doc  ](https://reactjs.org/docs/how-to-contribute.html)
<img width=""980"" alt=""image"" src=""https://user-images.githubusercontent.com/2384105/76006565-a4c65700-5f47-11ea-9c48-399e37dcd268.png"">


3. cd myProject( clean project from create-react-app)
4. link react and react-dom  then yarn start


## The current behavior
<img width=""656"" alt=""image"" src=""https://user-images.githubusercontent.com/2384105/76006337-48633780-5f47-11ea-8a70-c1b78f292f78.png"">

## The expected behavior
server ok
",Support
https://github.com/facebook/react/issues/18243,18243,Bug: Passing an array as a `useEffect` dependency causes an infinite loop,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,7,2020-03-07T04:47:54Z,2022-07-25T08:04:51Z,2020-03-07T19:34:52Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.0

## Steps To Reproduce

When the following code is run in a React component, it causes an endless loop. Passing an array as a dependency to `useEffect` (in this case, `args`), causes that to happen, but it shouldn't.

I've read that I can use `[args.length]` to stop this from happening, but then the ESLint rule `react-hooks/exhaustive-deps` throws an error, so I want to avoid doing it that way.

```js
import React, { useEffect, useState } from 'react';

export default function Home() {
  const args = ['a'];
  const [value, setValue] = useState(['b']);

  useEffect(() => {
    setValue(['c']);
  }, [args]);

  console.log('value', value);
}
```

Notice in the code above, that I don't even use or modify `args` at all, in the `useEffect` callback.

If I change the value of `args` to a string, like `const args = 'a'`, then there is no endless loop. So the problem seems to occur when the dependency is an array.

## The current behavior

The page runs in an infinite loop.

## The expected behavior

It should only run once.",Support
https://github.com/facebook/react/issues/18247,18247,Bug: Callback referencing to outdated state when assigned as part of initial state object,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-03-08T13:44:01Z,2020-03-09T16:40:19Z,2020-03-08T17:10:45Z,NONE,completed,,"Callback referencing to outdated state when assigned as part of initial state object.

I am not actually sure if this is a bug or intended behavior, and if it is intended I would love to have a lint rule or react warning me about it.

React version: 16.13.0

## Steps To Reproduce

```
import React from ""react"";

function App() {
  const increaseCount = () =>
    setCountObj({ ...countObj, count: countObj.count + 1 });

  const [countObj, setCountObj] = React.useState({
    count: 0,
    onButtonClick: increaseCount
  });

  return (
    <div>
      <h3>count: {countObj.count}</h3>
      <button onClick={countObj.onButtonClick}>Click to increase count</button>
    </div>
  );
}

export default App;
```

Link to code example: [https://codesandbox.io/s/pensive-mendeleev-f25is](https://codesandbox.io/s/pensive-mendeleev-f25is)

## The current behavior
This is a simplified use case of an issue I encountered lately.

When clicking the button multiple times the count stays at 1, it seems that the callback inside the initial state referencing to outdated state value every time its called

## The expected behavior
The state inside the callback should be undefined or referencing to the correct state.

## Solution
I solved the issue by removing the callback from the state and creating 'actualState' variable that is a merge between the state with the callback.",Support
https://github.com/facebook/react/issues/18250,18250,Bug: Mixing native and synthetic events causes abnormal behavior,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2020-03-09T10:27:34Z,2020-06-14T12:09:35Z,2020-06-14T12:09:35Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.0

## Steps To Reproduce

1. 
![image](https://user-images.githubusercontent.com/13357301/76204226-f2d2a780-6232-11ea-869f-d89366bb5446.png) move mouse from A to B, You can see that the console printed ""inner mouseenter""

2. 
![image](https://user-images.githubusercontent.com/13357301/76204387-4513c880-6233-11ea-8f2c-cd754cc80bbe.png) move mouse from A to B, nothing


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://codesandbox.io/s/staging-breeze-z05hz

More info:

user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

not print 'inner mouseenter'

## The expected behavior

print 'inner mouseenter'
",Other
https://github.com/facebook/react/issues/18284,18284,Bug: DevTools Profiler doesn't show selected commit,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2020-03-12T00:28:58Z,2020-03-12T02:12:58Z,2020-03-12T02:12:58Z,MEMBER,completed,bvaughn,"I don't see the selection at all. My version is 4.5.0. I think this regressed.

<img width=""266"" alt=""Screenshot 2020-03-11 at 23 40 37"" src=""https://user-images.githubusercontent.com/810438/76475966-6d005900-63f8-11ea-8779-7330eba193ee.png"">
",Bug
https://github.com/facebook/react/issues/18290,18290,Bug: IE11 throws error Assignment to read-only properties is not allowed in strict mode,"[{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,10,2020-03-12T10:38:37Z,2021-03-24T18:55:41Z,2021-03-24T18:55:40Z,NONE,completed,,"When working in development mode in IE11 error is thrown in file 
react-dom.development.js line 185. 

Error: ""Assignment to read-only properties is not allowed in strict mode""
window.event is readOnly variable and IE11 is strict about it.

![image](https://user-images.githubusercontent.com/5305497/76511927-8509c400-645c-11ea-89c4-9f38a6e0a778.png)


React version: 16.13.0

In production build there is no error as this code block is not included.

",Other
https://github.com/facebook/react/issues/18294,18294,Bug: renderToString & Inconsistent Behavior Updating State,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-03-12T19:29:55Z,2020-03-30T15:27:02Z,2020-03-30T15:27:02Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.10

## Overview
I do not know if this is a bug or expected behavior; I'm hoping to receive that answer. I've searched docs, issues, etc. and haven't found a clear answer on the behavior expected by `renderToString` in this scenario.

## Steps To Reproduce
This is not a fully implemented SSR example. The main thing to focus on is the result of `renderToString`. The pre-existing `render` remains for comparison purposes.

1. Open codesandbox
2. Review console logs

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
1. [React SSR + Context](https://codesandbox.io/s/react-ssr-context-z4tqi)
2. [React SSR + Passed State](https://codesandbox.io/s/react-ssr-passed-state-yocro)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
**TLDR:** renderToString will re-render a component due to a state change, but only if the state is defined in that component.

In the first example (React SSR + Context), review the `App.js` file and notice there are two sets of state (value and setter), one defined _in_ App (this is important) and one defined in `context.js` and consumed with a custom hook.

The code is written to update the state immediately in order to demonstrate what _I think_ is an inconsistency. Reviewing the logged `htmlString`, notice that it logs the ""this will be server-rendered"" html, but not the ""this will NOT be server-rendered"". To me, this means App's state change has been processed and re-rendered, but the state in context has not changed or triggered the consumer (App) to re-render. My big question here is **why?**

In the second example (React SSR + Passed State), the setup is quite similar, but takes an even more direct approach by sharing state through props. This was intended to validate the theory that the previously noted observation is related to Context, however, this example demonstrates the same behavior.

## The expected behavior
**TLDR:** renderToString will re-render a component due to a state change defined in a component and updated in another component.

Seeing that the html string produced by `renderToString` indicates that the state defined and updated in `App` was processed, I expected the same behavior for the state defined in `TestProvider` and updated in `App`.
",Support
https://github.com/facebook/react/issues/18372,18372,"Bug: Combination of standard hooks causes ""Cannot read property 'length' of undefined"" in areHookInputsEqual","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-03-23T21:02:30Z,2021-06-29T16:44:22Z,2020-03-23T21:30:43Z,NONE,completed,,"Found a combination of fairly trivial hooks that causes ""Cannot read property 'length' of undefined"" in areHookInputsEqual"" error.

React version: 16.12

## Steps To Reproduce

1. Open sandbox at https://codesandbox.io/s/hooks-combo-npe-6tyck
2. Click TRY ME button.
3. Yellow screen

Link to code example:

https://codesandbox.io/s/hooks-combo-npe-6tyck

## The current behavior
Yellow-screen crash

## The expected behavior
The StateModal pointing to MyComponent is rendered at the obvious spot.",Support
https://github.com/facebook/react/issues/18389,18389,Bug: NotFoundError: Node was not found,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,5,2020-03-25T21:50:07Z,2020-07-13T22:31:50Z,2020-03-30T15:19:48Z,NONE,completed,,"React version: 16.13.1

After update react getting crash on production everytime. in local development its crashing but not all time.

Error getting in development :
NotFoundError: Node was not found

Error getting in production:
Uncaught (in promise) DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.",Other
https://github.com/facebook/react/issues/18396,18396,[eslint-plugin-react-hooks] Exhaustive deps requires a dispatch function from useReducer to be included in dependencies,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-03-26T15:42:03Z,2020-03-30T15:18:08Z,2020-03-30T15:18:08Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

The eslint-plugin-react-hooks does not seem to recognize the dispatch function from `useReducer` when it is returned from another function. If we use that returned function in a `useCallback` or `useEffect`, the plugin warns that the function should be added to the dependency list.

As per React docs:

```
React guarantees that `dispatch` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.
```

React version: 16.12.0
eslint-plugin-react-hooks version: 2.5.1

## Steps To Reproduce

1. Create a hook that returns the dispatch function of useReducer
2. Use that returned function in `useCallback` or `useEffect`

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

```js
const useForceUpdate = () => {
    const [, forceUpdate] = useReducer((x) => x + 1, 0);
    return forceUpdate;
};

const Component = () => {
    const forceUpdate = useForceUpdate();

    const onClick = useCallback(() => {
        console.log(""CLICKED!"");
        forceUpdate();
    }, []);
    // ^ missing dependency forceUpdate

    const [, forceUpdate2] = useReducer((x) => x + 1, 0);

    const onClick2 = useCallback(() => {
        console.log(""CLICKED!"");
        forceUpdate2();
    }, []);
    // No warning

    return (
        <>
            <button onClick={onClick} />
            <button onClick={onClick2} />
        </>
    );
};
```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
There is a warning on `onClick` 
```
React Hook React.useCallback has a missing dependency: 'forceUpdate'. Either include it or remove the dependency array. eslint(react-hooks/exhaustive-deps)
```

## The expected behavior
There shouldn't be a warning, since `useForceUpdate` returns a dispatch function from `useReducer`.",Support
https://github.com/facebook/react/issues/18399,18399,Having errors with usereducer and usecallback functions ,[],closed,FALSE,,4,2020-03-26T18:17:17Z,2020-03-28T15:00:33Z,2020-03-27T18:01:18Z,NONE,completed,,"```jsx
const formReducer=(state, action) => {
    switch (action.type) {
        case 'INPUT_CHANGE':
            let formIsValid = true;
            for (const inputId in state.inputs) {
                if (inputId === action.inputId) {
                    formIsValid = formIsValid && action.isValid;
                } else {
                    formIsValid = formIsValid && state.inputs[inputId].isValid;
                }
            }
          return {
              ...state,
              inputs:{
                  ...state.inputs,
                  [action.inputId]:{value: action.value, isValid: action.isValid}
              },
              isValid: formIsValid
          };
        default:
            return state;
    }
};

const newplace =() => {
   const[formState,dispatch] =  useReducer(formReducer, {
        inputs:{
            title:{
                value:'',
                isValid: false
            },
            description:{
                value:'',
                isValid: false
            }
        },
        isValid: false
    });
    const InputHandler = useCallback((id, value, isValid) => {
        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id });
         
    },[]);
```",Support
https://github.com/facebook/react/issues/18410,18410,"Bug: ncu(node-check-updates) shows many dependencies needing update, some major","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-03-27T22:10:04Z,2020-03-28T13:38:49Z,2020-03-28T13:38:49Z,NONE,completed,,"this is ncu output in package.json currently in react master:

> 
> @babel/cli                                             ^7.8.0  →         ^7.8.4 
>  @babel/code-frame                                      ^7.8.0  →         ^7.8.3 
>  @babel/core                                            ^7.8.0  →         ^7.9.0 
>  @babel/helper-module-imports                           ^7.8.0  →         ^7.8.3 
>  @babel/parser                                          ^7.8.0  →         ^7.9.4 
>  @babel/plugin-external-helpers                         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-proposal-class-properties                ^7.8.0  →         ^7.8.3 
>  @babel/plugin-proposal-object-rest-spread              ^7.8.0  →         ^7.9.0 
>  @babel/plugin-syntax-dynamic-import                    ^7.8.0  →         ^7.8.3 
>  @babel/plugin-syntax-jsx                               ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-arrow-functions                ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-async-to-generator             ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-block-scoped-functions         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-block-scoping                  ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-classes                        ^7.8.0  →         ^7.9.2 
>  @babel/plugin-transform-computed-properties            ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-destructuring                  ^7.8.0  →         ^7.8.8 
>  @babel/plugin-transform-for-of                         ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-literals                       ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-modules-commonjs               ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-object-super                   ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-parameters                     ^7.8.0  →         ^7.9.3 
>  @babel/plugin-transform-react-jsx-source               ^7.8.0  →         ^7.9.0 
>  @babel/plugin-transform-shorthand-properties           ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-spread                         ^7.8.0  →         ^7.8.3 
>  @babel/plugin-transform-template-literals              ^7.8.0  →         ^7.8.3 
>  @babel/preset-flow                                     ^7.8.0  →         ^7.9.0 
>  @babel/preset-react                                    ^7.8.0  →         ^7.9.4 
>  @babel/traverse                                        ^7.8.0  →         ^7.9.0 
>  art                                                    0.10.1  →         0.10.3 
>  babel-eslint                                          ^10.0.3  →        ^10.1.0 
>  babel-plugin-syntax-trailing-function-commas           ^6.5.0  →        ^6.22.0 
>  coveralls                                              ^3.0.9  →        ^3.0.11 
>  cross-env                                              ^6.0.3  →         ^7.0.2 
>  danger                                                ^9.2.10  →        ^10.0.0 
>  eslint-config-fbjs                                     ^1.1.1  →         ^3.1.1 
>  eslint-config-prettier                                 ^6.9.0  →        ^6.10.1 
>  eslint-plugin-flowtype                                ^2.25.0  →         ^4.7.0 
>  eslint-plugin-jest                                   ^22.15.0  →        ^23.8.2 
>  eslint-plugin-no-for-of-loops                          ^1.0.0  →         ^1.0.1 
>  eslint-plugin-react                                    ^6.7.1  →        ^7.19.0 
>  fbjs-scripts                                            0.8.3  →          1.2.0 
>  filesize                                               ^6.0.1  →         ^6.1.0 
>  flow-bin                                                 0.97  →          0.121 
>  google-closure-compiler                         ^20200112.0.0  →  ^20200315.0.0 
>  jest                                                  ^24.9.0  →        ^25.2.3 
>  jest-diff                                             ^24.9.0  →        ^25.2.3 
>  minimist                                               ^1.2.0  →         ^1.2.5 
>  mkdirp                                                 ^0.5.1  →         ^1.0.3 
>  pacote                                                ^10.3.0  →        ^11.1.4 
>  prettier                                               1.19.1  →          2.0.2 
>  prop-types                                            ^15.6.2  →        ^15.7.2 
>  rimraf                                                 ^3.0.0  →         ^3.0.2 
>  rollup                                                ^1.19.4  →         ^2.2.0 
>  rollup-plugin-babel                                    ^4.0.1  →         ^4.4.0 
>  rollup-plugin-commonjs                                 ^9.3.4  →        ^10.1.0 
>  rollup-plugin-node-resolve                             ^2.1.1  →         ^5.2.0 
>  rollup-plugin-strip-banner                             ^0.2.0  →         ^2.0.0 
>  semver                                                 ^7.1.1  →         ^7.1.3 
>  typescript                                             ^3.7.5  →         ^3.8.3 
>  webpack                                               ^4.41.2  →        ^4.42.1 
> 
A lot of those are only pathes and minor like babel, but some are major, rollup is a special one in this list but so is jest,eslint-plugin-react,etc.

I'm ready to help in updating those packages if you need so.
",Other
https://github.com/facebook/react/issues/18416,18416,Bug: dragenter on text node contains parent node in event.target in Firefox,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2020-03-28T16:21:05Z,2020-12-25T14:07:22Z,2020-12-25T14:07:22Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

Drag a file over text in Firefox
See this fiddle as example: https://jsfiddle.net/wqcsg2un/2/
![firefox-react-drag](https://user-images.githubusercontent.com/465389/77827796-04172180-7118-11ea-8400-c667b432bebd.gif)

Here is a fiddle showing the behavior without react: https://jsfiddle.net/493wmzvL/2/
![firefox-drag](https://user-images.githubusercontent.com/465389/77827816-18f3b500-7118-11ea-8e16-230d88d422bd.gif)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->


## The current behavior
`event.target` contains the target's parent node instead of the target itself for text nodes

## The expected behavior
`event.target` should contain the target itself even for text nodes",Other
https://github.com/facebook/react/issues/18426,18426,Call all functions twice in StrictMode,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null}]",closed,FALSE,,15,2020-03-29T08:59:55Z,2020-04-27T06:17:35Z,2020-03-29T22:13:47Z,COLLABORATOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.3-16.13

## Steps To Reproduce

1. Render function component with side-effects and without hooks in StrictMode
2. Component only renders once


Link to code example: https://codesandbox.io/s/strictmode-w-and-wo-hooks-vgxvh


## The current behavior

StrictMode only renders function components with hooks twice following https://github.com/facebook/react/issues/15074#issuecomment-471197572


## The expected behavior

I think making [the distinction between components with and without hooks causes more confusion than it helps](https://github.com/mui-org/material-ui/issues/20313). Especially since the docs do not mention this. I amended [past efforts to improve the StrictMode docs](https://github.com/reactjs/reactjs.org/pull/2515) but since this has been ignored I'm not sure this helps. I would also work on making the behavior consistent across all function component types if this is possible.
",Feature
https://github.com/facebook/react/issues/18436,18436,Bug: useEffect returned function fires on didUnmount not willUnmount,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-03-30T21:06:59Z,2020-03-31T15:32:58Z,2020-03-31T01:08:55Z,NONE,completed,,"This bug report relies on the expectation that a function returned in useEffect should fire on willUnmount. This seems to be agreed upon by every post I can find, but doesn't appear to be the behavior I'm experiencing.

React versions from package.json
```
    ""react"": ""^16.12.0"",
    ""react-dom"": ""^16.12.0"",
```
Currently using node 12.15

## Steps To Reproduce

Mount this component, then force it to unmount:

```
function TesterComponent() {
  const ref = createRef();

  useEffect(
    () => {
      console.log('didMount: ', ref)
      return () => console.log('willUnmount: ', ref);
    },
    []
  )

  return (
    <div ref={ref}></div>
  );
}
```

## The current behavior

`ref` will be populated for the first debug, but be null for the second.

ex (Copied from the browser console):
```
didMount:  {current: div}
willUnmount:  {current: null}
```

## The expected behavior

Current should be populated if this is firing on willUnmount rather than didUnmount. So the above output should look like this:
```
didMount:  {current: div}
willUnmount:  {current: div}
```",Support
https://github.com/facebook/react/issues/18474,18474,eliminate non-working right-click item,[],closed,FALSE,,2,2020-04-03T03:49:55Z,2020-04-09T13:53:09Z,2020-04-03T18:58:27Z,NONE,completed,,"WIN10. I installed new version of downloader (FDM Free Download Manager) in firefox 74. It does not work. Using Revo I removed FDM shown in Revo uninstaller. FF still shows the bad item.  I reinstalled previous version FDM (2 years old). Now there are 2 _Download with FDM_ entries. One of them works with the old process. The other (new) fails, offering a Notification (attached). The position of the 2 menu items change within the right-click menu used with link SAVE on a website, usually referring to SAVE a video *.mp4.
![fdm new 2020 error](https://user-images.githubusercontent.com/32346180/78321659-d5d77e80-7529-11ea-8dfa-9edf434ea3dc.jpg)
I spent hours trying to find solution: Editors I can not use due to lack of knowledge: (ShellMenuViewer, ShellExViewer Nirsoft). I created a userChrome.css in the hope it would some how fill with the right-click lines. Restarting  FF74 added nothing to the css .
Mozilla website offers nothing useful, I could not find a way to open a forum ticket. 
I hope to get some help / solution pointers here. Thanks.
",Other
https://github.com/facebook/react/issues/18507,18507,Bug: Unable to import *.png and *.svg in typescript,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-04-06T15:47:03Z,2020-04-06T16:51:57Z,2020-04-06T16:51:57Z,NONE,completed,,"I cannot import asset files (e.g *.png, *.svg) in typescript version of React

React version: React v16.12.0, Typescript
```
import { ReactComponent as Icon } from './assets/SVG/xxx.svg';
import * as Icon from './assets/PNG/xxx.png';
```
## The current behavior
```
[ts] cannot find module './xxx.svg'
[ts] cannot find module './xxx.png'
```

I had to declare the module to get this issue fixed:
```
declare module '*.svg' {
  import React = require('react');
  export const ReactComponent: React.SFC<React.SVGProps<SVGSVGElement>>;
  const src: string;
  export default src;
}
```

Is this issue already fixed in any updated React version or Is there any other way to get it working properly?
",Other
https://github.com/facebook/react/issues/18512,18512,Bug: dev tools development script is running production build,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-04-06T21:01:16Z,2020-04-17T00:39:20Z,2020-04-17T00:39:20Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

**React Dev Tools version**: 4.6.0

I'm not sure there is a problem with `package.json` within`react-devtools-extensions` package, or it's just my misunderstand how it works, but script `build:dev` create production build. 
Command above runs a each script (per browser) in which `NODE_ENV`  is set to `production`.

## Steps To Reproduce

1. Just run `yarn build:dev` in `react-devtools-extensions`
2. It creates minified version of files.


https://github.com/facebook/react/blob/master/packages/react-devtools-extensions/package.json

```javascript 
 ""scripts"": {
    ""build"": ""cross-env NODE_ENV=production yarn run build:chrome && yarn run build:firefox && yarn run build:edge"",
    ""build:dev"": ""cross-env NODE_ENV=development yarn run build:chrome && yarn run build:firefox && yarn run build:edge"",
    ""build:chrome"": ""cross-env NODE_ENV=production node ./chrome/build"",
    ""build:chrome:crx"": ""cross-env NODE_ENV=production node ./chrome/build --crx"",
    ""build:chrome:dev"": ""cross-env NODE_ENV=development node ./chrome/build"",
    ""build:firefox"": ""cross-env NODE_ENV=production node ./firefox/build"",
    ""build:firefox:dev"": ""cross-env NODE_ENV=development node ./firefox/build"",
    ""build:edge"": ""cross-env NODE_ENV=production node ./edge/build"",
    ""build:edge:crx"": ""cross-env NODE_ENV=production node ./edge/build --crx"",
    ""build:edge:dev"": ""cross-env NODE_ENV=development node ./edge/build"",
    ""test:chrome"": ""node ./chrome/test"",
    ""test:firefox"": ""node ./firefox/test"",
    ""test:edge"": ""node ./edge/test""
  },
```

## The current behavior
`""build:dev"": ""cross-env NODE_ENV=development yarn run build:chrome && yarn run build:firefox && yarn run build:edge""` where `build:<browser>` has  `NODE_ENV` set to `production`.

## The expected behavior
Each step in `build:dev` should be replaced from `build:<browser>` to `build:<browser>:dev`


",Bug
https://github.com/facebook/react/issues/18518,18518,Bug: DevTools search filtering removes a space,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-04-07T12:27:24Z,2020-04-07T17:28:22Z,2020-04-07T17:28:22Z,MEMBER,completed,bvaughn,"Compare two screenshots closely. The space after ""from"" disappears when the next word is selected. 
<img width=""574"" alt=""Screenshot 2020-04-07 at 13 26 40"" src=""https://user-images.githubusercontent.com/810438/78668988-7b487480-78d3-11ea-8836-7c75fb907e4f.png"">


<img width=""776"" alt=""Screenshot 2020-04-07 at 13 26 35"" src=""https://user-images.githubusercontent.com/810438/78668983-7a174780-78d3-11ea-967e-31d3f68aef64.png"">
",Bug
https://github.com/facebook/react/issues/18533,18533,[react-hooks/exhaustive-deps] should have special case for props callbacks,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,11,2020-04-07T23:31:41Z,2022-08-23T16:58:07Z,2020-07-27T15:49:05Z,NONE,completed,,"`react-hooks/exhaustive-deps` attempts to be 100% accurate, and flags the following:

```javascript
const c = useCallback((value: number) => {
    props.onChange(value);
}, [props.onChange]);         // <-- ERROR: Should be [props]
```

It helpfully recommends that we should do this:

```javascript
const {
    onChange
} = props;

const c = useCallback((value: number) => {
    onChange(value);
}, [onChange]);
```

Unfortunately, I can't bring myself to actually write my code this way. It adds pointless boilerplate code, makes my IDE ""find usages"" feature on my props send me through another level of indirection i have to follow, and i have this ugly object destructure inside every react component I write only for the callback props that is plain ugly noise.

I've been using this technique lately:

```javascript
useCallback((value: number) => {
    props.onChange.call(null, value);
}, [props.onChange]);        // <-- now the linter is happy!
```

Which is a bit better, but still ugly, and sadly the autocomplete experience for the call arguments is much worse.

I understand that if I were to write something like `car.drive()` then the linter would be correct that I should depend on `car` since `car` is being passed as `this` to drive, and `car` might change.

But ""props"" specifically is different. No matter how hard I try, I cannot think of a legitimate case where someone would set a prop callback such that it is expecting the actual props as the `this` argument. It makes no sense, and all of the official react documentation explain how you should use ""bind"" or whatever so that you have a locked-down `this` (if `this` is even needed at all). And the react team apparently agrees with me here, because this very lint rule suggests to destructure the prop, which would anyway break any such code that expects to have `props` passed back as `this`!

**Recommendation: the lint rule should treat any function call of the form `props.xxx(...)` such that the expected dependency is `props.xxx` (instead of `props`). Just to be clear: this should only be done specifically for `props`, any other ""method"" style function call on an object other than `props` should continue to be linted in the current way.**

Thank you",Support
https://github.com/facebook/react/issues/18570,18570,HTML5 video tag doesn't work properly on iOS,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-04-10T09:47:09Z,2020-04-13T16:16:40Z,2020-04-13T16:16:39Z,NONE,completed,,See all comments here: https://github.com/facebook/react/issues/6544,Other
https://github.com/facebook/react/issues/18606,18606,"Can repro this in browserstack with Pixel XL and default chrome browser, here's a gif of the behavior (notice after I press spacebar the word disappears):","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2020-04-14T14:41:51Z,2020-04-14T15:51:46Z,2020-04-14T15:51:41Z,NONE,completed,,"Can repro this in browserstack with Pixel XL and default chrome browser, here's a gif of the behavior (notice after I press spacebar the word disappears):
![android](https://www.dropbox.com/s/904l9baubex0u0s/android-2.gif?raw=1)

_Originally posted by @icd2k3 in https://github.com/facebook/draft-js/issues/1077#issuecomment-321041952_",Other
https://github.com/facebook/react/issues/18666,18666,Bug: Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-04-18T06:29:16Z,2020-04-18T07:06:57Z,2020-04-18T07:06:57Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: ^16.7.0 && 16.13.1

## Steps To Reproduce

1. Here is the following piece of code in `index.tsx`:

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

// Please ignore type any, I have used it just to avoid confusion with the type of component passed
export const renderRoot = (Root: any) => {
    ReactDOM.render(<Root />,
        document.getElementById('root'),
    );
};
```
2. Now I want to pass a component to render:

```javascript
import renderRoot from '../index';
import React from 'react'

const Home = () => {
    return <div>Hello World</div>
}

renderRoot({
    Root: Home
});
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Please find the sandboxed code here: https://codesandbox.io/s/create-react-app-y9mfn?file=/index.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
",Other
https://github.com/facebook/react/issues/18669,18669,Add More Fuzz Tests,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":1205087127,""node_id"":""MDU6TGFiZWwxMjA1MDg3MTI3"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Features"",""name"":""Component: Concurrent Features"",""color"":""ffccd3"",""default"":false,""description"":""""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,8,2020-04-18T13:11:29Z,2020-08-01T09:10:10Z,2020-08-01T09:10:10Z,MEMBER,completed,,"There’s some things we don’t have a sufficient coverage of. Currently we catch them from production product bugs but this is not sustainable. We’re hoping some refactors will drastically simplify the model — but nevertheless we should invest in better fuzz test coverage. That’s how we caught similar bugs before at an earlier stage.

One thing we’re lacking coverage for is what happens to Suspense boundaries as updates are dispatched at different priorities in different order, and what happens when we’ve had to yield. We need to verify that Suspense always “wakes up” when Promises are resolved and there’s nothing to be suspended on. We also need to test this in combination with render phase updates. 

Here’s examples of bugs that I want a fuzzer to catch: https://github.com/facebook/react/issues/18657 https://github.com/facebook/react/issues/18020 https://github.com/facebook/react/issues/18486 https://github.com/facebook/react/issues/18357 https://github.com/facebook/react/issues/18353 https://github.com/facebook/react/issues/18644 https://github.com/facebook/react/pull/18412. 

@dubzzz I believe you were interested in this? This would take some effort but would be a major contribution. ",Feature
https://github.com/facebook/react/issues/18695,18695,Bug: function component cannot have ref property,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-04-21T21:57:06Z,2020-04-23T11:13:21Z,2020-04-22T16:13:50Z,NONE,completed,,"When passing ref property to a function component, validateFunctionComponentInDev shows a warning about it being a bad thing.

React version: HEAD

While this might have been true for stateless function components (as many places refer to func components), probably since the introduction of hooks, they can have state, and I had the impression that one could rewrite any class component into a function based one.

```
function TestComponent({ref}) {
  const [state] = React.useState({
    stateField1: 42,
  });
  assignRef(ref, state);
  return (
    <div>
      { state.stateField1 }
    </div>
  );
}

This code wont work, caller would never be able to get The Answer. Caller is sad.
```

## The current behavior
React giving a warning and making the ref prop defunct.

## The expected behavior
Remove limitation and let ref on my function component live happily ever after.",Support
https://github.com/facebook/react/issues/18698,18698,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2020-04-22T03:14:35Z,2020-05-05T16:07:29Z,2020-05-05T16:07:29Z,NONE,completed,,"On android using react-devtools we are seeing 2 instances of the app appear.
On iOS we see 1.
We would like to know if this is a known issue with the devtools or if we are infact seeing 2 instances which is much more concerning but at least we will know that somehow it renders to copies on android.

At the moment we're not sure if what we see is real or not.

Android

![image](https://user-images.githubusercontent.com/245933/79936555-f181d500-8496-11ea-99be-e260658bd75f.png)

iOS

![image](https://user-images.githubusercontent.com/245933/79936573-fa72a680-8496-11ea-917a-181de428c60b.png)

React version:

""react"": ""^16.13.0"",
""react-native"": ""0.62.0-rc.5""
react-devtools@4.5.0
react-devtools-core@4.5.0

## Steps To Reproduce

1. run react-devtools and metro with android build

",Support
https://github.com/facebook/react/issues/18700,18700,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-04-22T09:30:06Z,2020-04-22T15:59:30Z,2020-04-22T15:59:30Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/18705,18705,"Bug: React devtools shows ""Unable to find React on the page"" Incorrectly","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,26,2020-04-22T20:24:58Z,2022-04-05T16:25:23Z,2020-04-24T23:25:55Z,NONE,completed,Eddie-CooRo,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0
Devtools version: 4.6.0

## Steps To Reproduce

Don't know.

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
React devtools shows ""Unable to find React on the page"" in the inspector Components pane. The website is a plain CRA app and the devtools is able to detect that the website is using a development build of the react when I click on the devtools icon in the browser extensions bar. I'm able to see the Components when I use devtools on a website other than mine (like reactjs.org). My app is served using the default `react-scripts start` command.
I don't know what exactly is causing the issue but I can share logs or whatever that help to pinpoint the issue as you request.
![Screenshot from 2020-04-23 00-51-25](https://user-images.githubusercontent.com/20463083/80030112-01cc9b00-84fd-11ea-90ac-220e5bb2eed4.png)
",Other
https://github.com/facebook/react/issues/18715,18715,"Bug: when i change the second params of `ReactDOM.createPortal`, the dom destroy and then rebuild.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-04-23T11:53:29Z,2020-04-30T03:21:09Z,2020-04-30T03:21:09Z,NONE,completed,,"ReactDOM version: 16.13.1

## Steps To Reproduce

1. open the console tab of sandbox
2. click the picture
3. click the scaled picture again

Link to code example: https://codesandbox.io/s/muddy-smoke-j8lfy

## The current behavior
when i change the second params of `ReactDOM.createPortal`, the dom was destory and then rebuild.

PS. I inject the function` document.createElement` so we can see the dom rebuilds.

when i toggle the active status of picture, the `document.createElement` was called which means the dom destroy and then rebuild.

## The expected behavior
i expect react-dom will reuse the dom nodes, so that the cost of dom destroy and rebuild can be saved. Also, it is a useful way to reuse cross-layer-dom-node ",Support
https://github.com/facebook/react/issues/18728,18728,Bug: DevTools hihlights false positives,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2020-04-24T19:51:58Z,2020-09-05T20:10:10Z,2020-09-05T20:10:10Z,NONE,completed,,"DevTools version: 4.6.0

## Steps To Reproduce

1. Create wrapping component without dom node
2. Create memoized component with multiple nodes
3. Turn on ""Highlight updates when components render"" in React DevTools
4. Trigger re-render on wrapping component

In profiler is everything recorded correctly, even when there are updates highlighted in page. When is wrapping fragment changed to dom element (e.g. `<div />`), everything works fine.

Link to example: https://5cbq9.codesandbox.io/
Link to code: https://codesandbox.io/s/autumn-wind-5cbq9?file=/src/App.js

## The current behavior
![false-positives](https://user-images.githubusercontent.com/2706990/80251010-26e41980-8675-11ea-8786-d1a1ff183a9f.png)

## The expected behavior
![no-false-positives](https://user-images.githubusercontent.com/2706990/80251024-319eae80-8675-11ea-9a75-490f42afddc0.png)

",Other
https://github.com/facebook/react/issues/18735,18735,Bug: Invariant Violation: Should have a queue when mocking same function differently in tests,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,2,2020-04-25T14:53:18Z,2020-08-01T09:10:12Z,2020-08-01T09:10:12Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.9.0

## Steps To Reproduce

1. Mock the same function that is used by a hook in two different tests

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

I have 2 tests,

It looks like:

```js
    it('calls the BE with the right data when button clicked', done => {
      spy = jest.spyOn(ApiService, 'put');
      ...
      ...
      spy.mockRestore();
      done()
    });

     it('displays success message', done => {
        spy = jest.spyOn(ApiService, 'put').mockResolvedValueOnce(recipe);
        ...
        ...
        spy.mockRestore();
        done();
    });
```

If I write one (`fit`) of either tests it passes, if I let it run both it throws `Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.` The function API.put function is used by a function that is used in a hook.

## The current behavior

React throws `Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.`


",Other
https://github.com/facebook/react/issues/18743,18743,Feature request: a function for conditional rendering ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-04-26T10:30:13Z,2020-05-04T15:51:28Z,2020-05-04T15:51:28Z,NONE,completed,,"Sorry, I didn't find any issue template for feature requests, but I hope it's fine.

The problem I'm trying to solve is to nicely develop components which usually require usage of ternary expressions.

```js
{ifSomething ? (
  <A prop=""foo"">children</A>
) : null}
```

It looks not nice and I have to use a third-party solution to achieve that. For example https://github.com/khmelevskii/babel-plugin-jsx-base-component which allows to turn the code above into:

```js
<Base component={A} exists={ifSomething}>children</Base>
```
But in my opinion usage of third-party solutions isn't an elegant way to solve super common pattern in React.

My proposal is to add a super simple function which conditionally renders components and replaces ternary operator in most cases.

```js
import React, { conditional } from 'react';
...
<div>
  {conditional(ifSomething, (
    <A prop=""foo"">children</A>
  )}
</div>
```
An optional 3rd argument would say what is going to be rendered if a condition is nullish. Obviously, I can implement such function by myself, but it's not any better than a third-party solution. A benefit of having such function in React is that we always use `import React, { something } from 'react'`, so adding `conditional` (or whatever you want to call it) doesn't require any additional imports (I also thought about to call it `ternary` which is what it's going to actually do).",Support
https://github.com/facebook/react/issues/18747,18747,Using the tsconfig file to configure the alias does not take effect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,6,2020-04-26T14:38:10Z,2020-08-16T07:23:52Z,2020-08-16T07:23:52Z,NONE,completed,,"The project was generated using the create-react-app scaffolding, and the paths option was removed when I used the tsconfig.json file to configure the path alias! Then I tried to use the extends property in the tsconfig.json file to connect to the external path configuration file, but it didn't work either! Using the customize-cra plug-in in conjunction with the above configuration file does not take effect. How do I configure it? Why doesn't the scaffolding support?

React version: 16.13.1
react-scripts version: 3.4.1

```
{
  ""extends"": ""./tsconfig.paths.json"", // Subsequent configuration options
  ""compilerOptions"": {
    ""target"": ""es5"",
    ""lib"": [
      ""dom"",
      ""dom.iterable"",
      ""esnext""
    ],
    ""allowJs"": true,
    ""skipLibCheck"": true,
    ""esModuleInterop"": true,
    ""allowSyntheticDefaultImports"": true,
    ""strict"": true,
    ""forceConsistentCasingInFileNames"": true,
    ""module"": ""esnext"",
    ""moduleResolution"": ""node"",
    ""resolveJsonModule"": true,
    ""isolatedModules"": true,
    ""noEmit"": true,
    ""jsx"": ""react""
  },
  ""include"": [
    ""src/**/*""
  ],
  ""exclude"": [
    ""node_modules"",
    ""**/*.spec.ts""
  ]
}
```
The tsconfig.paths. json path file configuration:
```
{
  ""compilerOptions"": {
    ""baseUrl"": ""src"",
    ""paths"": {
      ""@/*"": [""src/*""],
      ""actions/*"": [""src/actions""],
      ""api/*"": [""src/api""],
      ""common/*"": [""src/common""],
      ""components/*"": [""src/components""],
      ""containers/*"": [""src/containers""],
      ""helper/*"": [""src/helper""],
      ""icon/*"": [""src/icon""],
      ""reducers/*"": [""src/reducers""]
    }
  }
}
```
Customize -cra configuration file:
```
const { override, addDecoratorsLegacy, addWebpackAlias } = require(""customize-cra"")
const path = require(""path"")

module.exports = override(
  addDecoratorsLegacy(),
  addWebpackAlias({
      ""@"": path.resolve(__dirname, 'src'),
      ""actions"": path.resolve(__dirname, 'src/actions'),
      ""api"": path.resolve(__dirname, 'src/api'),
      ""common"": path.resolve(__dirname, 'src/common'),
      ""components"": path.resolve(__dirname, 'src/components'),
      ""containers"": path.resolve(__dirname, 'src/containers'),
      ""helper"": path.resolve(__dirname, 'src/helper'),
      ""icon"": path.resolve(__dirname, 'src/icon'),
      ""reducers"": path.resolve(__dirname, 'src/reducers')
  })
)
```
Sample file contents:
`import App from 'components/App'`
Warning message:
```
The following changes are being made to your tsconfig.json file:
  - compilerOptions.paths must not be set (aliased imports are not supported)
```
Error message:
```
./src/index.tsx
Module not found: Can't resolve 'components/App' in 'D:\code\my-music\src'

```
Please help me thank you!",Other
https://github.com/facebook/react/issues/18749,18749,useEffect is never invoked in suspended component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2020-04-26T15:59:07Z,2021-04-10T08:07:33Z,2020-04-26T16:16:03Z,NONE,completed,,"I'm trying to Fetch-On-Render (inside a `useEffect` hook) some data that depends on my component's props.

My component tree is wrapped in a `Suspense` component and the component that fetches data is a couple of levels down the tree.

Because the `useEffect` hook is in a suspended component it never gets invoked.

I'm not sure is this is the expected behaviour or a bug.

## React version:

Experimental:
```
  ""react"": ""0.0.0-experimental-e5d06e34b"",
  ""react-dom"": ""0.0.0-experimental-e5d06e34b"",
```

## Steps To Reproduce

Link to code example:

https://codesandbox.io/s/practical-burnell-75rqm?file=/src/index.js

```javascript
import React, { Suspense, useEffect } from ""react"";
import ReactDOM from ""react-dom"";

class Resource {
  status = ""pending"";
  result = null;
  suspender = new Promise(resolve => {
    this.resolve = resolve;
  });

  read() {
    if (this.status === ""pending"") {
      throw this.suspender;
    } else {
      return this.result;
    }
  }

  load() {
    console.log(""This method is never invoked"");
    this.result = ""Profile loaded"";
    this.status = ""success"";
    this.resolve();
  }
}
const resource = new Resource();

function ProfilePage() {
  return (
    <Suspense fallback={<h1>Loading profile...</h1>}>
      <ProfileDetails />
    </Suspense>
  );
}

function ProfileDetails() {
  useEffect(() => {
    console.log(""This code is never reached"");
    resource.load();
  }, []);

  const user = resource.read();
  return <h1>{user}</h1>;
}

const rootElement = document.getElementById(""root"");
ReactDOM.createRoot(rootElement).render(<ProfilePage />);
```

## The current behavior

The `useEffect` hook in `ProfileDetails` is never invoked and the app stays in a loading state forever.

## The expected behavior

I'd expect the hook to be called and the data to be loaded.

At the moment the only solution is to move all the data fetching logic outside the `Suspense` component, in my example to `ProfilePage`",Support
https://github.com/facebook/react/issues/18775,18775,"Bug: list component when key exists, there will be cache item component","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2020-04-29T02:51:15Z,2020-08-08T07:41:40Z,2020-08-08T07:41:40Z,NONE,completed,,"React version:

```
 ""react"": ""^16.5.2"",
 ""react-dom"": ""^16.5.2"",
 ""mobx"": ""^5.9.0"",
 ""mobx-react"": ""^5.4.3"",
```

## Steps To Reproduce

The premise is as follows:
I use 'mobx' as state control.
I have 2 states, ` mydata = [] `,  `serData = [{XXX}]`, serData.length = 20.
I have a `mode; / / local or dispatch` is used to control the display of `mydata or serdata`

1. Show `mydata`. The page is blank at this time
2. Switch `mode = dispatch`, display`serData`, select the first `item data`
3. At this time, `mydata = [item data]`
4. Switch `mode = local`, show `mydata`
5. At this time, `mydata` shows four pieces of data, three of which are from the `serData` page. I've debugged it. At this time, `mydata = [item data]`, `< item / > render` only executes once, not four times

PS: when I `< item key = """" / >`, the display is normal and there is only one piece of data. `< item key = {item.guid} / >`
And this problem does not necessarily exist. There are many `list components` in my project, only 2 of them have this problem

",Other
https://github.com/facebook/react/issues/18779,18779,Bug: Radio buttons do not get checked with an array of inputs,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-04-29T17:05:15Z,2020-04-30T04:06:59Z,2020-04-30T04:06:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.0

## Steps To Reproduce

1. Example below illustrates the problem.
2. The component `Radio` has an array of objects that are mapped into `<input>`s which can't be selected. The version without the array in `HelloWorld.jsx` works as expected.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://glitch.com/~react-input-radio-bug (click on `Remix` below the rendered example to see the code) (if a link to CodeSandbox is really needed I can create one later, please say so)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The radio buttons do not work or in some cases take two clicks to get marked as checked.

## The expected behavior
It should work as in the version without an array.",Support
https://github.com/facebook/react/issues/18780,18780,"Saving an unrendered functional component to state throws ""Error: Should have a queue"" or ""Rendered more hooks than during the previous render.""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-04-29T17:22:44Z,2020-04-29T17:31:12Z,2020-04-29T17:31:11Z,NONE,completed,,"React version: 16.13.1

## Steps To Reproduce

1. Create a component with hooks. Let's call it `Component` for brevity.
2. Save it to the state on the main functional component without creating it: `setState(Component)`.
Note that it is not `setState(<Component />)`
3. App crashes with either ""Error: Should have a queue."" or ""Rendered more hooks than during the previous render."", depending on the type of hooks 

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/polished-sound-wpc8y

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
App crashes when adding an unrendered component to state. Rendering the component and then adding it to state works fine.

## The expected behavior
Both ways to be accepted as valid.",Support
https://github.com/facebook/react/issues/18791,18791,Bug: render multiple portals to same element additive behavior,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,4,2020-04-30T17:34:30Z,2021-02-24T14:54:44Z,2020-08-08T07:41:39Z,NONE,completed,,"For every use of `ReactDOM.createPortal()` in a unique VDOM position the content is rendered adding to the portal element without clearing it.

React version: 16.12.0

## Steps To Reproduce

1. create a dom element to render a portal into
2. use `ReactDOM.createPortal` more then once from different positions (or component instances) to render to the same element
3. result: each instance adds its content without clearing the element

[Link to code example](https://codesandbox.io/s/sleepy-knuth-jyqzi?file=/src/App.js)

## The current behavior

`ReactDOM.createPortal` appends to the provided element without clearing it.

## The expected behavior

I would expect the `ReactDOM.createPortal` to be similar to `ReactDOM.render` and maybe even provide some warning or error if React is already using the element as a portal target. Or the documentation to indicate this behavior more clearly if this is by design.",Other
https://github.com/facebook/react/issues/18821,18821,Bug: ARIA Attribute Reflection,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,8,2020-05-04T20:43:38Z,2020-08-10T01:29:56Z,2020-08-10T01:29:56Z,NONE,completed,,"React version: 16.13.1

## Steps To Reproduce

1. Implement the [gov.uk ""breadcrumbs"" component](https://design-system.service.gov.uk/components/breadcrumbs/) in React.
2. Use the [ARIA 1.2](https://www.w3.org/TR/wai-aria-1.2/#idl-interface) `ariaCurrent` property, as available in Edge 81, Chrome 81, and Safari 13.
3. See warning:
   ```
   Warning: Invalid ARIA attribute `ariaCurrent`. Did you mean `aria-current`?
   ```

Link to code example: [https://codesandbox.io/s/bold-glitter-lpfpq](https://codesandbox.io/s/bold-glitter-lpfpq?file=/src/App.js)

```jsx
function Breadcrumbs() {
  return (
    <ol>
      <li>
        <a href=""/"">
          Home
        </a>
      </li>
      <li>
        <a href=""/passports"">
          Passports, travel and living abroad
        </a>
      </li>
      <li ariaCurrent=""page"">
        Travel abroad
      </li>
    </ol>
  );
}
```

These properties are helpful reflections that will also be followed by implementations of [`aria*Elements` properties](https://w3c.github.io/aria/#reflection) which would eliminate the need for an `id` by every reference. This is _not_ a bug report on the support of those properties, but they are mentioned to present the higher value these properties will have over dash-less shorthands. I would (naively) expect these (more simple) reflections to worthy of support on their own merits of being implemented web standards.

## The current behavior

The `ariaCurrent` property is not applied, an `ariacurrent` attribute is applied, and a warning is displayed in development.

 ```
 Warning: Invalid ARIA attribute `ariaCurrent`. Did you mean `aria-current`?
 ```

## The expected behavior

The `ariaCurrent` property is applied.",Other
https://github.com/facebook/react/issues/18831,18831,"Error: ""Commit tree does not contain fiber 256. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,21,2020-05-05T18:01:22Z,2020-07-15T17:16:43Z,2020-07-15T16:25:28Z,NONE,completed,bvaughn,"Describe what you were doing when the bug occurred:
1. Profiling a slow component
In a component that rendered 5000 pre tags with single lines of text in them, that has an unrelated controlled text box is the same component that was typed into while profiling. App hung a while and, when it rendered again the error was in the profiler.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.6.0-6cceaeb67

Call stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162825)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161628)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164582)
    at ec (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:339280)
    at ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:59620)
    at Ll (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:109960)
    at qc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102381)
    at Hc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102306)
    at Vc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102171)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:98781)

Component stack: in ec
    in div
    in div
    in div
    in So
    in Unknown
    in n
    in Unknown
    in div
    in div
    in rl
    in Ze
    in fn
    in Ga
    in _s",Bug
https://github.com/facebook/react/issues/18839,18839,Inhancement: Dispatch (returned by useReducer) shuould also be available as third parameter in reducer function.,[],closed,FALSE,,3,2020-05-06T07:05:37Z,2020-05-07T11:56:40Z,2020-05-07T11:56:39Z,NONE,completed,,"React version: @latest

**I am using Context API to manage state of my application, and stuck at below problem.**

## The current behavior
Currently, reducer function takes just **state** and **action** as parameter. I can dispatch actions from components only, due the behavior of hooks (as you know). But what if I there is some dependent action (**Y**) on action (**X**) which needs to be called after completion of action (**X**). Currently there is no way to handle this kind of scenario. 

## The expected behavior
If there had been **dispatch** function as third parameter, passed internally and automatically to the reducer function, we could have solved above problem. 

Currently I have to pass **dispatch** as part of action payload, which does not look right and clean.

This will help developers to write clean code, and all the logic related to dependent actions can be moved inside reducer function from components.

## Example

```javascript
const reducer = (state, action, dispatch) => {
  switch (action.type) {
    case 'LOGIN':
      // Do LOGIN related stuff here
      dispatch({ type: 'LOGIN_SUCCESS' });
      return { ...state };
    case 'LOGIN_SUCCESS':
      // Do LOGIN_SUCCESS related stuff here
      return { ...state };
    default:
      return state;
  }
};
```",Support
https://github.com/facebook/react/issues/18846,18846,Bug: StrictMode makes Component render repeatedly?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-05-06T17:50:14Z,2020-05-06T17:54:05Z,2020-05-06T17:53:55Z,NONE,completed,,"React version:
react: 16.13.1
react-dom: 16.13.1
## Steps To Reproduce

1. Observe the value printed in the console

Link to code example:
https://codesandbox.io/s/react-test-usestate-xvuxs?file=/src/App.js

## The current behavior
### normal conditions:
```
function Test() {
  const [test] = ['testStr'];
  console.log(""render Test"");
  return <p>{test}</p>
}

class Foo extends React.Component{
  render(){
    console.log('Foo')
    return <p>Foo</p>
  }
}

export default function App() {
  return (
    <div className=""App"">
      <Test />
      <Foo />
    </div>
  );
}
```

**console print:**
```
render Test 
render Foo 
```
### Situation 1 : use StrictMode

```diff
ReactDOM.render(
+  <React.StrictMode>
    <App />
+  </React.StrictMode>
  ,rootElement
);
```
**console print:**
```
render Test 
render Foo 
render Foo 
```
### Situation 2 : use StrictMode and useState
```diff
function Test() {
+  const [test] = useState(""testStr"");
-  const [test] = ['testStr'];
  console.log(""render Test"");
  return <p>{test}</p>
}
```

**console print:**
```
render Test 
render Test 
render Foo 
render Foo 
```

## The expected behavior
No extra rendering",Other
https://github.com/facebook/react/issues/18848,18848,Bug: useLayoutEffect callback called twice when a dom node is in a dependency array,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,10,2020-05-06T19:43:49Z,2020-05-07T11:59:24Z,2020-05-06T20:48:04Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: v16.3.1

## Steps To Reproduce

1. add `useLayoutEffect`
2. add dom node to the deps array
3. invoke setState inside useLayoutEffect callback

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codepen.io/everdimension/pen/rNOpZGK

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
`useLayoutEffect` callback gets called a second time, although the values in the deps array have not changed

## The expected behavior
`useLayoutEffect` callback should not get called unless values in the dependency array change",Support
https://github.com/facebook/react/issues/18853,18853,Bug: Devtools conceal lack of setImmediate polyfill,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-05-07T03:38:24Z,2020-05-07T22:36:50Z,2020-05-07T22:36:50Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: N/A; sample app uses 16.13.1
Devtools version: 6cceaeb67 on FF and Chrome

## Steps To Reproduce

Generally speaking:
1. Call `setImmediate` in a react app without a polyfill after react devtools have initialized.

To demonstrate in the sample app:
1. Open sample app with browser devtools closed.
2. Click button and observe that `setImmediate` is not defined initially or after mounting react.
3. Open browser devtools to allow react devtools extension to initialize.
4. Click button and observe that `setImmediate` has been defined.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

I couldn't figure out how to prevent polyfills from being included on CodeSandbox.
[js bin editor](https://jsbin.com/rixunedepi/1/edit?html)
[repro page](https://output.jsbin.com/rixunedepi/1)
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
React devtools globally defines a polyfill for `setImmediate`, masking the problem.

## The expected behavior
Usage of `setImmediate` without a polyfill in an app will throw an error.",Bug
https://github.com/facebook/react/issues/18871,18871,The pacote dependency should be re-evaluated,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-05-09T00:44:01Z,2020-05-09T19:12:30Z,2020-05-09T16:26:59Z,NONE,completed,,"The React repository depends on [pacote](https://www.npmjs.com/package/pacote), a JavaScript Package Handler that has ~2M weekly downloads and only 8 peoples watching the [project on GitHub](https://github.com/npm/pacote), now there are 9.

This looks like a recipe for a left-pad scale disaster. I would like to to invite some of the React contributors to start watching this project and maybe evaluate if it's really needed.",Other
https://github.com/facebook/react/issues/18877,18877,"Error: ""Commit tree already contains fiber 10819. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-05-09T12:57:43Z,2021-04-28T20:30:46Z,2020-05-11T23:31:38Z,NONE,completed,,"Describe what you were doing when the bug occurred:
simple running profiler and popout this error

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.6.0-6cceaeb67

Call stack: at j (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:162221)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161772)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)
    at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:161696)

Component stack: in ec
    in div
    in div
    in div
    in So
    in Unknown
    in n
    in Unknown
    in div
    in div
    in rl
    in Ze
    in fn
    in Ga
    in _s",Other
https://github.com/facebook/react/issues/18883,18883,Feature proposal(eslint-react-hooks): Recursive dependencies scanning for exhaustive-deps,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,5,2020-05-10T17:37:06Z,2022-05-17T18:10:32Z,2022-05-17T18:10:25Z,NONE,completed,,"## Context

After reading https://github.com/facebook/react/issues/14920 (not 100% of it, I admit), I decided to refactor my codebase in order to be more resilient against potential mistakes.  
During this conversion, I converted a ton of callbacks to `useCallback` and made extensive use of the array dependencies for `useCallback` and `useEffect` everywhere.  
However, I often stumbled upon the following pattern:

```js
const myCallback = useCallback(() => {
  // Do something with value.
}, [value]);

const myOtherCallback = useCallback(() => {
  const result = myCallback();

  // Do something with BOTH value and result.
}, [value, myCallback ]);

useEffect(() => {
  // Do something with myCallback, myOtherCallback and value, independently.
}, [value, myCallback, myOtherCallback ])
```

[Basic CodeSandBox with this example](https://codesandbox.io/s/goofy-thunder-2y4s9)

For the sake of argument, let's say that this code can't ""move"" callbacks around: I can't declare `myCallback` and/or `myOtherCallback` because they are used below in the main scope.

## Problem

With the above example, we can conclude the following statements:
- `myCallback` will change if `value` changes
- `myOtherCallback` will change if `value` or `myCallback` changes
- The `useEffect` will rerun if `myCallback`, `value` or `myOtherCallback` changes

We can instantly notice there is a lot of redundancy right there:

If `value` changes, `myCallback` will change so I only need to specify `myCallback` as a dependency for `myOtherCallback` even though I also use `value` directly.  
The same reasoning can be applied to the dependencies of `useEffect`.

As a human, I could omit `value` from the dependencies of `myOtherCallback` and be 100% absolutely guaranteed that the behavior would be strictly identical as per the hooks very own specifications.  
But if I do so, the `react-hooks/exhaustive-deps` eslint rule will complain that I'm missing some dependencies from the array.

## Proposal

If I understood properly, the rule does some kind of dependency traversal in order to attempt to recognize infinite loops.  
I think it would be nice for it to also be able to detect this kind of dependency redundancies.  
Even better, it should be able to take it into account when suggesting changes/reporting errors.  

## Benefits

From reading the [issue](https://github.com/facebook/react/issues/14920) I mentionned at the top of this post, there is a fair amout of people who are not happy with the clutter the rule forces us to have in the codebase.  
Myself, I'm fairly hesitant and sometimes find myself thinking ""I shouldn't need to specify this dep"".  
Implementing the proposal mentionned above would be extremely beneficial regarding the readability of the code by totally preventing redundancy of dependencies.

## Drawbacks

I can see two potential issues with this proposal:

#### Performance impact

Requiring the rule to recursively assess dependencies may have a performance impact on the linting.  

I'm not sure if this is the case since the rule does a similar check to try to avoid infinite loop. (Maybe I'm wrong and it's not the same thing).  
If this is too much of an impact, I think it could be opt-in behind a config flag.  
This would allow people to decide for themselves if the impact is worth it.

#### Less obvious dependencies

Not explicitely specifying every used dependency may make it harder to assess the real update impact.  
From the above example, I know that my `useEffect` depends on `value`. If it weren't there, I would have to mentally climb up the dependencies myself.  

I think this is a fake drawback since I always need to climb up the dependencies tree to REALLY know what could cause my effect (or other) to be triggered.  
I would even argue that this proposal makes this mental parsing easier because I don't have any redundancy when reading the dependencies: every variable I see in a dependency array is specified exactly once. (Well, there may be exceptions when it comes to diverging dependencies but it's even more of an improvement in such a situation.)

## Conclusion

This proposal seems to be entirely positive from my point of view. The drawbacks are quite small and an opt-in design may make them even more manageable.",Other
https://github.com/facebook/react/issues/18896,18896,The DOM element that ref refers to is missing,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-05-12T14:54:27Z,2020-05-12T17:42:25Z,2020-05-12T17:41:52Z,NONE,completed,,"I used useRef in the function component to refer to an audio element. When I clicked the content of the song, I sent some actions to Redux. Then the console reported an error and could not call the play and other methods of audio element. When I tried the ref callback to get audio element, according to the official document, the ref will be cleared every time it is updated, so this method still doesn't work. Could you please tell me how to solve the problem that the ref point element is missing?

React version: 16.13.1

## Steps To Reproduce

1. When you click on the song, it should start playing, but the DOM element that ref points to is null
2. The result is ""Cannot read property 'play' of null""

Main core code examples:
```js
let audioRef: React.RefObject<HTMLAudioElement> = createRef();
const setFullScreen = useCallback(() => updateFullScreenState(!fullScreen), [
  fullScreen,
]);
const songFadeInAndOutPlay = useMemo(
  () => new SongFadeInAndOutPlay(audioRef!.current!),
  []
);
const playControls = useCallback(
  (e: React.SyntheticEvent) => {
    if (!state) return;
    e.stopPropagation();
    if (playing) {
      songFadeInAndOutPlay.songFadeOutPause();
      audioRef!.current!.pause();
    } else {
      audioRef!.current!.play();
      songFadeInAndOutPlay.songFadeInPlay();
    }
    setState(false);
    updatePlayingState(!playing);
  },
  [playing, state]
);

const startPlay = useCallback(() => {
  const songFadeInAndOutPlay = new SongFadeInAndOutPlay(audioRef!.current!);
  audioRef!.current!.play();
  songFadeInAndOutPlay.songFadeInPlay();
  setState(true);
}, [state]);
```
Props received from Redux:
`export default function Player({ fullScreen, playing, currentSong, updateFullScreenState, updatePlayingState }: PlayerProps)`

Link to code example:
[https://github.com/VitaminCtea/reactBugImage/blob/master/reactReportImage.gif](errorImage)

## The current behavior
The ref points to the DOM element missing, and Redux dispatches the event as normal

## The expected behavior
The DOM element that the ref points to is not lost
**How can I solve the problem I am facing? Am I doing this correctly?**
supplementary instruction:

> These useCallbaxk functions cannot be broken down into the useEffect hook because you are listening for props from Redux, so even if the useEffect hook is listening for props, the supplied props value will not be updated! The use of ref callbacks will also lose the reference to the element!",Support
https://github.com/facebook/react/issues/18935,18935,DevTools: Uncaught error doesn't go away on page refresh,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-05-16T06:51:01Z,2020-05-21T18:21:23Z,2020-05-21T18:21:23Z,COLLABORATOR,completed,,"1. Wait for devtools to hit an error (eg: #18934).
2. Reload the page.

Expected: Devtools reinitializes cleanly.
Actual: Error is still there. Need to hide devtools, reload _again_, then show devtools to get it to behave.

DevTools version: 4.6.0-6cceaeb67

",Bug
https://github.com/facebook/react/issues/18938,18938,Feature proposal: let class component setState second param callback always give the latest state,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-05-16T12:25:52Z,2020-05-21T10:15:54Z,2020-05-17T05:18:56Z,NONE,completed,,"## Context
I know setState first param can be a updater
```
(state, props)=> stateChanged;
```
but why not the second callback param can not supply the latest state in its param list.
```
this.setState({msg:'new msg'}, (newState)=>{
    console.log(newState);// let user no need to write this.state here
})
```

[Link to code example](https://codesandbox.io/s/winter-monad-9wbu8?file=/src/App.js:51-410):

```js
class Test extends React.Component{
  state = {msg:'msg'}
  changeMsg = ()=>{
    this.setState({msg:Date.now()}, (newState)=>{
      console.log(newState);// undefined
      console.log(this.state);// latest state
    });
  }
  render(){
    const msg = this.state.msg;
    return (
      <div>{msg} <input value={msg} onChange={this.changeMsg} /></div>
    );
  }
}
```

## The current behavior
the newState is undefined

## The expected behavior
the newState is the latest state
",Support
https://github.com/facebook/react/issues/18971,18971,Bug: Typing Fast into Controlled Input doesn't change value visually immediately,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,8,2020-05-21T14:17:47Z,2020-05-22T09:04:37Z,2020-05-22T09:04:37Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

I have a controlled input and when I type slowly, it updates the state and shows the current input value. However, when I start typing fast, I can see the input value updating in the DOM in the developer tools but the input becomes empty visually until I stop typing and then I can see the updated value visually too.

I have provided a gif where I start typing fast and you can see the value changing in the developer tools at the bottom of the screen but the input becomes blank when typing fast till I stop.

![bug](https://user-images.githubusercontent.com/53095479/82567798-8d7e2980-9b86-11ea-92b1-448872ac8777.gif)


React version: 16.13.1

## Steps To Reproduce

1. Create a control input
2. Start typing very fast

## The current behavior
When typing fast into a controlled input, the value of the input in the dev tools updated but the input becomes visually empty until I stop

## The expected behavior
When typing fast into a controlled input, the input should update visually.",Support
https://github.com/facebook/react/issues/18983,18983,Bug: eslint hooks plugin TypeScript optional chaining with exhaustive-deps,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-05-22T20:10:00Z,2021-11-30T09:45:55Z,2020-05-23T21:52:27Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: `16.13.0`
eslint-plugin-react-hooks version: `4.0.2`

When I upgraded from `^2.0.0` to `4.0.2`, this bug started happening:

## Steps To Reproduce

When you optionally chain, there is a bug with `exhaustive-deps`:

1. With no optional chaining, there is no issue
<img width=""463"" alt=""Screen Shot 2020-05-22 at 12 48 55 PM"" src=""https://user-images.githubusercontent.com/24969218/82704534-9aecef80-9c2a-11ea-8eb9-b312b7cb951a.png"">

2. With optional chaining, we see an eslint error
<img width=""462"" alt=""Screen Shot 2020-05-22 at 12 50 12 PM"" src=""https://user-images.githubusercontent.com/24969218/82704613-c8399d80-9c2a-11ea-91d0-b4f361114852.png"">

The error is 
```
React Hook useEffect has a missing dependency: 'test?.includes'. Either include it or remove the dependency array. eslint(react-hooks/exhaustive-deps)
```

Which auto fixes to:
<img width=""465"" alt=""Screen Shot 2020-05-22 at 12 52 25 PM"" src=""https://user-images.githubusercontent.com/24969218/82704749-19499180-9c2b-11ea-9b5b-c539ac7beb45.png"">

(in addition to being incorrect, this causes issues with the eslint `eslint@typescript-eslint/unbound-method` rule)",Other
https://github.com/facebook/react/issues/18989,18989,Feature suggestion: Add React.static() to complement React.memo(),[],closed,FALSE,,3,2020-05-23T17:36:52Z,2020-05-26T18:01:12Z,2020-05-26T18:01:12Z,NONE,completed,,"I like the new functional components and hooks paradigm, because of its cleaner code. However, one thing that can only be achieved with classes still is this:

```
class Foo extends React.Component {
   shouldComponentUpdate() {
      return false;
   }
  render() {...}
}
```

This provided a significant speed up in my app, used appropriately, even better than React.memo() with functional components.

Could something similar be offered for functional components, possibly a method like `React.static()`? ",Support
https://github.com/facebook/react/issues/18997,18997,Bug: Autofocus prop does not work,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-05-25T13:29:39Z,2020-05-26T18:05:55Z,2020-05-26T18:05:54Z,NONE,completed,,"<!--
 I am using an input element with autoFocus={true}. The issue is that the input element is not focused on first time but after that each time I navigate to the screen it is auto focused.

This issue is faced when the react web app is opened from a React native Webview (iOS).

Tried different solutions nothing works.
-->


React version: 16.12

## Steps To Reproduce

1. Use this code in a sample project.
2. Open the link from React Native Webview.

Link to code example:

```js
const InputField = ({
  onPaste,
  disableAddbtn,
  handleOnChange,
  refElem,
  value,
  onFocus,
  onBlur,
  handleAddListItem,
}) => {
  const callbackRef = React.useCallback((inputElement) => {
    if (inputElement) {
      inputElement.focus();
    }
  }, []);
  return (
    <div className=""search-box"">
      <div className=""form-item"">
        <form onSubmit={handleAddListItem}>
          <input
            onFocus={onFocus}
            onBlur={onBlur}
            autoFocus={true}
            onPaste={(e) => onPaste(e)}
            onChange={(e) => handleOnChange(e)}
            type=""text""
            maxLength={100}
            value={value}
            ref={callbackRef}
            className=""form-control has-right-button""
          />
          <input
            type=""submit""
            disabled={disableAddbtn}
            className=""btn-label""
            value={en.ADD}
          />
        </form>
      </div>
    </div>
  );
};

export default InputField;
```

## The current behavior
Doesn't autofocus on first navigation only

## The expected behavior
Should auto focus on navigation",Other
https://github.com/facebook/react/issues/19001,19001,Bug: Cannot use **use...Effect** names for custom hooks definition,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-05-26T06:27:42Z,2020-05-26T15:12:00Z,2020-05-26T15:12:00Z,NONE,completed,,"I had following code:

```ts
export const useSummaryHeaderActionsEffect = (): void => {
    const dispatch = useDispatch();

    useEffect(() => {
        dispatch(fetchAction);
    }, [dispatch]);
};
```

which is called in component like:

```ts
export const SummaryHeader: FC = () => {
    useSummaryHeaderActionsEffect();
    ...
}
```

and I kept receiving this error on lint (some content anonymised):

```
TypeError: Cannot read property 'type' of undefined
Occurred while linting ...SummaryHeader.tsx:9
    at visitCallExpression (node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:823:24)
    at node_modules/eslint/lib/linter/safe-emitter.js:45:58
    at Array.forEach (<anonymous>)
    at Object.emit (node_modules/eslint/lib/linter/safe-emitter.js:45:38)
    at NodeEventGenerator.applySelector (node_modules/eslint/lib/linter/node-event-generator.js:254:26)
    at NodeEventGenerator.applySelectors (node_modules/eslint/lib/linter/node-event-generator.js:283:22)
    at NodeEventGenerator.enterNode (node_modules/eslint/lib/linter/node-event-generator.js:297:14)
    at CodePathAnalyzer.enterNode (node_modules/eslint/lib/linter/code-path-analysis/code-path-analyzer.js:634:23)
    at node_modules/eslint/lib/linter/linter.js:936:32
    at Array.forEach (<anonymous>)
    at runRules (node_modules/eslint/lib/linter/linter.js:931:15)
    at Linter._verifyWithoutProcessors (node_modules/eslint/lib/linter/linter.js:1157:31)
    at Linter._verifyWithConfigArray (node_modules/eslint/lib/linter/linter.js:1255:21)
    at Linter.verify (node_modules/eslint/lib/linter/linter.js:1210:25)
    at Linter.verifyAndFix (node_modules/eslint/lib/linter/linter.js:1400:29)
    at verifyText (node_modules/eslint/lib/cli-engine/cli-engine.js:230:48)
    at CLIEngine.executeOnFiles (node_modules/eslint/lib/cli-engine/cli-engine.js:798:28)
    at Object.execute (node_modules/eslint/lib/cli.js:212:111)
    at Object.<anonymous> (node_modules/eslint/bin/eslint.js:107:28)
    .
    .
    .
{
  killed: false,
  code: 2,
  signal: null,
  cmd: 'eslint --quiet SummaryHeader.tsx'
}
```

until I changed the name of my custom hook from `useSummaryHeaderActionsEffect` to `useSummaryHeaderActionsOnMount`.

So obviously name pattern **use...Effect** got the fella confused when doing his job.

It doesn't seem to be a behaviour by design, otherwise I'd expect proper ESLint hint saying I'm using not-allowed name pattern.

React version: 
""react"": ""16.13.1"", 
""@typescript-eslint/eslint-plugin"": ""2.26.0"", 
""eslint-plugin-react-hooks"": ""4.0.0"",
""eslint"": ""6.8.0"",

## The current behavior

Cannot use name pattern **use...Effect** for custom hooks.

## The expected behavior

It's possible to use name pattern **use...Effect** for custom hooks or `eslint-plugin-react-hooks` warns you it is not desired.",Bug
https://github.com/facebook/react/issues/19006,19006,Bug: ReactPartialRenderer function createOpenTagMarkup calls isCustomComponent for every property unnecessarily,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-05-26T15:59:18Z,2020-05-26T20:41:34Z,2020-05-26T20:41:34Z,NONE,completed,bvaughn,This is a performance issue. Function isCustomComponent is called multiple times for each property of the same component inside of createOpenTagMarkup function (ReactPartialRenderer.js).,Bug
https://github.com/facebook/react/issues/19015,19015,export default Form.create()(connect(mapStateToProps)(CommonLog));,[],closed,FALSE,,6,2020-05-27T07:47:37Z,2021-09-14T15:22:31Z,2020-05-27T16:15:48Z,NONE,completed,,"`export default Form.create()(connect(mapStateToProps)(CommonLog));`

```
function mapStateToProps(state) {
    return {
        user: state.user
    }
}

export default Form.create()(connect(mapStateToProps)(FailCMD));
```

Before，our project has some codes like this. But now, antd as 3.x to 4.2.5, how to change the code ?",Other
https://github.com/facebook/react/issues/19043,19043,Bug: eslint-plugin-react-hooks:  Cannot read property 'references' of undefined,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,12,2020-05-29T15:15:49Z,2020-07-01T13:21:11Z,2020-07-01T13:21:11Z,NONE,completed,Xiot,"eslint-plugin-react-hooks is throwing a `Cannot read property 'references' of undefined` error on `/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1683:23`

I added a console log statement before that line
```
var usedDep = dependencies.get(missingDep);
          console.log('usedDep', usedDep, missingDep, dependencies)
          if (usedDep.references[0].resolved !== topScopeRef) {   // error is thrown here
```
and this is the output.
```
usedDep undefined program?.slug Map {
  'program?.uuid' => { isStatic: false, references: [ [Reference] ] },
  'monitorService' => { isStatic: false, references: [ [Reference] ] },
  'navigate' => { isStatic: false, references: [ [Reference] ] },
  'program.slug' => { isStatic: false, references: [ [Reference] ] } }
```

I don't actually have `program?.slug` referenced anywhere in this file. 
I am using `program.slug` though.

Versions:
eslint-plugin-react-hooks@4.0.4
eslint@6.8.0
babel-eslint@10.1.0

## Steps To Reproduce
The code below throws the error.
I have found 2 ways to stop the error from happening.
1. Removing the line ` programUuid: program?.uuid ?? '', `
2. adding `program.slug` to the list of dependencies.

Link to code example:
```
const onSave = useCallback(
    args => {
      const request: CreateMonitorV3Request = {
        programUuid: program?.uuid ?? '',        
      };

      monitorService
        .create(request)
        .then(x => {
          // $FlowFixMe - program will be available
          navigate(`/programs/${program.slug}/monitors/${x.uuid}`);
        })
        .catch(ex => {
          console.log('error', ex);
        });
    },
    [monitorService, program?.uuid]
  );
```

## The current behavior
Error is thrown `Cannot read property 'references' of undefined`

## The expected behavior
eslint successfully reports that I'm missing dependencies in `useCallback`


Full Stack trace:
```
TypeError: Cannot read property 'references' of undefined
Occurred while linting /project-root/src/pages/monitor/configuration-pages/new-monitor-page.js:26
    at /project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1683:23
    at Set.forEach (<anonymous>)
    at visitFunctionWithDependencies (/project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1674:29)
    at visitCallExpression (/project-root/node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:826:11)
    at listeners.(anonymous function).forEach.listener (/project-root/node_modules/eslint/lib/linter/safe-emitter.js:45:58)
    at Array.forEach (<anonymous>)
    at Object.emit (/project-root/node_modules/eslint/lib/linter/safe-emitter.js:45:38)
    at NodeEventGenerator.applySelector (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:254:26)
    at NodeEventGenerator.applySelectors (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:283:22)
    at NodeEventGenerator.enterNode (/project-root/node_modules/eslint/lib/linter/node-event-generator.js:297:14)
```",Bug
https://github.com/facebook/react/issues/19057,19057,"Like @hugo , I encountered this when testing [a new Ionic application](https://ionicframework.com/docs/react):","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-06-01T12:24:49Z,2020-06-02T15:44:05Z,2020-06-02T15:44:05Z,NONE,completed,AlbertGaocong,"When i implementer slidemenu, i also encountered this problem ",Other
https://github.com/facebook/react/issues/19070,19070,"Bug: ""Cannot update a component [...] while rendering a different component"" breaks parent-configuration component usecase","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-06-04T01:40:11Z,2020-06-30T15:56:39Z,2020-06-30T15:56:39Z,NONE,completed,,"In some component library designs, it can be useful to provide the user with certain ""meta-components"" that they can use to configure an ancestor component that their content gets wrapped in.

For example, in a system where a user can specify a ""View"" that gets rendered into a panel/window/etc., and the title needs to be part of the View component __but gets rendered in a separate place in the actual UI, away from the actual view content__, it can be useful to specify this information through a component that doesn't actually render anything, like so:

```jsx
function SomeView() {
	return (<>
		<PanelTitle>Hello world!</PanelTitle>
		<p>Some text goes here.</p>
		<p>More text goes here.</p>
	</>);
}

function App() {
	return (
		<Panel view={SomeView} />
	);
}
```

Here, `PanelTitle` and `Panel` are both provided by a hypothetical library, and their implementation is opaque to the user. `Panel` does nothing other than call out to a `setTitle` method defined in the `Panel` component, so that the `Panel` can be re-rendered with the correct title. A link to a repository with a full runnable version of this example is included below.

This is roughly analogous to 'slots' in a templater, like the [`block` syntax in Pug](https://pugjs.org/language/inheritance.html) but with each pre-defined block being represented by its own meta-configuration-component (only `PanelTitle` in this specific example).

While this works fine from a technical perspective, in recent React versions it has been starting to produce a ""Cannot update a component [...] while rendering a different component"" error. The [changelog entry for this change](https://reactjs.org/blog/2020/02/26/react-v16.13.0.html#warnings-for-some-updates-during-render) speaks of using `useEffect` as a workaround for this (although it doesn't actually go into enough detail to understand what is meant with that...), but comments in #18178 allude to this pattern being entirely unsupported in the future.

Notably, __these meta-elements do not actually ever render any content.__ They are merely syntactic wrappers that expose an internal `set*` function as a JSX component. Any content rendering would occur in either the call site of the meta-element, or the internal implementation of the parent component whose state is being configured.

An alternative API design approach is to require a `View` in this case to be specified like so:

```jsx
function SomeView() {
	return (
		<View title=""Hello world!"">
			<p>Some text goes here.</p>
			<p>More text goes here.</p>
		</View>
	);
}
```

... however, especially when the slot content gets complex and there are multiple slots, this approach can become unwieldy to read in some cases. This applies doubly so when *multiple* meta-elements need to be specified, like the following for a hypothetical cookie storage system:

```.jsx
function SomeView() {
	return (<>
		<Cookie key=""foo"" value=""Bar"" />
		<Cookie key=""baz"" value=""qux"" expiry=""30m"" />
		
		<p>Some text goes here.</p>
		<p>More text goes here.</p>
	</>);
}
```

... which would, *at best*, end up looking like this:

```jsx
function SomeView() {
	return (
		<View cookies={[
			{ key: ""foo"", value: ""bar"" },
			{ key: ""baz"", value: ""qux"", expiry: ""30m"" }
		]}>
			<p>Some text goes here.</p>
			<p>More text goes here.</p>
		</View>
	);
}
```

Hence filing this bug. Is this a pattern that React intends to support going forward, or are we stuck with the alternative ""handle it all as properties of a wrapper element"" approach mentioned above?

React version: 16.13.1

## Steps To Reproduce

1. Attempt to use an ""empty"" meta-component to configure something in a parent, through a `set*` call
2. Be faced with ""Cannot update a component [...] while rendering a different component""

Link to code example:

https://git.cryto.net/joepie91/bugcase-react-parent-configuration is a reduced testcase for this issue. After installing dependencies, `yarn dev` / `npm run dev` will spin up a local development server that demonstrates the problem.

## The current behavior

Produces an error:

```
Warning: Cannot update a component (`Panel`) while rendering a different component (`PanelTitle`). To locate the bad setState() call inside `PanelTitle`, follow the stack trace as described in https://fb.me/setstate-in-render
    in PanelTitle (created by SomeView)
    in SomeView (created by Panel)
    in div (created by Panel)
    in Panel (created by App)
    in App
```

## The expected behavior

Should not produce an error, and work as expected.",Support
https://github.com/facebook/react/issues/19082,19082,testing,[],closed,FALSE,,0,2020-06-05T20:13:37Z,2020-06-05T23:04:28Z,2020-06-05T23:04:28Z,NONE,completed,,This is a test issue,Other
https://github.com/facebook/react/issues/19087,19087,testing,[],closed,FALSE,,0,2020-06-06T15:46:03Z,2020-06-06T16:38:42Z,2020-06-06T16:38:42Z,NONE,completed,,This is a test issue,Other
https://github.com/facebook/react/issues/19105,19105,Bug: Incorrect HTML attribute name for custom tags,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-06-09T13:01:46Z,2020-06-10T05:18:33Z,2020-06-10T05:18:33Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

Hello developers,

## Steps To Reproduce

1. Use `React.createElement` to create a custom tag, e.g. `mjx-container`, `mjx-i` (these are tags used by mathjax), and set its `className`. For example, `React.createElement('mjx-container',  { className: 'Mathjax' }, 'Hello')`
2. Checkout the dev tools, and you can see that we have got `<mjx-container classname=""Mathjax"">Hello</mjx-container>`. However, I expected to have `class`, but not `classname`. Since `className` attribute makes sense only in React JSX, but not in HTML and CSS.

![image](https://user-images.githubusercontent.com/25521218/84149661-66cf5680-aa93-11ea-8247-da9ddf5f6c6c.png)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codepen.io/Margatroid/pen/KKVdYdd

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

I expect to get `<mjx-container class=""Mathjax"">Hello</mjx-container>`

## The expected behavior

But I have got `<mjx-container classname=""Mathjax"">Hello</mjx-container>`

I've encountered this issue when trying to use gatsby, mdx, and Mathjax to render equations service-side. My current workaround is replacing `className`s to `class`es for mathjax related tags.

Thank you for your time!",Support
https://github.com/facebook/react/issues/19119,19119,Loading chunk 0 failed when change hash route parameter,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-06-11T21:29:03Z,2020-06-12T14:32:56Z,2020-06-11T23:26:09Z,NONE,completed,,"I have done a lot of search on line (here and stackoverflow) and it looks none can help or indicate the cause and it has bothered me for couple of months without any solution.

It would be great to get  help from REACT expert.

Here is some introduction about our application
1. It is a WPF/Cocoa application running for Windows/Mac OS X. It embeds a CEF browser in the WPF/NSWindow and load the pages directly from its installation folder, i.e., a local disk.
2. The UI  is a REACT single page application so it is the exactly same version of npm package consumed by Windows and Mac OS.
3. It uses WebPack 4.20.* build and it splits code, the configuration is quite standard from my understanding.
4. It uses REACT's lazy load to load different components according to the router path.
5. It uses hash router.
6. All js files has a meaningful chunk name and hash value in the bundle.
7. The Chromium version is same for Win and Mac. The  Chromium browser won't cache the files.
8. When the application upgrade, it will reboot the application.
 
I find the issue:
1. it reproduces only from several customers' devices in a very low rate and I cannot reproduce locally.
2. it reproduces more from Mac OS than from Windows OS like 100 VS 1 rate in a month.
3. it happens during a router change, for example
- it inits with url:  ***index.en.html?locale=en-GB&os=MacOS&config=Release#HomePage/**AccountPlaceholder/ActivationPlaceholder/StoreIdPlaceholder**""

- then changes to ***index.en.html?locale=en-GB&os=MacOS&config=Release#HomePage/**AccountName/deactivated/1435508**""

4. from Chromium browser's log, it shows that this js file have been loaded completed.

Since these js files are all used by the HomePage, the only change is the router's parameters. 

So I have the questions:
1. Will REACT cancel the JS loading if the router parameter changes? and when it asks it again, it got a reject promise?
2. Any expert would tell me what may the causes?

React version: 16.8 and also see this issue from the previous version.

## Steps To Reproduce
No step to reproduce as it happens in a very local rate and only from some user's machine.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/19125,19125,eslint rules: mark certain values as having a stable identity,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,7,2020-06-12T22:54:36Z,2020-07-27T18:37:56Z,2020-07-27T18:29:21Z,NONE,completed,,"eslint-plugin-react-hooks version: 4.0.4

I have the following custom hook:

```js
export function useForceUpdate() {
  const [, setValue] = useState(0);
  return useCallback(() => setValue((v) => v + 1), []);
}
```

But when I use it:

```js
function MyComponent(props) {
  const forceUpdate = useForceUpdate();

  // ... snip ...

  useEffect(() => {
    // do stuff
    forceUpdate();
  }, [foo, bar]);

  // ... continue
}
```

The linter complains (rightfully so):

```
warning  React Hook useEffect has a missing dependency: 'forceUpdate'. Either include it or remove the dependency array
```

It would useful to have a configuration option to tell the linter that `forceUpdate` is guaranteed to have a stable identity, so it can give it the same treatment as e.g. `useState`'s callback. Otherwise, I have to disable the rule every time I use the hook!",Other
https://github.com/facebook/react/issues/19127,19127,Bug: React is taking longer time to open in Browser,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-06-13T07:45:15Z,2021-01-25T14:34:05Z,2020-06-13T20:38:25Z,NONE,completed,,"I have just started to learn React. So you can came to a conclusion that _I don't build heavy apps_. When I run `npm start` it takes minimum of 15 seconds to open up in the browser. Herewith I have attached the screenshot for your reference

![image](https://user-images.githubusercontent.com/53224551/84563246-beaddc00-ad77-11ea-80b9-04fa1d984962.png)
",Other
https://github.com/facebook/react/issues/19144,19144,Bug: Invalid hook call in React Native; verified all known causes,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2020-06-16T21:21:56Z,2020-06-17T02:36:26Z,2020-06-17T02:36:26Z,NONE,completed,,"I'm getting the [Invalid Hook Call](https://reactjs.org/warnings/invalid-hook-call-warning.html) warning, and I've gone down the list of the potential causes and have ruled out (as far as I can tell) all of them:

1. Mismatching versions of `react` and `react-dom`
- from my `package.json`
```
""dependencies"": {
        ""react"": ""^16.13.1"",
        ""react-dom"": ""^16.13.1"",
}
```

2. Breaking rules of hooks
- my component:
```
const CaptureScreen = () => {
    const [stuff, setStuff] = useState(0)

    return (
        <DefaultTemplate >
            <NuggetAdder />
        </DefaultTemplate>
    )
}
```

3. Multiple versions of react
- I've `required` react from `node_modules/react-dom/index.js` and set it to `window.React1`, and from the component `CaptureScreen` (above) I have done the steps listed in the ""Invalid hook call documentation"" and set up `window.React2`. When I log `window.React1 === window.React2`, I get back `true`.
- I'm not certain this is reliable since I use `yarn`, but running `npm ls react` returns: 
```
myproject@0.0.1 /Users/me/programming/projects/my-project/client
└── (empty)
```

React version: 16.13.1
React-native version: 0.62.2",Support
https://github.com/facebook/react/issues/19151,19151,React Developer Tool Is not working in my localhost. It was working fine before.,[],closed,FALSE,,14,2020-06-18T05:31:08Z,2022-07-28T03:55:02Z,2020-06-22T15:49:12Z,NONE,completed,,"Hi Team

I am not able to use the react developer tool extension on my chrome browser, Which was working well before.  I have tried by removing and re adding the extension again. Still the problem persists.

I have attached a screenshot of the tool Icon on browser. I am very new to react Environment. Appreciate your help here.

Thank you.

![image](https://user-images.githubusercontent.com/28383863/84981630-8f6de500-b152-11ea-909f-f386f226d7ee.png)
",Bug
https://github.com/facebook/react/issues/19156,19156,Bug: Strange onScroll behaviour when child editing,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,7,2020-06-18T17:06:41Z,2020-10-04T14:27:20Z,2020-10-04T14:27:20Z,NONE,completed,,"React version: 16.13.1
OS: Mac OS
Browser: Chrome 83.0.4103.97

## Steps To Reproduce

1. Create a div and add onScroll event to it
2. Create input inside the created div
3. Start typing in the input box.

## The current behavior

Event onScroll is fired on the parent.

## The expected behavior

Scroll event should not fire.

## Link to code example:

https://codepen.io/vladislav-andreevich/pen/zYroQjN",Support
https://github.com/facebook/react/issues/19185,19185,Bug: npx create-react-app my-app returns error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-06-24T06:09:33Z,2020-06-24T14:02:14Z,2020-06-24T14:02:13Z,NONE,completed,,"Typing npx-react-app doesn't work. It throws error.

## Steps To Reproduce

 `npx create-react-app my-app`

## The current behavior
![cmd_PFUUb2Y3Lu](https://user-images.githubusercontent.com/32035481/85506763-ce001580-b612-11ea-821e-83eb39cbfc22.png)
Th error shown in cmd is:
```
npm ERR! code ENOLOCAL
npm ERR! Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\Farhan Bin Amin\AppData\Roaming\npm-cache\_logs\2020-06-24T05_56_16_593Z-debug.log
Install for [ 'create-react-app@latest' ] failed with code 1
```
The debug log file is:
```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'create-react-app@latest',
1 verbose cli   '--global',
1 verbose cli   '--prefix',
1 verbose cli   'C:\\Users\\Farhan',
1 verbose cli   'Bin',
1 verbose cli   'Amin\\AppData\\Roaming\\npm-cache\\_npx\\2956',
1 verbose cli   '--loglevel',
1 verbose cli   'error',
1 verbose cli   '--json'
1 verbose cli ]
2 info using npm@6.14.4
3 info using node@v12.16.3
4 verbose npm-session a74bdc721a94d85a
5 silly install loadCurrentTree
6 silly install readGlobalPackageData
7 silly fetchPackageMetaData error for file:Amin\AppData\Roaming\npm-cache\_npx\2956 Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.
8 http fetch GET 304 https://registry.npmjs.org/create-react-app 242ms (from cache)
9 silly pacote tag manifest for create-react-app@latest fetched in 262ms
10 http fetch GET 404 https://registry.npmjs.org/Bin 1039ms
11 http fetch GET 404 https://registry.npmjs.org/Bin 939ms
12 silly fetchPackageMetaData error for Bin@latest 404 Not Found - GET https://registry.npmjs.org/Bin - Not found
13 timing stage:rollbackFailedOptional Completed in 2ms
14 timing stage:runTopLevelLifecycles Completed in 2027ms
15 verbose stack Error: ENOENT: no such file or directory, open 'F:\react\Amin\AppData\Roaming\npm-cache\_npx\2956\package.json'
16 verbose cwd F:\react
17 verbose Windows_NT 10.0.15063
18 verbose argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""create-react-app@latest"" ""--global"" ""--prefix"" ""C:\\Users\\Farhan"" ""Bin"" ""Amin\\AppData\\Roaming\\npm-cache\\_npx\\2956"" ""--loglevel"" ""error"" ""--json""
19 verbose node v12.16.3
20 verbose npm  v6.14.4
21 error code ENOLOCAL
22 error Could not install from ""Amin\AppData\Roaming\npm-cache\_npx\2956"" as it does not contain a package.json file.
23 verbose exit [ 1, true ]

```
Also I have I have node version `12.16.3` and npm version `6.14.4` installed. My pc is running windows 10.
",Other
https://github.com/facebook/react/issues/19201,19201,Bug: The context component can't be identified.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-06-26T22:01:07Z,2020-06-28T15:43:33Z,2020-06-28T14:37:06Z,NONE,completed,,"The context component can't be identified.

use use this code to reproduce: 
```
                    **<AppContext.Consumer>** 
                      **{ context => (**
                        <dev> It work fine if '{ context => (' in a new line
                      )} 
```

```
                    **<AppContext.Consumer>  { context => (**
                        <dev> It doesn't work if '{ context => (' in the same line
                      )} 
```


Error:
TypeError: render is not a function
![image](https://user-images.githubusercontent.com/49762389/85904540-db0d3800-b7bd-11ea-9422-6143adb2daa6.png)



Thanks,
John Liu",Support
https://github.com/facebook/react/issues/19203,19203,Bug: React slower in production than in dev than in codesandbox,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-06-27T15:50:45Z,2020-07-18T00:07:51Z,2020-07-18T00:07:51Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. Make a box follow the mouse cursor
2. There it is (or not)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

![Performance gif](https://user-images.githubusercontent.com/23149166/85926187-eb94df80-b89d-11ea-9781-3d7c936d91bd.gif)
I have a peculiar problem, my code runs well in codesandbox, but it doesn't run well in my local build. The only difference between the code in the sandbox and the local build is that the component is nested in a router, everything else is identical.

If I turn on the dev tools' highlighter for what components were re-rendered only the box gets a border as expected

Link to code example: [Code SandBox](https://codesandbox.io/s/mystifying-bas-ninz2?file=/src/lobby_index.jsx)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Slow and laggy

## The expected behavior
Same as in the sandbox",Other
https://github.com/facebook/react/issues/19211,19211,Bug: React hook state not cleared when rendering using ReactDOMServer if component errors,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-06-29T23:26:29Z,2020-07-08T02:10:24Z,2020-07-08T02:10:24Z,CONTRIBUTOR,completed,,"In the react-dom package, React maintains some global internal state for hooks when server rendering a component (https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L44-L54). The state is reset after [each function component finishes rendering](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRenderer.js#L535) via [the `finishHooks` function](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L197-L201). 

Since the state of the hooks are only reset after a component finishes rendering, we can observe incorrect hooks state if a component that was using hooks raised an error while rendering, thus causing the finishHooks call to never execute. The next function component to render within the same process would then use the hooks state from the Component that previously failed to render, potentially causing mismatches.

We can work around this bug by rendering a no-op function component at the top of our react tree (which will cause `finishHooks` to properly run), but it seems like a more ideal fix would be to reset the hooks state as part of [the `prepareHooks` call](https://github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/server/ReactPartialRendererHooks.js#L161-L173).  The comments actually have the code already present -- maybe there is a good reason for the state not to be reset there?

React version: 16.13.1

## Steps To Reproduce
Refer to the steps in the README of the example repo.

Link to code example:
https://github.com/pmaccart/react-hooks-ssr-state-leak

## The current behavior
The hooks state of a component is not cleared between renders


## The expected behavior
The hooks state of a component is cleared between renders
",Bug
https://github.com/facebook/react/issues/19229,19229,CI missing failing tests?,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null}]",closed,FALSE,,6,2020-07-01T15:30:08Z,2020-08-18T21:05:13Z,2020-08-18T21:05:12Z,COLLABORATOR,completed,,"PR #19222 recently landed with no CI failures, but `ReactDOMServerSelectiveHydration` was definitely broken as a result of this PR (and was subsequently fixed in #19227). This is just a reminder for one of us to dig into why CI didn't catch this failure.",Other
https://github.com/facebook/react/issues/19250,19250,Bug: npm run build failed using with Docker,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-07-03T19:03:37Z,2020-07-04T02:14:58Z,2020-07-04T02:14:57Z,NONE,completed,,"<!--
I came up with the impression while running the '`docker run <id> npm run test'` in which this command populated the error Cannot find module '@nodelib/fs.stat'. But, running the similar command using `docker compose up` which it ran successfully and return the output as which was expected.
-->

React version: 6.14.5

## Steps To Reproduce

1.docker run <image-id> npm run test

FYI please find the attached detail log while running the command.

$ docker run 4e6866278613 npm run test 

> frontend@0.1.0 test /app
> react-scripts test

internal/modules/cjs/loader.js:1032
  throw err;
  ^

Error: Cannot find module '@nodelib/fs.stat'
Require stack:
- /app/node_modules/fast-glob/out/adapters/fs-stream.js
- /app/node_modules/fast-glob/out/providers/reader-async.js
- /app/node_modules/fast-glob/out/index.js
- /app/node_modules/fast-glob/index.js
- /app/node_modules/globby/index.js
- /app/node_modules/react-dev-utils/globby.js
- /app/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js
- /app/node_modules/react-scripts/scripts/test.js
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:1029:15)
    at Function.Module._load (internal/modules/cjs/loader.js:898:27)
    at Module.require (internal/modules/cjs/loader.js:1089:19)
    at require (internal/modules/cjs/helpers.js:73:18)
    at Object.<anonymous> (/app/node_modules/fast-glob/out/adapters/fs-stream.js:17:14)
    at Module._compile (internal/modules/cjs/loader.js:1200:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1220:10)
    at Module.load (internal/modules/cjs/loader.js:1049:32)
    at Function.Module._load (internal/modules/cjs/loader.js:937:14)
    at Module.require (internal/modules/cjs/loader.js:1089:19) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    '/app/node_modules/fast-glob/out/adapters/fs-stream.js',
    '/app/node_modules/fast-glob/out/providers/reader-async.js',
    '/app/node_modules/fast-glob/out/index.js',
    '/app/node_modules/fast-glob/index.js',
    '/app/node_modules/globby/index.js',
    '/app/node_modules/react-dev-utils/globby.js',
    '/app/node_modules/react-scripts/scripts/utils/verifyTypeScriptSetup.js',
    '/app/node_modules/react-scripts/scripts/test.js'
  ]
}
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! frontend@0.1.0 test: `react-scripts test`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the frontend@0.1.0 test script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2020-07-03T18_45_43_367Z-debug.log
",Other
https://github.com/facebook/react/issues/19296,19296,Bug: checked attribute doesn't change in DOM even though React handles it's state correctly,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-07-09T14:39:06Z,2020-08-20T12:24:55Z,2020-08-20T12:24:55Z,NONE,completed,,"**For inputs of type 'checkbox', the checked attribute doesn't change in the actual DOM to match the react state.**

When the input is checked, the attribute is `checked=""""`, as expected
![When checked, 'checked=""""'](https://user-images.githubusercontent.com/43141484/87051612-cc674d80-c1cd-11ea-905d-a14da9ef9692.png)
---
When the input is unchecked, the attribute is still `checked=""""`
![When unchecked, still 'checked=""""'](https://user-images.githubusercontent.com/43141484/87051904-2c5df400-c1ce-11ea-9825-7f7ab13777c4.png)
This same odd behavior applies to radio buttons too.

React version: 16.13.1

## Steps To Reproduce

1.  Make a Controlled Component Checkbox
2. Check and uncheck the checkbox
3. Notice that the input element's 'checked' attribute remains unchanged regardless of the value of the actual checked prop in the component.

Link to code example:
From the [official React CodePen example](https://codepen.io/gaearon/pen/wgedvV?editors=0010) used in the React Docs
https://codepen.io/gaearon/pen/wgedvV?editors=0010

## The current behavior
'checked' attribute remains unchanged and out of sync with the react component state that should manage the attribute

## The expected behavior
The 'checked' attribute should be the same as a new input that starts unchecked and has never been checked (see image)

(Firefox on the left, chrome on the right)
![Expected attributes](https://user-images.githubusercontent.com/43141484/87053129-96c36400-c1cf-11ea-9465-3429698c6f6c.png)",Support
https://github.com/facebook/react/issues/19298,19298,Which approach is better for getting data from state ?,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-07-09T15:48:17Z,2020-07-09T16:23:48Z,2020-07-09T16:23:14Z,NONE,completed,,"
Let's say our state is as follows:
```
state: {
    user: {
        name: 'Dave',
        email: 'Dave@gmail.com'
    }
}
```

so while getting the user property from the state which one of the following should I do?

**Case 1:**

```
const user = this.state.user

this way following is valid
user == this.state.user //true
user.name = 'Manny';
console.log(this.state.user.name) //Manny
```
though it won't cause re-render until we use setState() but basically the value of the state variable has changed.

**Case 2:**

```
const user = { ...this.state.user};

this way
user == this.state.user //false
user.name = 'Manny';
console.log(this.state.user.name) //Dave
```

Which approach is better or are there any side effects of any of them?",Support
https://github.com/facebook/react/issues/19299,19299,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,6,2020-07-09T15:59:34Z,2020-07-12T21:54:03Z,2020-07-09T16:29:11Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. Create a React app which ask for camera permission.
2. Create a build od this app and try to use it.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://github.com/Mdsp9070/cameraBrowser

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The development server works fine, however when I create the build and try to access the route, I get this error:

 ```Component(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.```

### Screenshots:
![Screenshot from 2020-07-09 12-58-21](https://user-images.githubusercontent.com/44469426/87062836-f592d880-c1e3-11ea-9e8f-c9844b29c6c7.png)
![Screenshot from 2020-07-09 12-58-36](https://user-images.githubusercontent.com/44469426/87062851-f9265f80-c1e3-11ea-901d-df04eca7eb6d.png)


## The expected behavior
Ask for camera access and render the camera view with a video playent centered on the screen.",Support
https://github.com/facebook/react/issues/19312,19312,Bug: Exhaustive deps lint rule mistakingly flags an assignment,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,0,2020-07-10T17:41:51Z,2020-07-10T18:02:09Z,2020-07-10T18:02:09Z,MEMBER,completed,,"Example:

```js
        function Example(props) {
          useEffect(() => {
            let topHeight = 0;
            topHeight = props.upperViewHeight;
          }, [props.upperViewHeight]);
        }
```

This is **not** supposed to violate because `props.upperViewHeight` is in the deps.",Bug
https://github.com/facebook/react/issues/19318,19318,Bug: act warning misleading if an effect wasn't run,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":739761016,""node_id"":""MDU6TGFiZWw3Mzk3NjEwMTY="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler"",""name"":""Component: Reconciler"",""color"":""f9a798"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-07-11T12:51:11Z,2021-08-11T12:45:52Z,2021-08-11T12:45:52Z,COLLABORATOR,completed,,"
React version: 16.13.1 and `next`

## Steps To Reproduce

1. Re-render a component where an effect wasn't run because dependencies didn't change
2. Receive missing act warning


Link to code example: https://codesandbox.io/s/missing-act-on-every-effect-ldy3b?file=/src/index.test.js

## The current behavior

React creates warnings for each call of React.useEffect regardless of whether an effect was actually scheduled i.e. the effect was run.

## The expected behavior

If it is impossible for an effect to be run I shouldn't have to wrap it in act. Changing the behavior would help identifying what effects were unexpectedly scheduled. Right now we receive warnings for effects that are unrelated to a specific update.

I consider the current warning misleading and unnecessary because the [documentation](https://reactjs.org/docs/testing-recipes.html#act) talks about ""all updates related to these “units”"" which is not the case here in my opinion. The act warning says ""When testing, code that causes React state updates should be wrapped into act(...):"" which also doesn't apply here: The code in question could not cause a state update from an effect.
",Bug
https://github.com/facebook/react/issues/19323,19323,Bug: Controlled input warning for component with onInput handler,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-07-11T16:17:22Z,2020-07-14T03:07:54Z,2020-07-14T03:07:06Z,NONE,completed,,"React causes warnings in browser console about immutable input when I can change value of it.

React version: 16.3.1

## Steps To Reproduce

1. Create App component which extends React.Component.
2. In constructor create new state named input which contains '12' (or another number which is wrapped by quotes).
3. Create input elem in App with value attribute contained `this.state.input`.
4. Create new method named handleChange that get one arg - e.
5. Write code below in handleChange:
   `this.setState({input: e.target.value})`
6. Add to input in App onInput attribute that contains this code: 
    `(e) => this.handleChange(e)`
7. Open in your browser (this bug I got in Chrome) dev console
8. There you should see warning coloured red:  
    Warning: Failed prop type: You provided a `value` prop to a form field without an `onChange` handler. This will render a read- 
    only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.

Link to code example:
[https://github.com/fearsd/react_issue](https://github.com/fearsd/react_issue)
**Note: Codepen can't show this warning in console, pls see it to get know about issue more.**
[codepen](https://codepen.io/RifatFazlutdinov04/pen/QWyxJve)

## The current behavior
React causes warning dev console about immutability of input but input is exactly mutable

## The expected behavior
React shouldn't cause warnings like that if I can mute input",Other
https://github.com/facebook/react/issues/19328,19328,"Error: ""Commit tree does not contain fiber 778. This is a bug in React DevTools.""","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-07-13T05:39:32Z,2020-07-13T15:04:12Z,2020-07-13T15:04:05Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.7.0-23309eb38

Call stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:164902)
    at I (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:163705)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:166664)
    at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342328)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:62450)
    at tl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:71793)
    at zl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:113765)
    at Ic (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104502)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104430)
    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:104298)

Component stack: at Ul (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:342099)
    at div
    at div
    at div
    at Co (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:263571)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:366677
    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:276314)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:278724
    at div
    at div
    at Xi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:325177)
    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:207026)
    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:216342)
    at Va (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:293773)
    at us (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:371869)",Other
https://github.com/facebook/react/issues/19343,19343,"Error: ""Commit tree does not contain fiber 20379. This is a bug in React DevTools.""","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-07-14T05:04:04Z,2020-07-14T13:25:02Z,2020-07-14T13:24:46Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. I have a couple of material UI expansion panel in my code. Each expansion panel contains some cards inside, mounted on expansion open.
2. The one I was profiling the page while opening the panel
3. I saw this error twice.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.8.1-d4eadea6c

Call stack: at N (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:167176)
    at T (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:165979)
    at e.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:168938)
    at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346620)
    at oi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:60964)
    at Ui (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:70944)
    at Bl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:117704)
    at Tc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:103070)
    at Oc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102998)
    at Dc (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32:102861)

Component stack: at Wl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:346391)
    at div
    at div
    at div
    at Eo (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:266560)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:370969
    at n (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:279481)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:282269
    at div
    at div
    at Ji (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:329374)
    at Ge (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:209300)
    at sn (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:218616)
    at Wa (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:297360)
    at ps (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40:376211)",Other
https://github.com/facebook/react/issues/19358,19358,Bug: setState callback not working,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-07-15T04:03:23Z,2020-07-15T07:51:07Z,2020-07-15T07:51:07Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
16.13.1
## Steps To Reproduce

in componentDidMount, setState callback doesn't work
but after setState it rerendered
<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
componentDidMount() {
    this.setState({isLoading: true}, () => {
      console.log('isLoadingEnd')
    })
}

console.log doesn't work
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/19370,19370,html5 <audio /> tag don't work on mobile when use props in source,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-07-15T14:46:37Z,2020-07-19T17:14:40Z,2020-07-19T17:14:40Z,NONE,completed,,"I try to play an audio mp3 song. It works well on the desktop. When using <source /> without props it works on mobile. When use props for <source />  it doesn't work. I don't see any error, just audio don't play the song.

`    const [audio, setAudio] = useState(() => {
        let path = props.name + "".mp3"";
        let url = ""https://cdn.sitename.com/audio/128/"" + path;
        return url;
      });

     <audio
          preload=""none""
          className=""Audio-player""
          ref={audioEl}
          controls
          loop={repeat}
          onPlay={handleStart}
          onEnded={handleEnded}
        >
        <source src={audio} type=""audio/mpeg"" />
        Your browser does not support the audio tag.
     </audio>`

React version: 16.13.1

Tested in production on ios safari and chrome and android chrome.
",Other
https://github.com/facebook/react/issues/19424,19424,React Dev Tools not working with .NET core react+redux Visual Studio 2019 application,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,6,2020-07-21T05:23:18Z,2020-07-23T23:15:42Z,2020-07-23T23:15:42Z,NONE,completed,francotiveron,"I have an application which I inherited and have to maintain it (cannot contact who developed it). This application has been crated using Visual Studio, as a .NET Core Web App with C# back-end and react+redux frontend (react+redux template).

I am using Visual Studio 2019, and I can open, build and run the application just fine. The problem I have is when I want to debug the front-end. When I open Chrome's dev tools (with react dev tools for Chrome extension installed), the extension doesn't detect react (""This page doesn’t appear to be using React"").

To verify that my environment is healthy, I create a brand new app and the react dev tools work just fine, as they should.

I compared project configurations, appsettings.json, launchSetting.json and the Startup.cs for middleware and services, with no luck. I am asking whether someone can give me hints or clues on what could be missing or what else can I try",Other
https://github.com/facebook/react/issues/19427,19427,React DevTools: Display whether render was unnecessary,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2020-07-21T18:24:27Z,2020-07-23T20:09:25Z,2020-07-23T20:09:25Z,CONTRIBUTOR,completed,,It would be nice if the React DevTools gave some indication that the render didn't result in a commit or side effect callback and was therefore unnecessary. It's possible that I'm missing something on the nuance here that makes this more challenging than practical.,Support
https://github.com/facebook/react/issues/19445,19445,Bug: React 16.11.0 Install error: Unexpected end of input,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-07-24T06:19:06Z,2020-07-26T07:38:08Z,2020-07-26T07:38:08Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
## Description
Today, I wanted to learn react-native after learning react. So, I went to [React Native Official Website](https://reactnative.dev). In the setup of the environment, I learnt about expo-cli. I went to [Expo](https://expo.io) and installed by copying the command. It installed well. But when I created a project by `expo init` command, it throwed an error at Installing React@16.11.0. See the below screenshot.
I tried to install every package except React, then `npm install react@~16.11.0` but failed.

My package.json:
```
{
  ""main"": ""node_modules/expo/AppEntry.js"",
  ""scripts"": {
    ""start"": ""expo start"",
    ""android"": ""expo start --android"",
    ""ios"": ""expo start --ios"",
    ""web"": ""expo start --web"",
    ""eject"": ""expo eject""
  },
  ""dependencies"": {
    ""expo"": ""^38.0.8"",
    ""expo-status-bar"": ""^1.0.2"",
    ""react"": ""~16.11.0"",
    ""react-dom"": ""^16.11.0"",
    ""react-native"": ""https://github.com/expo/react-native/archive/sdk-38.0.2.tar.gz"",
    ""react-native-web"": ""^0.11.7""
  },
  ""devDependencies"": {
    ""@babel/core"": ""^7.8.6"",
    ""babel-preset-expo"": ""~8.1.0""
  },
  ""private"": true
}
```

npm Debug Log:
```
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'react@~16.11.0'
1 verbose cli ]
2 info using npm@6.14.4
3 info using node@v12.18.0
4 verbose npm-session 928895f1c47b33d6
5 silly install loadCurrentTree
6 silly install readLocalPackageData
7 http fetch GET 304 https://registry.npmjs.org/react 2210ms (from cache)
8 silly fetchPackageMetaData error for react@~16.11.0 Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
9 timing stage:rollbackFailedOptional Completed in 1ms
10 timing stage:runTopLevelLifecycles Completed in 32243ms
11 verbose stack SyntaxError: Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
11 verbose stack     at JSON.parse (<anonymous>)
11 verbose stack     at parseJson (C:\Program Files\nodejs\node_modules\npm\node_modules\json-parse-better-errors\index.js:7:17)
11 verbose stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-fetch-npm\src\body.js:96:50
11 verbose stack     at processTicksAndRejections (internal/process/task_queues.js:97:5)
12 verbose cwd D:\homework\COMPUTER\Programming\Web\Self Tutorials\swag-react-native
13 verbose Windows_NT 6.1.7601
14 verbose argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""react@~16.11.0""
15 verbose node v12.18.0
16 verbose npm  v6.14.4
17 error Unexpected end of JSON input while parsing near '...1.0"",""object-assign"":'
18 verbose exit [ 1, true ]
```


React version: 16.11.0

## Steps To Reproduce

1. Run `npm install react@~16.11.0` from the terminal
2. Get an error:
![Capture](https://user-images.githubusercontent.com/54971391/88365179-d7f86e00-cda2-11ea-8ba6-26a37b06bfa3.PNG)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: No code, as nothing is installed

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Throwing the above error.

## The expected behavior
Install React 16.11.0",Other
https://github.com/facebook/react/issues/19460,19460,useLocalState,[],closed,FALSE,,1,2020-07-27T02:32:42Z,2020-07-27T13:34:40Z,2020-07-27T13:34:40Z,NONE,completed,,"### The React Hook which lets you store the state in localStorage and sync it in between tabs.
#### Idea worthy enough to become a PR?",Other
https://github.com/facebook/react/issues/19468,19468,"Error: ""Commit tree already contains fiber 8440. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-07-27T18:13:24Z,2021-04-28T20:30:35Z,2020-07-27T20:35:56Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Turn on Profiler
2. The app sens a lot of small requests to BE
3. To make sure that all requests fulfilled, I went to Network TAB. When it was finished and stop profiling.
4. The profiler showed some results and then crashed.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.8.2-fed4ae024

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17786:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17717:25)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:17710:30)
    at ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18265:14)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31718:33)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31701:48)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33363:48)
    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",Other
https://github.com/facebook/react/issues/19477,19477,Bug: Passing valid and then empty style value doesn't remove prior value,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,2,2020-07-28T22:14:41Z,2020-07-29T22:17:13Z,2020-07-28T23:02:45Z,NONE,completed,,"React version: 16.13.1

## Steps To Reproduce

1. Give element a valid backgroundColor: `style={{backgroundColor: 'blue'}}`
2. Update component so that on the next render you have a commented-out value: `style={{backgroundColor: '/*blue*/'}}`, or any value deemed ""invalid"" by React.

Link to code example:

A code sandbox that toggles with the two above examples, and a toggle on click is provided here: https://codesandbox.io/s/adoring-currying-z4x2r?file=/src/App.tsx:316-320

## The current behavior
If I pass a valid string to an element's style property, e.g. `style={{border: '20px solid rebeccapurple'}}`, and then update that value to e.g., `'nonsense'`, the new invalid value is not pushed to the DOM. However the old value is kept on the DOM.

Furthermore, updating a valid value, e.g. `style={{backgroundColor: 'blue'}}` with a valid empty value, e.g. `style={{backgroundColor: '/*blue*/'}}` does the same: the old value is kept on the DOM.

## The expected behavior
An invalid value or an empty valid value would at least either remove the previous value from the DOM, or be pushed through. (I've not understood why invalid values weren't pushed through and am genuinely curious to hear if there is a good reason, would love to learn.)",Support
https://github.com/facebook/react/issues/19490,19490,useState,[],closed,FALSE,,1,2020-07-30T02:38:36Z,2020-07-30T04:42:30Z,2020-07-30T04:38:12Z,NONE,completed,,useState在每次组件re-render的时候都会生成新的值，为什么把这个值传递给子组件，子组件不会re-render,Other
https://github.com/facebook/react/issues/19517,19517,Bug: TypeScript: Passing a Component Constructor as prop does not adhere to prop's type,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-08-03T12:49:03Z,2020-08-03T16:27:45Z,2020-08-03T15:50:52Z,NONE,completed,NicoleRauch,"When passing a component constructor as prop, the component constructor type is not required to match the prop's type, which can lead to issues further down the execution path.

Here is an example:
https://codepen.io/nicolerauch/pen/QWNLENx?editors=1010

1. Let's say we have a component `EntryFunctional`/`EntryClass` (with props `EntryProps`) that we want to pass to the component `List`. For this, we equip `List` with a prop called `EntryComp` and give it the type `((props: EntryProps) => ReactElement) | (new (p: EntryProps) => Component<EntryProps>)` (so that it can handle both functional and class components).
When passing our `EntryFunctional` and `EntryClass` components (line 58 and 59), all is well.

2. If we have a component that accepts fewer props than `EntryProps` (in our case, no props at all), this should be accepted as well, according to https://github.com/Microsoft/TypeScript/wiki/FAQ#why-are-functions-with-fewer-parameters-assignable-to-functions-that-take-more-parameters: If the component gets more props than it needs, that's fair enough.
In the example I provided two components `FewerPropsFunctional` and `FewerPropsClass`, but only the functional component is accepted by `List`, not the class component (lines 60 and 61).
I think this is **bug no. 1**: The class component should be accepted as well, because it requires fewer props than it is given.

3. If we have a component that requires more props than `EntryProps`, this should not be accepted because at runtime the component will not get all the data it needs.
In the example I provided two components `MorePropsFunctional` and `MorePropsClass`. Those are both accepted when passed to `List`. As you can see in the output, the `more` prop is `undefined` although its prop type is `number`. I think this is **bug no. 2**: Both components should not be accepted (i.e. these lines should lead to compile errors), as they do not match the type of the prop and as this leads to breaches in the components' contracts with respect to their extra props.

React version: 16.13.1

## Steps To Reproduce

Have a look at the Codepen example: https://codepen.io/nicolerauch/pen/QWNLENx?editors=1010

## The current behavior
1. `FewerPropsClass` is not accepted (i.e. the line compiles) when it is passed to the `List` component.
1. `MorePropsFunctional` and `MorePropsClass` are accepted (i.e. there are no compile errors). If the surplus parameters are accessed in those components, this leads to runtime errors.

## The expected behavior
1. `FewerPropsClass` should be accepted when it is passed to the `List` component (i.e. the line should compile).
1. Neither `MorePropsFunctional` nor `MorePropsClass` should be accepted (i.e. there should be compile errors).
",Other
https://github.com/facebook/react/issues/19538,19538,Suggestion: Add release date in the experimental (0.0.0) version,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-08-05T15:35:17Z,2020-08-05T19:28:58Z,2020-08-05T19:28:13Z,CONTRIBUTOR,completed,,"https://samver.org/

It's hard to know which one is the latest experimental react version in the `yarn` or `npm`.

0.0.0-experimental-ede917064
0.0.0-experimental-4c8c98ab9
0.0.0-experimental-7f28234f8

Can you tell which one is newer without doing querying on the web?

I suggest adding a release date in the version.

`0.0.0-experimental-20200802-3d0895557`",Support
https://github.com/facebook/react/issues/19569,19569,Missing Dependency: ReactDOMServer not available via umd,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-08-10T09:53:25Z,2020-08-10T10:55:22Z,2020-08-10T10:55:22Z,NONE,completed,,"Due to technical limitations, I'm currently using react in it's UMD form.
As far as I know, `ReactDOMServer` is both for server use and client use.
I tried to find it in `ReactDOM` global, but I was surprised that it is not included OOTB in react-dom 16.

1. Please provide us a way to consume `ReactDOMServer` as umd (either as part of ReactDom or as another distribution)
2. It seems like [you allowed it in the past](https://stackoverflow.com/questions/38666241/does-react-dom-server-work-on-the-client-side/38666691#38666691), so I'm wondering why did you drop support?

React version: 16.9
ReactDOM version: 16.9",Support
https://github.com/facebook/react/issues/19573,19573,Bug: react-hooks/exhaustive-deps methods used in dependencies array,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2020-08-10T15:37:56Z,2020-08-10T17:16:49Z,2020-08-10T17:16:48Z,NONE,completed,,"`eslint-plugin-react-hooks` version: 4.0.8

## Steps To Reproduce

1. Create a hook with dependencies
2. Use a method on object `like foo.bar()`
3. The entire object is marked as required in the deps array instead of the method (`foo` instead of `foo.bar`)

Link to code example:

https://codesandbox.io/s/exhaustive-deps-error-demo-r0gnu

## The current behavior

The entire object is marked as required in the deps array instead of the method (`foo` instead of `foo.bar`).
But if you create a temporary variable (like `const bar = foo.bar`), now `foo.bar` is valid in the deps array

## The expected behavior

The method should be enough in the deps array

## Code sandbox link

https://codesandbox.io/s/exhaustive-deps-error-demo-r0gnu",Support
https://github.com/facebook/react/issues/19597,19597,Bug: Wont set file to state with hooks,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,9,2020-08-13T02:21:26Z,2020-08-15T04:30:29Z,2020-08-15T04:30:29Z,NONE,completed,,"I'm having an issue where the state is refusing to be set to a file, below is a summarised version of my code
```
let [files, setFiles] = useState([]);

const handleFile = (file, index) => {
        let old = [...files];
        old[index] = file;
        setFiles(old);
    }

<input type=""file"" accept=""image/jpeg,image/jpg"" onChange={e => handleFile(e.target.files[0], files.length)} />
```

I console logged `old` after i set the file to it and i get `[File]  0: File {name:....` so so the array is what i expect but the state wont be set to it, its still an empty array.
react version `""react"": ""^16.13.0"",`
dependencies list
```
""dependencies"": {
    ""@ckeditor/ckeditor5-build-classic"": ""^20.0.0"",
    ""@ckeditor/ckeditor5-react"": ""^2.1.0"",
    ""@testing-library/jest-dom"": ""^4.2.4"",
    ""@testing-library/react"": ""^9.3.2"",
    ""@testing-library/user-event"": ""^7.1.2"",
    ""bootstrap"": ""^4.4.1"",
    ""easy-peasy"": ""^3.3.0"",
    ""font-awesome"": ""^4.7.0"",
    ""install"": ""^0.13.0"",
    ""jquery"": ""^3.5.1"",
    ""mitt"": ""^1.2.0"",
    ""npm"": ""^6.14.6"",
    ""react"": ""^16.13.0"",
    ""react-bootstrap"": ""^1.0.0-beta.17"",
    ""react-dom"": ""^16.13.0"",
    ""react-icons"": ""^3.10.0"",
    ""react-loader-spinner"": ""^3.1.14"",
    ""react-redux"": ""^7.2.0"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-scripts"": ""3.4.0"",
    ""react-slideshow-image"": ""^1.4.2"",
    ""react-social-icons"": ""^4.1.0"",
    ""react-spring"": ""^8.0.27"",
    ""socket.io-client"": ""^2.3.0"",
    ""typescript"": ""^3.8.3""
  },
```",Support
https://github.com/facebook/react/issues/19623,19623,Bug: Event Capture does not work in video environment,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,11,2020-08-15T22:58:11Z,2020-08-17T03:04:58Z,2020-08-17T03:04:58Z,NONE,completed,,"This is related to https://github.com/facebook/react/issues/18932.
It seems that the problem still exists.

React version: 17.0.0-rc.0

## Steps To Reproduce

1. Copy https://gist.github.com/JenniferFuBook/c7c9ffd6dbd4e8b4e64afe9e6c66f66c#file-appwithvideo-js and replace App.js in Create React App.
2. Name a video file IMG_2313.mp4, and put it under public directory.
3. npm start

Another example:

1. Copy https://gist.github.com/JenniferFuBook/04b81149af921efc316844e6783dff21#file-appwithyoutube-js and replace App.js in Create React App.
2. npm i react-player
3. npm start

## The current behavior
If you click on the video control, such as play button, the click event is not captured,

## The expected behavior
If you click on the video control, such as play button, the click event should be captured.",Support
https://github.com/facebook/react/issues/19626,19626,"Bug: When I use the StrictMode component, all my components will be rendered twice.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-08-17T02:57:06Z,2020-08-17T03:27:19Z,2020-08-17T03:27:19Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

16.12.0

## Steps To Reproduce

Check the console

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://codesandbox.io/s/wizardly-goodall-w2n0z?file=/src/index.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Repeated rendering of components


## The expected behavior

Components should not be rendered repeatedly
",Support
https://github.com/facebook/react/issues/19629,19629,Bug: Clicking the troubleshooting instructions button on the devtools opens 2 tabs,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,0,2020-08-17T17:28:59Z,2020-08-18T14:17:01Z,2020-08-18T14:17:01Z,NONE,completed,,"<!--
In the react devtools window, clicking the troubleshooting instructions link opens 2 tabs of the troubleshooting page, instead of once
-->

React version: Devtools 4.8.2
Firefox version: 79.0 64-bit

## Steps To Reproduce

1. Go to a non-react page
2. Open the devtools box
3. Click troubleshooting instructions

## The current behavior
Opens 2 tabs of the github page
## The expected behavior
Should open 1 tab of the github page",Bug
https://github.com/facebook/react/issues/19649,19649,Bug: (17.0.0-rc.0) No changes to Native Component Stacks in production environment,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,17,2020-08-19T14:12:42Z,2021-03-24T19:03:17Z,2021-03-24T19:03:17Z,NONE,completed,,"The React 17 RC blog post states “In React 17, the component stacks are generated using a different mechanism that stitches them together from the regular native JavaScript stacks. This lets you get the fully symbolicated React component stack traces in a production environment.”

I’ve been trying to see a difference between React 16.13.1 and React 17.0.0.rc.0, and so far have been unable to do so.

React version: 17.0.0.rc.0

## Steps To Reproduce

1. Start a new app with Create React App.
2. Run `npm install react-error-boundary`.
3. Use the code shown below in your `App.js`.
4. Run `npm run build` to create a production build.
5. Start a web server and open in a browser to see the error.

``` JavaScript
import React from 'react';
import { ErrorBoundary } from ""react-error-boundary"";

function ErrorFallback({ error }) {
  return (
    <div>
      <p>Something went wrong:</p>
      <pre style={{ color: ""red"" }}>{error.message}</pre>
    </div>
  )
}

function Bomb(foo) {
  return (
    <>
      <h1>💣</h1>
      {foo.toUpperCase()}
    </>
  )
}

function App() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => {}}>
      <h1>Error Testing</h1>
      <Bomb />
    </ErrorBoundary>
  );
}

export default App;
```

## The current behavior

The stack trace I’m getting is exactly the same with React 16.13.1 and React 17.0.0-rc.0.

![error-trace](https://user-images.githubusercontent.com/544280/90645684-42ff5e00-e204-11ea-8661-857346068939.png)

## The expected behavior

I’m expecting to get component names in my stack trace, or to see some difference in the stack traces between React versions.

Apologies if I’m debugging the wrong thing here, but I’m trying to figure out what actually changed in React 17. Appreciate your time.
",Support
https://github.com/facebook/react/issues/19653,19653,Bug: Child Component State Updates Applied to Last Sibling Instead of Correct One,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-08-19T16:20:26Z,2020-08-19T20:16:31Z,2020-08-19T17:00:23Z,NONE,completed,,"I have a grid component that I am writing where a user is supposed to be able to click on a row and have that row transform into edit mode. A row in the grid is itself a component. I accomplish the transformation within the row component using the click event on cells that are editable. Once the click event fires on an editable row, the state of that component changes with the editing flag set to true. However, it is always the last row in the grid that gets re-rendered instead of the row that was clicked.

React version: v16.13.1

## Steps To Reproduce

1. Create a Row component that will render a single row of data (I'm using flex-box, but not sure if this is important)
2. Add a click event and a state hook to the Row component that will tell the row whether it is in highlight mode or not and highlight the row in yellow if it is being edited. Use the click event to toggle between highlight and normal; initialize this state to not-highlighted.
2. Create a Table or Grid component that will map a data array onto a set of Row components.
3. Run the Table component, click on a row, and notice it highlights the last row and not the one you clicked on.

Link to code example:
https://jsfiddle.net/3ursewLh/

## The current behavior
In the Fiddle listed, clicking on a row will highlight the last row and not the one you clicked on.

## The expected behavior
The row you clicked on should be highlighted instead of the last one.
",Support
https://github.com/facebook/react/issues/19662,19662,Add a toggle for Boolean props in DevTools,"[{""id"":40929153,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement"",""name"":""Type: Enhancement"",""color"":""84b6eb"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,5,2020-08-20T16:54:00Z,2020-09-03T12:57:13Z,2020-09-03T12:57:13Z,MEMBER,completed,,"We previously had a feature where Boolean props would show a checkbox to the left of them in the DevTools pane. It was removed when the JSON editor was added, but I think we should add it back. It should work like this:

1. If the value is a boolean, the checkbox should show up to the left of `true` / `false` value
2. If it's no longer a boolean (e.g. gets edited manually), the checkbox disappears",Feature
https://github.com/facebook/react/issues/19688,19688,Failed to load extension,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-08-25T01:06:01Z,2020-08-31T14:51:52Z,2020-08-31T14:51:49Z,NONE,completed,,"
The 'manifest_version' key must be present and set to 2 (without quotes). See developer.chrome.com/extensions/manifestVersion.html for details.
Could not load manifest.

I am getting that error when i try to load my react development tool. any assistance i can be given will be grateful. ",Other
https://github.com/facebook/react/issues/19697,19697,Bug: weird behavior when useState hook sets state for the first time vs subsequent times,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,8,2020-08-26T05:10:15Z,2020-08-26T11:06:41Z,2020-08-26T07:50:19Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1. Create a simple component with a button which sets state on click.
2. inside onClick, add multiple calls to state setter function using updater function to access previous state
3. The first call seems to be synchronous (although state is still set asynchronously) and others are batched. Any subsequent calls work as expected.


Link to code example:
https://codesandbox.io/s/set-state-calls-are-batched-and-all-executed-before-render-hooks-github-issue-09sin

## The current behavior
logs:
```
1
onclick 0
2
3
renderin
```

## The expected behavior
should log:
```
onclick 0
1
2
3
rendering
```


Not sure if it would lead to any unexpected bugs, because state is still set async, though the function execution is synchronous

https://stackoverflow.com/questions/63586754/react-weird-behavior-when-usestate-hook-sets-state-for-the-first-time-vs-subse",Support
https://github.com/facebook/react/issues/19712,19712,Bug: Memory Leak - React state in portals is not garbage collected after portal is unmounted,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,10,2020-08-27T19:02:42Z,2020-09-02T14:30:39Z,2020-09-02T05:07:42Z,NONE,completed,,"We are seeing an issue with portals where references to React state are retained after a portal component is unmounted. This can cause nasty memory leaks if React state is holding a lot of memory. The memory does seem to get reclaimed if you render the same portal again but our app is seeing an issue where this memory is never reclaimed and it accumulates over time. I am still attempting to come up with a minimum repro case for the really bad accumulation but the minimum repro case in Codepen seems to at least show that memory is not reclaimed after unmounting.

This also seems to happen only if a function inside of the portal component has access to the bulky state variable, hence the extra handleClick in the example.

This could be related to https://github.com/facebook/react/issues/16138

React version: 16.13.1

## Steps To Reproduce

Using demo
1. Open minimum repro case link that has a portal component that holds a lot of data in state
2. Take a memory snapshot to get a baseline
3. Toggle the portal component so that it renders (which will accumulate about 20mb of React state in memory)
4. Take another memory snapshot. Notice that it is now 20mb higher
5. Toggle the portal component again so that it unmounts.
6. Click on Collect Garbage icon in dev tools to make sure all memory that can be garbage collected has been garbage collected
7. Take another memory snapshot. 

<img width=""205"" alt=""Screen Shot 2020-08-27 at 1 56 04 PM"" src=""https://user-images.githubusercontent.com/5751354/91483472-631ac700-e86d-11ea-8e5f-5804d57286ae.png"">

Link to code example:

 I have created a repro case in Codepen here

* (Editor view) https://codepen.io/jessejorgenson/pen/ExKmQrb?editors=1010

I would go to the debug view to confirm.

EDIT:

Here is a CodeSandbox demo as well since Codepen doesn't do a Debug view unless you are signed in

https://codesandbox.io/s/great-babbage-mvsxl

## The current behavior
The memory is not cleared and it is roughly equivalent to the memory utilization when the Portal component was mounted

## The expected behavior
The final memory snapshot has returned to the baseline",Support
https://github.com/facebook/react/issues/19715,19715,React Suspense fallback should not be mandatory ,[],closed,FALSE,,12,2020-08-27T22:49:56Z,2022-03-29T22:46:02Z,2020-08-28T10:51:07Z,NONE,completed,,"In my current case I want to lazy-load components through React Router to decrease my bundle size on initial page load. 

React Suspense requires a fallback prop, but I don't want it. 
I render html from the server for better UX (matching the client component), and providing a loader placeholder when lazy-loading components on react router causes a flicker. 
Currently I implement my own loader from within a React component, and this is the way I want it (I have a custom feed loader that is isolated in a widget, and I don't want a loader for a full page component). Not showing a loader provides much better user experience.  

I don't know how to fix this with the current api, so I'm left to abandon lazy-loading components because the current UX is really a no-no. 
Please advise on the motivation behind making the fallback prop mandatory, and whether you could consider abandoning that imposing idea, so I could once again use the React Suspense api to improve my initial page load speed. 

You can see its effect here: https://stock-dd.herokuapp.com/home/topics/1
(Takes some time to load, free service that needs to be woken up after inactivity). 

If there is a workable alternative, please do share. ",Support
https://github.com/facebook/react/issues/19726,19726,Bug: DevTools calls arbitrary generators which may be stateful,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,11,2020-08-30T01:03:14Z,2020-09-22T18:23:20Z,2020-09-22T18:23:20Z,MEMBER,completed,bvaughn,"```js
function foo*() {
  yield 1;
  yield 2;
}

let gen = foo()
```

Currently if you put `gen` into state or props and then open this component in DevTools, it will consume that generator while trying to format it. So `gen.next()` will give you `{ done: true }` next time you call it.

This happens here:

https://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L616-L623

I think that maybe we should treat iterables differently if they *return themselves* as an iterator. Since that means they're likely stateful and it's not ok to iterate over them.

We detect iterables here (DevTools terminology is wrong btw, it should be `iterable` rather than `iterator`):

https://github.com/facebook/react/blob/60ba723bf78b9a28f60dce854e88e206fab52301/packages/react-devtools-shared/src/utils.js#L438-L439

I think maybe we could split this into `iterable` and `opaque_iterable`, and make sure none of the codepaths attempt to traverse `opaque_iterable` or pass it to something that would consume it (e.g. `Array.from`).

We could detect it based on `data[Symbol.iterator]() === data` — that clearly signals the iterable is its own iterator (which is the case for generators), and therefore it's not OK for DevTools to consume it.

Maybe some other heuristic could work. But overall, the goal is that `Map` and friends is still being iterated over, but an arbitrary generator is not.",Bug
https://github.com/facebook/react/issues/19736,19736,Bug: ,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-09-01T08:22:06Z,2020-09-01T12:02:43Z,2020-09-01T12:02:30Z,NONE,completed,,"Please fix the side bar toggle on React Documentation it does not work on my non-touch screen PC....i think it should be scroll-able, it works on my touch screen PC 
![reactbug](https://user-images.githubusercontent.com/38891189/91824890-61694e80-ec33-11ea-9c5b-17a21679d0a8.png)

",Other
https://github.com/facebook/react/issues/19746,19746,Bug: Drag and drop event listeners (specifically onDragOver) are not added on Linux/Chromium.,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-09-02T06:35:48Z,2020-09-02T06:53:57Z,2020-09-02T06:53:18Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.3.1

## Steps To Reproduce

On Linux (i'm using wayland/sway), set up any react app and add onDrag, onDragOver, onDrop listeners.  onDragOver does not register on Chromium and dragging/dropping fails.

Some repros:

https://codepen.io/frcodecamp/pen/OEovqx
https://codepen.io/adamaoc/pen/GoKZKE


## The current behavior

onDragOver does not fire.  Dropping is impossible.

A video of actual behaviour:

https://bugs.chromium.org/p/chromium/issues/attachment?aid=464642&signed_aid=w6-h6srT4D2vyw_dnF6YHg==&inline=1

## The expected behavior

onDragOver fires, meaning `preventDefault()` can be called and dropping can occur.

A video of expected behaviour:

https://bugs.chromium.org/p/chromium/issues/attachment?aid=464643&signed_aid=Qi_9gJYXPnZYssHrIFkLJQ==&inline=1

Proactively filed a chromium bug here, also: https://bugs.chromium.org/p/chromium/issues/detail?id=1124153

Note that onDragOver event listeners only fail to register when the element is added via React/dynamically.",Other
https://github.com/facebook/react/issues/19747,19747,Bug: Using opacity as a percentage value in a css file will become 1% in the production build.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,7,2020-09-02T10:19:05Z,2020-09-03T12:52:37Z,2020-09-03T12:52:37Z,NONE,completed,mruiz42,"Using opacity as a percentage value in a css file will become 1% in the production build version, even though in the localhost website it will appear correctly. The way around this is to use a decimal value (ex. 0.95) for opacity.

React version: 16.13.1

## Steps To Reproduce

1. Set a css class to have a percentage opacity value (ex. 95%)
2. run npm run-scrips build
3. build version will have incorrect percentage (1%)

code example:

.App {
  font-family: sans-serif;
  text-align: center;
  opacity: 50%;
}


## The current behavior
Opacity will change from any percentage value to 1% in app build version.

## The expected behavior
Opacity will stay the same percentage in build version.
",Bug
https://github.com/facebook/react/issues/19781,19781,Relax eslint-plugin-react-hooks for __DEV__ conditional hooks,[],closed,FALSE,,5,2020-09-06T20:29:09Z,2021-03-25T12:42:31Z,2021-03-24T19:05:28Z,NONE,completed,,"I think the usage of

```
if (__DEV__) {
  useXXX()
}
```

should not trigger the ESLint rule for hooks. While it is a condition, the value of `__DEV__` can not change during the runtime of the app.

Currently I disable the rule on a per-line basis but I wonder if this pattern could be excluded from the the rules?",Support
https://github.com/facebook/react/issues/19782,19782,Bug: onDragStart make fired onDragEnter onDragLeave with bad closure !,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2020-09-07T04:14:54Z,2020-09-07T06:38:03Z,2020-09-07T06:38:03Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:i tray last and beta
here guys is this a bug ? when `onDragStart` fired, it also fired random `onDragEnter` AND `onDragLeave` scope.
Try drag a elements and look consoleLog the CLOSURE  in the demo plz
Link to code example:
https://codesandbox.io/s/admiring-paper-6mlwe?file=/src/App.js

## The current behavior
onDragEnter should fired once when onDragStart but with the correct `CLOSURE`

## The expected behavior
",Support
https://github.com/facebook/react/issues/19799,19799,Bug: renderToString renders srcSet instead of srcset,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,FALSE,,5,2020-09-09T14:13:30Z,2022-08-18T15:24:38Z,2020-09-09T14:52:31Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.12.0

## Steps To Reproduce

1. Use `renderToString` to render `<source>` element with `srcset` attribute

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-dom-camelcase-bug-1rnxt

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
`srcSet` isn't transformed to `srcset`

## The expected behavior
`srcSet` becomes `srcset`",Support
https://github.com/facebook/react/issues/19811,19811,Bug: use lodash.isEqual to compare react elemet can cause infinite loop,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,5,2020-09-11T07:06:05Z,2022-08-08T07:52:37Z,2020-09-11T09:22:45Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: v16.13.1

## Steps To Reproduce

1.Use lodash.isEqual to compare two object, some of their key`s value are react element
2.Causing inifite loop in dev
![bug](https://user-images.githubusercontent.com/38848201/92850547-2202e500-f41f-11ea-989e-43e20072c063.png)

Howerver when I use [fast-deep-equal](https://github.com/epoberezkin/fast-deep-equal) React-specific isEqual, it won`t cause this infinite loop.

![Screenshot from 2020-09-11 11-14-37](https://user-images.githubusercontent.com/38848201/92851375-119f3a00-f420-11ea-9d17-423ba6a5d652.png)

Since I find out React would add a `_owner` property on dev, is my problem related to this?
![Screenshot from 2020-09-11 15-02-10](https://user-images.githubusercontent.com/38848201/92879678-d14fb400-f43f-11ea-83f0-abea56b39ca3.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Bug
https://github.com/facebook/react/issues/19817,19817,Bug: Glitchy behaviour when rendering/setState in an KE,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-09-11T13:39:35Z,2020-09-11T13:40:22Z,2020-09-11T13:40:22Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/19828,19828,Bug: A menu item in tutorial doesn't get highlighted on click,[],closed,FALSE,,2,2020-09-14T00:25:59Z,2020-09-14T16:08:40Z,2020-09-14T08:59:24Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
Hi!

I've been working my way through your marvelous [tutorial](https://reactjs.org/tutorial/tutorial.html) when I've noticed that once you click on `Overview > Inspecting the Starter Code` in menu, the element doesn't get highlighted. It's because you use `<h3 id=""inspecting-the-starter-code"">...</h3>` instead of `<h2 id=""inspecting-the-starter-code"">...</h2>` in your markup. This should be a subheader, not header.

React version: Doesn't apply.
Browser: Firefox Developer Edition 81.0b9 (64-bit).

## Steps To Reproduce

1. Go to https://reactjs.org/tutorial/tutorial.html.
2. Click on `Overview > Inspecting the Starter Code` menu item.



<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: doesn't apply.

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The `Overview > Inspecting the Starter Code` menu element doesn't get highlighted on click.

## The expected behavior
The `Overview > Inspecting the Starter Code` element should get highlighted on click.",Bug
https://github.com/facebook/react/issues/19841,19841,Bug: React 17.0.0-rc.1 checkboxes and radio groups sometimes fire onChange incorrectly,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,19,2020-09-16T00:29:08Z,2020-09-19T23:28:56Z,2020-09-18T16:59:37Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.0-rc.1

## Steps To Reproduce

1. Open https://9sf7d.csb.app/. The issue seems most easily reproducible in iOS Safari, although we were also able to reproduce in Firefox on macOS.
2. Quickly tap or click one checkbox or radio followed by another one.
3. Notice that sometimes the first checkbox is unchecked rather than the second checkbox you tapped on becoming checked. For radios, the first radio stays selected rather than switching to the radio you tapped on.

Link to code example: https://codesandbox.io/s/optimistic-sound-9sf7d?file=/src/App.js

## The current behavior

There appears to be some sort of race condition where tapping or clicking on a controlled `<input type=""checkbox"">` or `<input type=""radio"">` quickly after clicking on a previous input does not fire `onChange` on the correct element.  As far as I can tell, `onChange` is being fired on the second checkbox rather than the first. It appears to be a timing issue - if you wait long enough between taps, the events are fired on the correct elements. This also appears to only reproduce in React 17.0.0-rc.1, not 17.0.0-rc.0 or React 16 (you can verify by changing the versions in Code Sandbox).

## The expected behavior

The `onChange` event should fire on the correct element, and state should update to check or uncheck the checkbox or radio you tapped, not some other element.
",Bug
https://github.com/facebook/react/issues/19842,19842,Bug: Super gets strikethrought in react ,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-09-16T08:48:58Z,2020-09-16T15:23:22Z,2020-09-16T15:23:22Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:16.13.1
 I was wriitng code like this; 




import React, { Component } from ""react"";
import { Message } from ""./Message"";
import ActionButton from ""./ActionButton"";

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 0
    };
  }
}



But "" super(props) "" keyword get strikethrough automatically. I don't know why?

",Other
https://github.com/facebook/react/issues/19861,19861,"Error: ""child is undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-09-18T15:28:11Z,2020-09-19T14:21:28Z,2020-09-19T14:21:28Z,NONE,completed,,"Hi! I was developing a next.js app, then I open the dev tools to see the state of some component, and the react dev tools give this error, after a page refresh all when back to normal, I don't know if this is a bug caused by me or is something related to the dev tools itself, so I prefer to report it, if this my fault I'm very sorry for the trouble!

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.8.2-fed4ae024

Component stack: List@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:20924:30
div
AutoSizer@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:2786:19
div
div
Tree_Tree@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26368:45
div
div
InspectedElementContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26848:18
OwnersListContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:25520:18
SettingsModalContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:26139:18
Components_Components@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30926:50
ErrorBoundary@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27172:33
PortaledContent@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:27303:27
div
div
ProfilerContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:30463:18
TreeContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:22538:18
SettingsContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:23040:22
ModalDialogContextController@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:28328:18
DevTools_DevTools@moz-extension://e8970055-c8eb-4403-952e-40ddc0e5c62a/build/main.js:33797:16",Other
https://github.com/facebook/react/issues/19866,19866,Bug(17.0.0-rc.1): useEffect cleanup functions not running in the same order as effect functions ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2020-09-19T12:11:43Z,2020-09-21T12:17:10Z,2020-09-21T03:09:02Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.0-rc.1

## Steps To Reproduce

```jsx
export default function App() {
  const [counter, setCounter] = useState(1);
  return (
    <div className=""App"">
      <h1>{counter}</h1>
      <p>
        <button onClick={() => setCounter((c) => c + 1)}>button</button>
      </p>
      <Foo name=""1"" />
      <Foo name=""2"" />
      {counter % 2 ? <Foo name=""3"" /> : null}
    </div>
  );
}

const Foo = ({ name }) => {
  useEffect(() => {
    console.log(""effect"", name);
    return () => {
      console.log(""cleanup"", name);
    };
  });
  return <p>I am foo</p>;
};
```

Run above code and click the ""button"" button, then check console log.

Link to code example: https://codesandbox.io/s/react17-useeffect-repro-s4hop

## The current behavior

```
effect 1 
effect 2 
effect 3 
cleanup 3 
cleanup 1 
cleanup 2 
effect 1 
effect 2 
```

## The expected behavior

```
effect 1 
effect 2 
effect 3 
cleanup 1 
cleanup 2 
cleanup 3 
effect 1 
effect 2 
```

## Description

[The blog post for React 17 RC](https://reactjs.org/blog/2020/08/10/react-v17-rc.html) says:

> Additionally, React 17 executes the cleanup functions in the same order as the effects, according to their position in the tree. Previously, this order was occasionally different.

However, as shown by the above example, cleanup functions do not run in the same order as effect functions. Seemingly, cleanup functions for unmounting components run before other ones.",Other
https://github.com/facebook/react/issues/19927,19927,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,5,2020-09-30T02:34:29Z,2021-05-25T18:48:34Z,2021-05-25T18:48:34Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Open React Devtool
2. Select the Component tab
3. Got below error

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.8.2-fed4ae024

Call stack: at Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19359:35)
    at Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19376:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26594:18
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21229:18)
    at li (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11802:76)
    at ki (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:11793:10)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14433:86)
    at bk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13779:11)
    at ak (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13768:5)
    at Sj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13750:7)

Component stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20924:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:2786:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26368:45)
    at div
    at div
    at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26848:23)
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25520:23)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26139:23)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30926:50)
    at ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27172:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:27303:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30463:23)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22538:23)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23040:27)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28328:23)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33797:21)",Other
https://github.com/facebook/react/issues/19940,19940,Bug: eslint-plugin-react-hooks (4.1.2) - The prop value with an expression type of ChainExpression could not be resolved,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,13,2020-10-01T09:24:59Z,2021-08-11T09:05:59Z,2020-10-09T17:55:42Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: ^16.10.2

## Steps To Reproduce

1. Install ``eslint-plugin-react-hooks@4.1.2`` 
2. Run ``yarn eslint src --ext=js,jsx,ts,tsx`` 

Related issue: https://github.com/facebook/react/issues/19810#issuecomment-698470876

## The current behavior

The linter is showing the following message:

```
The prop value with an expression type of ChainExpression could not be resolved. Please file issue to get this fixed immediately.
```

It started to appear on ``eslint-plugin-react-hooks@4.1.2`` 

## The expected behavior

Do not show the message
",Other
https://github.com/facebook/react/issues/19947,19947,Suggested code cleanup: Update all old https://facebook.github.io and https://github.com/facebookincubator/create-react-app links,[],closed,FALSE,,7,2020-10-02T19:52:07Z,2020-10-09T04:47:05Z,2020-10-09T04:46:08Z,CONTRIBUTOR,completed,sktguha,"So I suggest replacing the links to https://facebook.github.io and https://github.com/facebookincubator/create-react-app with the correct updated links. 
Yes I understand that redirects are setup properly, so there is no broken links but still it is much cleaner if they had the updated links. For example seeing the old link, a person might go to https://github.com/facebookincubator to find some other important projects there, but of course the important projects like flow type checker etc, are at https://github.com/facebook instead

I think atleast for some places like Readme(these old links are there in some Readme files) it should definitely be done, if not all places
If so, I **want to volunteer** for this effort. Please assign this issue to me in that case

Here is a search for these two links in the codebase: 
https://github.com/facebook/react/search?q=https%3A%2F%2Fgithub.com%2Ffacebookincubator%2Fcreate-react-app
https://github.com/facebook/react/search?q=%22facebook.github.io%22",Other
https://github.com/facebook/react/issues/19989,19989,Bug: Keydown event is taking 500ms and the same function via onClick take 50ms,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,5,2020-10-09T10:46:27Z,2020-11-07T14:38:39Z,2020-11-07T14:38:39Z,NONE,completed,,"I am trying to create a keyboard shortcut for my react-redux application. The keydown function takes 500 ms and if I do the same via the onClick function it takes 50ms. I have tried the same by creating a production version but no good results.

A hack I tested was to call an onClick event inside the keydown function which take lesser time than the original function. I also tried using Chrome Memory Profiler to see that's wrong. But no luck.

Can anyone suggest any solution to debug this problem?

React version: 16.13

",Other
https://github.com/facebook/react/issues/20008,20008,How Fetch the particular data from the online API in react-native,[],closed,FALSE,,1,2020-10-13T13:14:11Z,2020-10-13T14:18:12Z,2020-10-13T14:18:12Z,NONE,completed,,"I Want to Fetch only Timings (data[0].timings) from this api: [http://api.aladhan.com/v1/calendarByAddress?address=%20karachi,%20pakistan&school=0&method=1&date=13-10-2020&month=10&year=2020](url):
`{""code"":200,""status"":""OK"",""data"":[{""timings"":{""Fajr"":""05:08 (PKT)"",""Sunrise"":""06:24 (PKT)"",""Dhuhr"":""12:22 (PKT)"",""Asr"":""15:46 (PKT)"",""Sunset"":""18:19 (PKT)"",""Maghrib"":""18:19 (PKT)"",""Isha"":""19:34 (PKT)"",""Imsak"":""04:58 (PKT)"",""Midnight"":""00:21 (PKT)""},""date"":{""readable"":""01 Oct 2020"",""timestamp"":""1601524861"",""gregorian"":{""date"":""01-10-2020"",""format"":""DD-MM-YYYY"",""day"":""01"",""weekday"":{""en"":""Thursday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""13-02-1442"",""format"":""DD-MM-YYYY"",""day"":""13"",""weekday"":{""en"":""Al Khamees"",""ar"":""\u0627\u0644\u062e\u0645\u064a\u0633""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:09 (PKT)"",""Sunrise"":""06:24 (PKT)"",""Dhuhr"":""12:21 (PKT)"",""Asr"":""15:45 (PKT)"",""Sunset"":""18:18 (PKT)"",""Maghrib"":""18:18 (PKT)"",""Isha"":""19:33 (PKT)"",""Imsak"":""04:59 (PKT)"",""Midnight"":""00:21 (PKT)""},""date"":{""readable"":""02 Oct 2020"",""timestamp"":""1601611261"",""gregorian"":{""date"":""02-10-2020"",""format"":""DD-MM-YYYY"",""day"":""02"",""weekday"":{""en"":""Friday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""14-02-1442"",""format"":""DD-MM-YYYY"",""day"":""14"",""weekday"":{""en"":""Al Juma'a"",""ar"":""\u0627\u0644\u062c\u0645\u0639\u0629""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:09 (PKT)"",""Sunrise"":""06:25 (PKT)"",""Dhuhr"":""12:21 (PKT)"",""Asr"":""15:45 (PKT)"",""Sunset"":""18:17 (PKT)"",""Maghrib"":""18:17 (PKT)"",""Isha"":""19:32 (PKT)"",""Imsak"":""04:59 (PKT)"",""Midnight"":""00:21 (PKT)""},""date"":{""readable"":""03 Oct 2020"",""timestamp"":""1601697661"",""gregorian"":{""date"":""03-10-2020"",""format"":""DD-MM-YYYY"",""day"":""03"",""weekday"":{""en"":""Saturday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""15-02-1442"",""format"":""DD-MM-YYYY"",""day"":""15"",""weekday"":{""en"":""Al Sabt"",""ar"":""\u0627\u0644\u0633\u0628\u062a""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:10 (PKT)"",""Sunrise"":""06:25 (PKT)"",""Dhuhr"":""12:21 (PKT)"",""Asr"":""15:44 (PKT)"",""Sunset"":""18:16 (PKT)"",""Maghrib"":""18:16 (PKT)"",""Isha"":""19:31 (PKT)"",""Imsak"":""05:00 (PKT)"",""Midnight"":""00:20 (PKT)""},""date"":{""readable"":""04 Oct 2020"",""timestamp"":""1601784061"",""gregorian"":{""date"":""04-10-2020"",""format"":""DD-MM-YYYY"",""day"":""04"",""weekday"":{""en"":""Sunday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""16-02-1442"",""format"":""DD-MM-YYYY"",""day"":""16"",""weekday"":{""en"":""Al Ahad"",""ar"":""\u0627\u0644\u0627\u062d\u062f""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:10 (PKT)"",""Sunrise"":""06:26 (PKT)"",""Dhuhr"":""12:20 (PKT)"",""Asr"":""15:44 (PKT)"",""Sunset"":""18:15 (PKT)"",""Maghrib"":""18:15 (PKT)"",""Isha"":""19:30 (PKT)"",""Imsak"":""05:00 (PKT)"",""Midnight"":""00:20 (PKT)""},""date"":{""readable"":""05 Oct 2020"",""timestamp"":""1601870461"",""gregorian"":{""date"":""05-10-2020"",""format"":""DD-MM-YYYY"",""day"":""05"",""weekday"":{""en"":""Monday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""17-02-1442"",""format"":""DD-MM-YYYY"",""day"":""17"",""weekday"":{""en"":""Al Athnayn"",""ar"":""\u0627\u0644\u0627\u062b\u0646\u064a\u0646""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:10 (PKT)"",""Sunrise"":""06:26 (PKT)"",""Dhuhr"":""12:20 (PKT)"",""Asr"":""15:43 (PKT)"",""Sunset"":""18:14 (PKT)"",""Maghrib"":""18:14 (PKT)"",""Isha"":""19:29 (PKT)"",""Imsak"":""05:00 (PKT)"",""Midnight"":""00:20 (PKT)""},""date"":{""readable"":""06 Oct 2020"",""timestamp"":""1601956861"",""gregorian"":{""date"":""06-10-2020"",""format"":""DD-MM-YYYY"",""day"":""06"",""weekday"":{""en"":""Tuesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""18-02-1442"",""format"":""DD-MM-YYYY"",""day"":""18"",""weekday"":{""en"":""Al Thalaata"",""ar"":""\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:11 (PKT)"",""Sunrise"":""06:27 (PKT)"",""Dhuhr"":""12:20 (PKT)"",""Asr"":""15:42 (PKT)"",""Sunset"":""18:13 (PKT)"",""Maghrib"":""18:13 (PKT)"",""Isha"":""19:28 (PKT)"",""Imsak"":""05:01 (PKT)"",""Midnight"":""00:20 (PKT)""},""date"":{""readable"":""07 Oct 2020"",""timestamp"":""1602043261"",""gregorian"":{""date"":""07-10-2020"",""format"":""DD-MM-YYYY"",""day"":""07"",""weekday"":{""en"":""Wednesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""19-02-1442"",""format"":""DD-MM-YYYY"",""day"":""19"",""weekday"":{""en"":""Al Arba'a"",""ar"":""\u0627\u0644\u0627\u0631\u0628\u0639\u0627\u0621""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:11 (PKT)"",""Sunrise"":""06:27 (PKT)"",""Dhuhr"":""12:19 (PKT)"",""Asr"":""15:42 (PKT)"",""Sunset"":""18:12 (PKT)"",""Maghrib"":""18:12 (PKT)"",""Isha"":""19:27 (PKT)"",""Imsak"":""05:01 (PKT)"",""Midnight"":""00:19 (PKT)""},""date"":{""readable"":""08 Oct 2020"",""timestamp"":""1602129661"",""gregorian"":{""date"":""08-10-2020"",""format"":""DD-MM-YYYY"",""day"":""08"",""weekday"":{""en"":""Thursday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""20-02-1442"",""format"":""DD-MM-YYYY"",""day"":""20"",""weekday"":{""en"":""Al Khamees"",""ar"":""\u0627\u0644\u062e\u0645\u064a\u0633""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:12 (PKT)"",""Sunrise"":""06:27 (PKT)"",""Dhuhr"":""12:19 (PKT)"",""Asr"":""15:41 (PKT)"",""Sunset"":""18:11 (PKT)"",""Maghrib"":""18:11 (PKT)"",""Isha"":""19:26 (PKT)"",""Imsak"":""05:02 (PKT)"",""Midnight"":""00:19 (PKT)""},""date"":{""readable"":""09 Oct 2020"",""timestamp"":""1602216061"",""gregorian"":{""date"":""09-10-2020"",""format"":""DD-MM-YYYY"",""day"":""09"",""weekday"":{""en"":""Friday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""21-02-1442"",""format"":""DD-MM-YYYY"",""day"":""21"",""weekday"":{""en"":""Al Juma'a"",""ar"":""\u0627\u0644\u062c\u0645\u0639\u0629""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:12 (PKT)"",""Sunrise"":""06:28 (PKT)"",""Dhuhr"":""12:19 (PKT)"",""Asr"":""15:40 (PKT)"",""Sunset"":""18:10 (PKT)"",""Maghrib"":""18:10 (PKT)"",""Isha"":""19:25 (PKT)"",""Imsak"":""05:02 (PKT)"",""Midnight"":""00:19 (PKT)""},""date"":{""readable"":""10 Oct 2020"",""timestamp"":""1602302461"",""gregorian"":{""date"":""10-10-2020"",""format"":""DD-MM-YYYY"",""day"":""10"",""weekday"":{""en"":""Saturday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""22-02-1442"",""format"":""DD-MM-YYYY"",""day"":""22"",""weekday"":{""en"":""Al Sabt"",""ar"":""\u0627\u0644\u0633\u0628\u062a""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:12 (PKT)"",""Sunrise"":""06:28 (PKT)"",""Dhuhr"":""12:19 (PKT)"",""Asr"":""15:40 (PKT)"",""Sunset"":""18:09 (PKT)"",""Maghrib"":""18:09 (PKT)"",""Isha"":""19:25 (PKT)"",""Imsak"":""05:02 (PKT)"",""Midnight"":""00:18 (PKT)""},""date"":{""readable"":""11 Oct 2020"",""timestamp"":""1602388861"",""gregorian"":{""date"":""11-10-2020"",""format"":""DD-MM-YYYY"",""day"":""11"",""weekday"":{""en"":""Sunday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""23-02-1442"",""format"":""DD-MM-YYYY"",""day"":""23"",""weekday"":{""en"":""Al Ahad"",""ar"":""\u0627\u0644\u0627\u062d\u062f""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:13 (PKT)"",""Sunrise"":""06:29 (PKT)"",""Dhuhr"":""12:18 (PKT)"",""Asr"":""15:39 (PKT)"",""Sunset"":""18:08 (PKT)"",""Maghrib"":""18:08 (PKT)"",""Isha"":""19:24 (PKT)"",""Imsak"":""05:03 (PKT)"",""Midnight"":""00:18 (PKT)""},""date"":{""readable"":""12 Oct 2020"",""timestamp"":""1602475261"",""gregorian"":{""date"":""12-10-2020"",""format"":""DD-MM-YYYY"",""day"":""12"",""weekday"":{""en"":""Monday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""24-02-1442"",""format"":""DD-MM-YYYY"",""day"":""24"",""weekday"":{""en"":""Al Athnayn"",""ar"":""\u0627\u0644\u0627\u062b\u0646\u064a\u0646""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:13 (PKT)"",""Sunrise"":""06:29 (PKT)"",""Dhuhr"":""12:18 (PKT)"",""Asr"":""15:39 (PKT)"",""Sunset"":""18:07 (PKT)"",""Maghrib"":""18:07 (PKT)"",""Isha"":""19:23 (PKT)"",""Imsak"":""05:03 (PKT)"",""Midnight"":""00:18 (PKT)""},""date"":{""readable"":""13 Oct 2020"",""timestamp"":""1602561661"",""gregorian"":{""date"":""13-10-2020"",""format"":""DD-MM-YYYY"",""day"":""13"",""weekday"":{""en"":""Tuesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""25-02-1442"",""format"":""DD-MM-YYYY"",""day"":""25"",""weekday"":{""en"":""Al Thalaata"",""ar"":""\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:14 (PKT)"",""Sunrise"":""06:30 (PKT)"",""Dhuhr"":""12:18 (PKT)"",""Asr"":""15:38 (PKT)"",""Sunset"":""18:06 (PKT)"",""Maghrib"":""18:06 (PKT)"",""Isha"":""19:22 (PKT)"",""Imsak"":""05:04 (PKT)"",""Midnight"":""00:18 (PKT)""},""date"":{""readable"":""14 Oct 2020"",""timestamp"":""1602648061"",""gregorian"":{""date"":""14-10-2020"",""format"":""DD-MM-YYYY"",""day"":""14"",""weekday"":{""en"":""Wednesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""26-02-1442"",""format"":""DD-MM-YYYY"",""day"":""26"",""weekday"":{""en"":""Al Arba'a"",""ar"":""\u0627\u0644\u0627\u0631\u0628\u0639\u0627\u0621""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:14 (PKT)"",""Sunrise"":""06:30 (PKT)"",""Dhuhr"":""12:18 (PKT)"",""Asr"":""15:37 (PKT)"",""Sunset"":""18:05 (PKT)"",""Maghrib"":""18:05 (PKT)"",""Isha""
:""19:21 (PKT)"",""Imsak"":""05:04 (PKT)"",""Midnight"":""00:18 (PKT)""},""date"":{""readable"":""15 Oct 2020"",""timestamp"":""1602734461"",""gregorian"":{""date"":""15-10-2020"",""format"":""DD-MM-YYYY"",""day"":""15"",""weekday"":{""en"":""Thursday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""27-02-1442"",""format"":""DD-MM-YYYY"",""day"":""27"",""weekday"":{""en"":""Al Khamees"",""ar"":""\u0627\u0644\u062e\u0645\u064a\u0633""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:15 (PKT)"",""Sunrise"":""06:31 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:37 (PKT)"",""Sunset"":""18:04 (PKT)"",""Maghrib"":""18:04 (PKT)"",""Isha"":""19:20 (PKT)"",""Imsak"":""05:05 (PKT)"",""Midnight"":""00:17 (PKT)""},""date"":{""readable"":""16 Oct 2020"",""timestamp"":""1602820861"",""gregorian"":{""date"":""16-10-2020"",""format"":""DD-MM-YYYY"",""day"":""16"",""weekday"":{""en"":""Friday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""28-02-1442"",""format"":""DD-MM-YYYY"",""day"":""28"",""weekday"":{""en"":""Al Juma'a"",""ar"":""\u0627\u0644\u062c\u0645\u0639\u0629""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:15 (PKT)"",""Sunrise"":""06:31 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:36 (PKT)"",""Sunset"":""18:03 (PKT)"",""Maghrib"":""18:03 (PKT)"",""Isha"":""19:19 (PKT)"",""Imsak"":""05:05 (PKT)"",""Midnight"":""00:17 (PKT)""},""date"":{""readable"":""17 Oct 2020"",""timestamp"":""1602907261"",""gregorian"":{""date"":""17-10-2020"",""format"":""DD-MM-YYYY"",""day"":""17"",""weekday"":{""en"":""Saturday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""29-02-1442"",""format"":""DD-MM-YYYY"",""day"":""29"",""weekday"":{""en"":""Al Sabt"",""ar"":""\u0627\u0644\u0633\u0628\u062a""},""month"":{""number"":2,""en"":""\u1e62afar"",""ar"":""\u0635\u064e\u0641\u064e\u0631""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:15 (PKT)"",""Sunrise"":""06:32 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:36 (PKT)"",""Sunset"":""18:02 (PKT)"",""Maghrib"":""18:02 (PKT)"",""Isha"":""19:18 (PKT)"",""Imsak"":""05:05 (PKT)"",""Midnight"":""00:17 (PKT)""},""date"":{""readable"":""18 Oct 2020"",""timestamp"":""1602993661"",""gregorian"":{""date"":""18-10-2020"",""format"":""DD-MM-YYYY"",""day"":""18"",""weekday"":{""en"":""Sunday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""01-03-1442"",""format"":""DD-MM-YYYY"",""day"":""01"",""weekday"":{""en"":""Al Ahad"",""ar"":""\u0627\u0644\u0627\u062d\u062f""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:16 (PKT)"",""Sunrise"":""06:32 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:35 (PKT)"",""Sunset"":""18:01 (PKT)"",""Maghrib"":""18:01 (PKT)"",""Isha"":""19:18 (PKT)"",""Imsak"":""05:06 (PKT)"",""Midnight"":""00:17 (PKT)""},""date"":{""readable"":""19 Oct 2020"",""timestamp"":""1603080061"",""gregorian"":{""date"":""19-10-2020"",""format"":""DD-MM-YYYY"",""day"":""19"",""weekday"":{""en"":""Monday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""02-03-1442"",""format"":""DD-MM-YYYY"",""day"":""02"",""weekday"":{""en"":""Al Athnayn"",""ar"":""\u0627\u0644\u0627\u062b\u0646\u064a\u0646""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:16 (PKT)"",""Sunrise"":""06:33 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:34 (PKT)"",""Sunset"":""18:00 (PKT)"",""Maghrib"":""18:00 (PKT)"",""Isha"":""19:17 (PKT)"",""Imsak"":""05:06 (PKT)"",""Midnight"":""00:17 (PKT)""},""date"":{""readable"":""20 Oct 2020"",""timestamp"":""1603166461"",""gregorian"":{""date"":""20-10-2020"",""format"":""DD-MM-YYYY"",""day"":""20"",""weekday"":{""en"":""Tuesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""03-03-1442"",""format"":""DD-MM-YYYY"",""day"":""03"",""weekday"":{""en"":""Al Thalaata"",""ar"":""\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:17 (PKT)"",""Sunrise"":""06:33 (PKT)"",""Dhuhr"":""12:17 (PKT)"",""Asr"":""15:34 (PKT)"",""Sunset"":""18:00 (PKT)"",""Maghrib"":""18:00 (PKT)"",""Isha"":""19:16 (PKT)"",""Imsak"":""05:07 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""21 Oct 2020"",""timestamp"":""1603252861"",""gregorian"":{""date"":""21-10-2020"",""format"":""DD-MM-YYYY"",""day"":""21"",""weekday"":{""en"":""Wednesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""04-03-1442"",""format"":""DD-MM-YYYY"",""day"":""04"",""weekday"":{""en"":""Al Arba'a"",""ar"":""\u0627\u0644\u0627\u0631\u0628\u0639\u0627\u0621""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:17 (PKT)"",""Sunrise"":""06:34 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:33 (PKT)"",""Sunset"":""17:59 (PKT)"",""Maghrib"":""17:59 (PKT)"",""Isha"":""19:15 (PKT)"",""Imsak"":""05:07 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""22 Oct 2020"",""timestamp"":""1603339261"",""gregorian"":{""date"":""22-10-2020"",""format"":""DD-MM-YYYY"",""day"":""22"",""weekday"":{""en"":""Thursday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""05-03-1442"",""format"":""DD-MM-YYYY"",""day"":""05"",""weekday"":{""en"":""Al Khamees"",""ar"":""\u0627\u0644\u062e\u0645\u064a\u0633""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:18 (PKT)"",""Sunrise"":""06:34 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:33 (PKT)"",""Sunset"":""17:58 (PKT)"",""Maghrib"":""17:58 (PKT)"",""Isha"":""19:15 (PKT)"",""Imsak"":""05:08 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""23 Oct 2020"",""timestamp"":""1603425661"",""gregorian"":{""date"":""23-10-2020"",""format"":""DD-MM-YYYY"",""day"":""23"",""weekday"":{""en"":""Friday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""06-03-1442"",""format"":""DD-MM-YYYY"",""day"":""06"",""weekday"":{""en"":""Al Juma'a"",""ar"":""\u0627\u0644\u062c\u0645\u0639\u0629""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:18 (PKT)"",""Sunrise"":""06:35 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:32 (PKT)"",""Sunset"":""17:57 (PKT)"",""Maghrib"":""17:57 (PKT)"",""Isha"":""19:14 (PKT)"",""Imsak"":""05:08 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""24 Oct 2020"",""timestamp"":""1603512061"",""gregorian"":{""date"":""24-10-2020"",""format"":""DD-MM-YYYY"",""day"":""24"",""weekday"":{""en"":""Saturday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""07-03-1442"",""format"":""DD-MM-YYYY"",""day"":""07"",""weekday"":{""en"":""Al Sabt"",""ar"":""\u0627\u0644\u0633\u0628\u062a""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:19 (PKT)"",""Sunrise"":""06:35 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:32 (PKT)"",""Sunset"":""17:56 (PKT)"",""Maghrib"":""17:56 (PKT)"",""Isha"":""19:13 (PKT)"",""Imsak"":""05:09 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""25 Oct 2020"",""timestamp"":""1603594861"",""gregorian"":{""date"":""25-10-2020"",""format"":""DD-MM-YYYY"",""day"":""25"",""weekday"":{""en"":""Sunday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""08-03-1442"",""format"":""DD-MM-YYYY"",""day"":""08"",""weekday"":{""en"":""Al Ahad"",""ar"":""\u0627\u0644\u0627\u062d\u062f""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:19 (PKT)"",""Sunrise"":""06:36 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:31 (PKT)"",""Sunset"":""17:56 (PKT)"",""Maghrib"":""17:56 (PKT)"",""Isha"":""19:13 (PKT)"",""Imsak"":""05:09 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""26 Oct 2020"",""timestamp"":""1603681261"",""gregorian"":{""date"":""26-10-2020"",""format"":""DD-MM-YYYY"",""day"":""26"",""weekday"":{""en"":""Monday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""09-03-1442"",""format"":""DD-MM-YYYY"",""day"":""09"",""weekday"":{""en"":""Al Athnayn"",""ar"":""\u0627\u0644\u0627\u062b\u0646\u064a\u0646""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:19 (PKT)"",""Sunrise"":""06:36 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:31 (PKT)"",""Sunset"":""17:55 (PKT)"",""Maghrib"":""17:55 (PKT)"",""Isha"":""19:12 (PKT)"",""Imsak"":""05:09 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""27 Oct 2020"",""timestamp"":""1603767661"",""gregorian"":{""date"":""27-10-2020"",""format"":""DD-MM-YYYY"",""day"":""27"",""weekday"":{""en"":""Tuesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""10-03-1442"",""format"":""DD-MM-YYYY"",""day"":""10"",""weekday"":{""en"":""Al Thalaata"",""ar"":""\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},""holidays"":[]}},""meta"":{""latitude"":24.8607343,""longitude"":67.0011364,""timezone"":""Asia\/Karachi"",""method"":{""id"":1,""name"":""University of Islamic Sciences, Karachi"",""params"":{""Fajr"":18,""Isha"":18}},""latitudeAdjustmentMethod"":""ANGLE_BASED"",""midnightMode"":""STANDARD"",""school"":""STANDARD"",""offset"":{""Imsak"":0,""Fajr"":0,""Sunrise"":0,""Dhuhr"":0,""Asr"":0,""Maghrib"":0,""Sunset"":0,""Isha"":0,""Midnight"":0}}},{""timings"":{""Fajr"":""05:20 (PKT)"",""Sunrise"":""06:37 (PKT)"",""Dhuhr"":""12:16 (PKT)"",""Asr"":""15:30 (PKT)"",""Sunset"":""17:54 (PKT)"",""Maghrib"":""17:54 (PKT)"",""Isha"":""19:11 (PKT)"",""Imsak"":""05:10 (PKT)"",""Midnight"":""00:16 (PKT)""},""date"":{""readable"":""28 Oct 2020"",""timestamp"":""1603854061"",""gregorian"":{""date"":""28-10-2020"",""format"":""DD-MM-YYYY"",""day"":""28"",""weekday"":{""en"":""Wednesday""},""month"":{""number"":10,""en"":""October""},""year"":""2020"",""designation"":{""abbreviated"":""AD"",""expanded"":""Anno Domini""}},""hijri"":{""date"":""11-03-1442"",""format"":""DD-MM-YYYY"",""day"":""11"",""weekday"":{""en"":""Al Arba'a"",""ar"":""\u0627\u0644\u0627\u0631\u0628\u0639\u0627\u0621""},""month"":{""number"":3,""en"":""Rab\u012b\u02bf al-awwal"",""ar"":""\u0631\u064e\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0651\u0644""},""year"":""1442"",""designation"":{""abbreviated"":""AH"",""expanded"":""Anno Hegirae""},",Other
https://github.com/facebook/react/issues/20022,20022,Bug: useRef forget '()',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-10-14T14:58:34Z,2020-10-14T17:46:17Z,2020-10-14T17:46:17Z,CONTRIBUTOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/dazzling-heyrovsky-18u9w?file=/src/App.js
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
correct execution
## The expected behavior
not correct execution

should we do something, such as a warning?To remind us that we forgot about this Brackets",Support
https://github.com/facebook/react/issues/20047,20047,Clarify SSR expectations/contract,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,17,2020-10-17T10:31:37Z,2022-03-25T23:13:46Z,2022-03-25T23:13:46Z,CONTRIBUTOR,completed,,"I've been asked about the safety of a certain pattern and I'd like to clarify this with you (the React team). 

In my opinion - the actual SSRed output and the hydrating tree **do not have to match**. This is, of course, a weird space of things and one should understand how things work together to even think about it, but there is no technical aspect forbidding this now. Question is - is it safe to assume that such a ""use case"" will stay supported in the future. I believe it is because the only thing that is used as an input to the rehydration is the current HTML structure and the React team doesn't intend to ship any extra metadata in the SSRed output about the actual render tree that was used to render it.

This can be a little bit of a vague question - so let's take a look at an example. Emotion does 2 things on the server differently than on the client:
1. it does not use `React.forwardRef` (refs are useless on the server, so we don't see a need to grow the render tree rather significantly by using it)
2. we render `<style>` elements ""inline"", together with other elements. This is an example SSRed output:
```html
<div id=""react-root"">
  <style data-emotion-css=""bjcoli"">
    .css-bjcoli{color:green;}
  </style>
  <div class=""css-bjcoli"">
    <style data-emotion-css=""ihiui2"">
      .css-ihiui2{color:hotpink;}
    </style>
    <div class=""css-ihiui2"">
    </div>
    <div class=""css-ihiui2"">
    </div>
  </div>
</div>
```

On the client we:
- use `React.forwardRef` as it's important to do so
- we **move** `<style>` elements to the `<head>` **before** rehydration can even be called

This makes the HTML structure **identical** to what React sees during the first render so there is **no SSR mismatch**, even though initially there kinda is one.

We totally understand this is a gray area and trickery - question is: do u plan to make things like this break in the future? I totally would understand the answer being ""we can't guarantee that"", but at the same time it would be great if it would be accompanied by ""probably not, this is _safe_ to do and there are no plans to make this break now""

cc @eps1lon ",Other
https://github.com/facebook/react/issues/20050,20050,Feature Proposal: className can be an array of class names strings,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,4,2020-10-18T13:11:21Z,2021-07-06T23:13:40Z,2020-10-19T14:31:43Z,NONE,completed,,"### Description
The current `className` prop on any JSX element takes only a string, that is supposed to be the class name to add to the corresponding element. This prop expects a string which makes it very easy to attach a single class name to the element.

For example: 
```
<div className=""my-css-class-name""></div>
```

### Problem
The limitation I ran into while using className, is when I wanted to attach a couple classes to the same element, I naturally tried to do something like this:
```
<div className={""my-css-class-name"", ""my-other-css-class-name""}></div>
```
But unfortunately it didn't work, [I then realized that it's not possible with the current JSX specification](https://reactjs.org/docs/faq-styling.html#how-do-i-add-css-classes-to-components).

The proposed solution in the FAQ link I shared above suggests manually attaching the strings and add a space, or use another package called [""Classnames""](https://www.npmjs.com/package/classnames#usage-with-reactjs).

### Feature Proposal
I as a react user, expected naturally that I could provide multiple classes with JSX, so I think it can be useful for other developers, if the prop `className` can take an array of strings (classes) and does a simple `Array.join("" "")` in this case. So that developers won't have to join them manually or use the other package ""Classnames"". I believe this could be beneficial for the simple use case, and also for a more advanced use case like mine (using Material UI's `makeStyles`).

I would appreciate your thoughts on this suggestion. Furthermore, if discussion concludes that you agree to adopt such change, I would be more than happy to contribute it, as by chance I was looking at the beginner-friendly issues for contributors a couple days ago and couldn't find something (they're all assigned).",Other
https://github.com/facebook/react/issues/20054,20054,Bug: Suspense/fallback adds a style display: none !important and this doesn't get removed on IE 11,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,8,2020-10-19T14:30:45Z,2020-10-28T13:39:25Z,2020-10-28T13:39:14Z,NONE,completed,AbGrS,"  Suspense/fallback wraps the components with `display:none !important` initially and somehow this style doesn't get removed automatically even after the components loads into the DOM on IE 11. Works fine on chrome through. If I manually remove this from the dev tool, you can see it shows up.

Seems like this is re-introduced:
https://github.com/facebook/react/issues/14114

React version: 16.12.0

	
`<Suspense fallback={<CircularProgress />}>
			<Provider store={store}>
				<PersistGate loading={<div>Loading...</div>} persistor={persistor}>
					<Main />
				</PersistGate>
			</Provider>
		</Suspense>
`

![image](https://user-images.githubusercontent.com/17119296/96467074-2dc89f00-1248-11eb-8054-567d079a0665.png)


",Other
https://github.com/facebook/react/issues/20070,20070,"Bug: Property expression of JSXExpressionContainer expected node to be of a type [""Expression"",""JSXEmptyExpression""] but instead got undefined","[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,2,2020-10-21T11:05:26Z,2020-10-21T11:24:05Z,2020-10-21T11:24:05Z,NONE,completed,,"React version: 17.0.0
Next.js version: 9.5.5
TypeScript version: 4.0.3

## The current behavior

In a Next.js project using styled-jsx I get the following error across different components that create a `<style jsx>` tag to generate CSS selectors within template literals (or import such styles from a separate file):
```
Property expression of JSXExpressionContainer expected node to be of a type [""Expression"",""JSXEmptyExpression""] but instead got undefined
```
The error appears as soon as I update `react` and `react-dom` to 17.0.0, all other dependencies remain at the version they have been beforehand.

## The expected behavior

It renders the component as expected without any errors.",Other
https://github.com/facebook/react/issues/20077,20077,"Error: ""Commit tree already contains fiber 1. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-10-22T06:18:30Z,2021-04-28T20:31:09Z,2020-10-22T21:03:36Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Upgrade React & reactDom version to 17.0.0
2. Reloading specific page via profiler
3. Click a chart inside flamegraph chart
3. The page is working just fine but the profiler has stopped working

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.9.0-75726fadfd

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19503:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19436:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19957:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34003:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)
    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)
    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",Other
https://github.com/facebook/react/issues/20090,20090,"In StrictMode, the useState() initializer function is called twice, but one of the results is discarded","[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,56,2020-10-24T14:41:09Z,2022-03-30T18:10:42Z,2020-10-26T16:09:38Z,NONE,completed,,"React version: 17.0.1
React reconciler:  0.26.0 

## Steps To Reproduce

Link to code example: https://codesandbox.io/s/r3f-contact-shadow-forked-iggyv?file=/src/index.js:308-745

```jsx
let log = console.log

let id = 0
function Obj(node) {
  this.id = id++
  log('constructor', this.id)
  node.addEventListener('wheel', () => log(this.id, 'wheel'), false)
}

function App(props) {
  // The object is created twice, why does react do that, it's not documented
  const [obj] = useState(() => log('new object') || new Obj(document.body))
  return <div>{obj.id}</div>
}

ReactDOM.unstable_createRoot(document.getElementById('root')).render(<App />)
```

### old demo

https://codesandbox.io/s/r3f-contact-shadow-forked-e44m3?file=/src/index.js

This demo creates a local object which is supposed to live within the components lifecycle.
For some reason concurrent mode creates two versions of that object, but one is stuck in the view section. 
These controls aren't allowed to zoom, yet, when you give you mousewheel - it zooms. The control clearly receives the flag.

This does not happen in blocking mode and previous reconcilers (for instance react 16.4.x and reconcilers pre 0.26

Debugging in this is almost impossible as React swallows console.logs. Some users have found out that it indeed creates two branches of local state: https://twitter.com/belinburgh/status/1319990608010874883

The state object (orbit-controls) has side-effects, it creates events, but that is and should be of no consequence.",Support
https://github.com/facebook/react/issues/20109,20109,The components panel is blank unless I minify my React code,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-10-27T17:53:11Z,2020-11-07T14:39:00Z,2020-11-07T14:39:00Z,NONE,completed,dfenske,"Hello,

I am using NextJS to build an application. We have had this application running for a couple years now, but recently the dev tools have broken on our local build. 

When I run my node application locally, the Components panel is blank. If I minify my code and run the compiled code, I see components in the panel. Can you help me solve this bug? I see no related console errors and I can't find any other way to debug or understand what is causing this problem.
![image](https://user-images.githubusercontent.com/4571750/97341421-46d1e100-1842-11eb-8912-99fec17b6aa2.png)
![image](https://user-images.githubusercontent.com/4571750/97341654-94e6e480-1842-11eb-9968-d3ad3bc5a39d.png)

",Other
https://github.com/facebook/react/issues/20113,20113,Transpile JSX to namespace import in automatic runtime,[],closed,FALSE,,2,2020-10-28T03:10:20Z,2020-11-10T03:33:15Z,2020-11-10T00:13:28Z,CONTRIBUTOR,completed,,"As mentioned in the [blog post](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html), the current automatic JSX runtime transform transpiles the following code:

```js
<div height={10} />
```

To roughly:

```js
import {jsx as _jsx} from 'react/jsx-runtime'

_jsx('div', {height: 10})
```

Unfortunately, the bundling story for this kind of import from a CJS module like `'react/jsx-runtime'` isn't great, because Webpack needs to be conservative about inter-op. Webpack 4 ends up bundling it as something like this:

```js
Object(R.jsx)('div', {height: 10})
```

Webpack 5 does slightly better:

```js
(0, R.jsx)('div', {height: 10})
```

But these are both pretty unfortunate. The `jsx` family of functions never uses `this` so the context escape is unnecessary, but Webpack doesn't know that. This was [raised on Twitter here](https://twitter.com/dan_abramov/status/1306567501799661570).

However, this can actually be fixed by having the JSX transform create a namespace import instead of a named one. In other words, if it instead transpiled the above code to:

```js
import * as _JSXRuntime from 'react/jsx-runtime'

_JSXRuntime.jsx('div', {height: 10})
```

Webpack 4 and 5 will both bundle that code to something like:

```js
R.jsx('div', {height: 10})
```

Which is the desired output. It's smaller and more efficient than either of the alternatives.

(The only improvement from there would be to call `jsx` directly, but that isn't possible until the runtime is available as an ESM module and Webpack can inline and concatenate it. I won't get into that here, although it would be really nice. 🙂)

I know that this change would get made in the Babel repo rather than here, but I wanted to run it by the React team first. @gaearon and @lunaruan, do you see any reason not to make this change?",Other
https://github.com/facebook/react/issues/20122,20122,Bug: Fixtures - fiber-debugger is not working,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-10-29T05:13:11Z,2020-11-11T07:08:15Z,2020-11-11T07:08:15Z,NONE,completed,,"**Fixtures:** [Fiber-debugger](https://github.com/facebook/react/tree/master/fixtures/fiber-debugger) is not working

**Steps to reproduce**

- `npm run build` in React repo folder
- `npm i `

Installation fails

<img width=""1078"" alt=""Screenshot 2020-10-29 at 10 39 59 AM"" src=""https://user-images.githubusercontent.com/30519813/97528227-3604a500-19d3-11eb-9bd6-a5caced735b9.png"">

**Version**
Node Version - v12.16.1
`npm` version - 6.13.4

",Other
https://github.com/facebook/react/issues/20124,20124,Bug: 74894h4g4h,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-10-29T07:43:33Z,2020-10-29T07:43:53Z,2020-10-29T07:43:53Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.u8ufuhf
2.gehievbeb

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:ogiehigevevnk

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
ioego8ehghve

## The expected behavior
kfeuhiebeb @iQOO-00",Other
https://github.com/facebook/react/issues/20131,20131,Bug: Uncaught Error: Unable to find node on an unmounted component in react 17.0.1,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,16,2020-10-29T18:27:03Z,2022-02-08T20:32:12Z,2021-03-24T16:46:33Z,NONE,completed,,"Hi, I used react-sortable-tree package im my react project in component named Tree:

```
import React, { Component } from ""react"";
import axios from ""axios"";
import axios_config from ""./axios_config"";
import ""react-sortable-tree/style.css"";
import SortableTree, {
} from ""react-sortable-tree"";
class Tree extends Component {
  constructor(props) {
    super(props);
    this.state = {
      treeData: [],
    };
  }
  componentDidMount() {
    (async () => {
      axios_config.url = this.props.treeLink;
      axios_config.data = {};

      try {
        let result = await axios(axios_config);
        console.log(""response from server gotttt..."");
        console.log(result);
        if (result.data.done === true) {
          this.setState({
            treeData: result.data.tree,
            selectedNode: result.data.tree[0],
          });
          this.props.disableLoading();
        } else {
          console.log(result.err);
          this.props.disableLoading();
        }
      } catch (err) {
        console.log(err);
      }
    })();
  }
  render() {
    return (
      <SortableTree
        style={{ height: ""300px"" }}
        treeData={this.state.treeData}
        onChange={(treeData) => this.setState({ treeData })}
      />
    );
  }
}
```
when I use Tree component in my code it works pretty well in react 16.13.1, but fails and get this error is react 17.0.1:

`←→1 of 2 errors on the page
Error: Unable to find node on an unmounted component.
▶ 21 stack frames were collapsed.
(anonymous function)
src/components/utility/Tree.js:114
  111 | console.log(result);
  112 | if (result.data.done === true) {
  113 |   //console.log(result.data.tree);
> 114 |   this.setState({
      | ^  115 |     treeData: result.data.tree,
  116 |     selectedNode: result.data.tree[0],
  117 |   });
`
`react-dom.development.js:24281 Uncaught Error: Unable to find node on an unmounted component.
    at findHostInstanceWithWarning (react-dom.development.js:24281)
    at findDOMNode (react-dom.development.js:24804)
    at ScrollingComponent.componentDidMount (index.js:181)
    at commitLifeCycles (react-dom.development.js:20663)
    at commitLayoutEffects (react-dom.development.js:23426)
    at HTMLUnknownElement.callCallback (react-dom.development.js:3945)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:3994)
    at invokeGuardedCallback (react-dom.development.js:4056)
    at commitRootImpl (react-dom.development.js:23151)
    at unstable_runWithPriority (scheduler.development.js:646)
    at runWithPriority$1 (react-dom.development.js:11276)
    at commitRoot (react-dom.development.js:22990)
    at performSyncWorkOnRoot (react-dom.development.js:22329)
    at react-dom.development.js:11327
    at unstable_runWithPriority (scheduler.development.js:646)
    at runWithPriority$1 (react-dom.development.js:11276)
    at flushSyncCallbackQueueImpl (react-dom.development.js:11322)
    at flushSyncCallbackQueue (react-dom.development.js:11309)
    at scheduleUpdateOnFiber (react-dom.development.js:21893)
    at Object.enqueueSetState (react-dom.development.js:12467)
    at Tree.push../node_modules/react/cjs/react.development.js.Component.setState (react.development.js:365)
    at Tree.js:114`",Bug
https://github.com/facebook/react/issues/20141,20141,Bug: Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering if debugger present,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,21,2020-11-01T14:50:03Z,2022-03-30T06:57:25Z,2022-03-30T01:06:18Z,NONE,completed,," If a debugger is present in the main body of a functional component then on hitting the debugger and proceeding from there an unstable_flushDiscreteUpdates warning is thrown.

React version: ^16.13.1

## Steps To Reproduce

1. Clone [https://github.com/kentcdodds/bookshelf](https://github.com/kentcdodds/bookshelf)
2. Put a `debugger` right above the `React.useEffect()` in the `DiscoverBooksScreen` Component
3. Hit the `debugger` break point and resume execution of code
4. unstable_flushDiscreteUpdates warning is thrown in the console.

Link to code example:
[https://github.com/kentcdodds/bookshelf](https://github.com/kentcdodds/bookshelf)


## The current behavior
unstable_flushDiscreteUpdates warning is thrown in the console

## The expected behavior
unstable_flushDiscreteUpdates warning should not be thrown in the console


![Untitled](https://user-images.githubusercontent.com/2169707/97805936-0fd74300-1c27-11eb-9f58-9799b262805e.png)
![Untitled2](https://user-images.githubusercontent.com/2169707/97805947-1e255f00-1c27-11eb-802e-c154b039482b.png)
",Bug
https://github.com/facebook/react/issues/20146,20146,Bug: Issue using pullstate in React hooks.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2020-11-02T16:31:02Z,2020-11-03T01:16:00Z,2020-11-02T16:35:38Z,NONE,completed,,"I am using Pullstate to store and retrieve state in my applicaiton.
Pullstate store has a method named useState to retrieve the current value of the state.
the problem is, when i use the useState method of the pullstate store inside React hooks.
React application is crashing stating that i have wrongly invoked hooks.

React version: 16.13.1

## Steps To Reproduce
Pull state store

```
import { Store } from ""pullstate"";

export const PublishStateStore = new Store({
  searchedWord: '',
});
```

React app
```
useEffect(()=>{
    const abc = PublishStateStore.useState(s => s.searchedWord)
    console.log(abc)
})
```

Error message:
```
Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.
▶ 4 stack frames were collapsed.
(anonymous function)
src/components/DynamicWordForm.jsx:103
  100 | }
  101 | 
  102 | useEffect(()=>{
> 103 |     const abc = PublishStateStore.useState(s => s.searchedWord)
  104 |     console.log(abc)
  105 | })
  106 | 
View compiled
▶ 13 stack frames were collapsed.
```
",Support
https://github.com/facebook/react/issues/20173,20173,"Error: ""Cannot read property 'length' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,0,2020-11-06T04:25:53Z,2021-03-31T20:41:12Z,2021-03-31T20:41:12Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. Using the profiler I get this error. Can't figure out what to do. Tried clearing my browser data. 
---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.9.0-75726fadfd

Call stack: at getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:32)
    at ProfilingCache_ProfilingCache.getFlamegraphChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19992:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34007:32)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12871:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13521:7)
    at nk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16162:86)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15541:11)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15533:23)
    at dk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15517:5)
    at Xj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15129:105)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33986:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28048:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35614:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29061:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29178:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32776:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24164:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24653:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29246:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36049:3)",Bug
https://github.com/facebook/react/issues/20175,20175,React datepicker autoComplete not working,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2020-11-06T05:53:29Z,2020-11-07T14:21:10Z,2020-11-07T14:21:10Z,NONE,completed,sampath1992331,"<!--
  React autoCompleate not working 
-->


`<DatePicker 
                                            id=""BusinessRegisteredDate""
                                            className=""form-control mandatory""
                                            //value={this.state.BusinessRegisteredDate}                                           
                                            selected={this.state.BusinessRegisteredDate}
                                            autoComplete=""false"" 
                                            showYearDropdown
                                            showMonthDropdown
                                            maxDate={new Date().getTime()}
                                            onKeyDown={(e) => this.restrictKeyUpDown(e)}
                                            onChange={this.BusinessRegisteredDateOnchange} 
                                            required
                                        />``
Link to code example:

![Uploading ssssssss.JPG…]()


## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20178,20178,Bug: devtools the expanded state and the state object are out of sync,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,2,2020-11-06T11:23:28Z,2022-07-23T06:22:25Z,2022-07-23T06:22:25Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. Have a Switch with state in react native and toggle the switch by opening devtools and using the checkbox provided for the state.
2. Now toggle the switch using UI. the state object gets updated but not the expanded one.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Allergies state is true on the top but on expanded state it is false.
![Screenshot from 2020-11-06 16-48-37](https://user-images.githubusercontent.com/16081083/98360786-7bb71280-2050-11eb-8a52-0944a6b70c26.png)


## The expected behavior
Both must be in sync",Other
https://github.com/facebook/react/issues/20230,20230,Bug: react-hook: value of useState doesn't change when use with useContext and render props,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,2,2020-11-12T06:35:28Z,2020-11-12T15:47:19Z,2020-11-12T08:49:57Z,NONE,completed,,"value of useState doesn't change in inner function that pass to props of render props component but change in DOM and normal call. (it is working fine with class component)

React version: 17.0.0

## Steps To Reproduce

context.js

```js
import { createContext } from ""react"";

export const Context = createContext({ showModal: (func) => {} });
```

FunctionalChild.js

```js
import React, { useCallback, useContext, useEffect, useState } from ""react"";
import { Context } from ""../context"";

export function FunctionalChild() {
  const { showModal } = useContext(Context);
  const [count, setCount] = useState(0);

  const increaseCount = useCallback(
    function () {
      console.log(""functional child"", count);
      setCount((c) => c + 1);
    },
    [count]
  );

  useEffect(() => {
    showModal(() => {
      return <button onClick={increaseCount}>+</button>;
    });
  }, [increaseCount, showModal]);
  return <div>current count{count}</div>;
}

```

Parent.js

```js
import React, { useState } from ""react"";
import { Context } from ""../context"";
import { FunctionalChild } from ""./FunctionalChild"";

let modalComponent;

export default function ParentComponent() {
  const [visible, setVisible] = useState(false);

  function close() {
    setVisible(false);
  }

  function showModal(func) {
    modalComponent = func(close);
    setVisible(true);
  }

  return (
    <Context.Provider value={{ showModal }}>
      <FunctionalChild />
      {visible && <div className=""modal"">{modalComponent}</div>}
    </Context.Provider>
  );
}
```

as above codes the value of `count` in `increaseCount` function is always showing initial value `0` and doesn't change at all. but got updated value at `console.log(""count:"", count)` normal call and it's also got updated value in DOM.

Link to code example: https://codesandbox.io/s/usestate-hook-odw3e  
you can check the behavior of both class and functional component in this link

## The current behavior

value of useState doesn't get update value in function that pass to render props component

## The expected behavior

to get the correct updated value of useState in function that pass to render props component
",Support
https://github.com/facebook/react/issues/20231,20231,"Bug: After quoting ""react-file-viewer"": ""^1.2.1"" plug-in, the project packaging is particularly slow, how to effectively speed up","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-11-12T07:10:18Z,2020-11-12T09:06:39Z,2020-11-12T08:54:40Z,NONE,completed,,"<!--
  After quoting ""react-file-viewer"": ""^1.2.1"" plug-in, the project packaging is particularly slow,It takes about an hour to pack
-->

React version:16.13.1

## Steps To Reproduce

1.npm run build



## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20232,20232,"Bug: 引用了""react-file-viewer"": ""^1.2.1""预览附件，打包特别慢，需要1个小时左右，如何提高打包的效率？","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-11-12T07:16:06Z,2020-11-12T08:53:37Z,2020-11-12T08:53:31Z,NONE,completed,,"<!--
 引用了""react-file-viewer"": ""^1.2.1""预览附件，打包特别慢，需要1个小时左右，如何提高打包的效率？
-->

React version:16.13.1

## Steps To Reproduce

1.在package.json中引用react-file-viewer
2.npm install下载依赖
3.npm run build 打包  ，出奇的慢

<!--
  有没有相同的情况，有什么好的解决办法，谢谢各位大神了！
-->

Link to code example:


## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20240,20240,Bug: dispatched action executes reducer during render,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-11-12T17:29:33Z,2020-11-12T20:42:51Z,2020-11-12T20:42:51Z,NONE,completed,,"When a child components communicates with a parent, half of the time an update is batched with a rerender, and a warning `Cannot update a component while rendering a different component` is raised.

![image](https://user-images.githubusercontent.com/576586/98971487-44e66e00-2522-11eb-90f0-9d54e828b428.png)

This seems to be very close to the issue #18098. That one is about a harmless consequence of an unexpected render, this one is about a behavior that [will likely start hard failing in future versions of React](https://github.com/facebook/react/issues/18178#issuecomment-592662192)

React version: 16.14.0

## Steps To Reproduce

1. call `[state, setState] = useState()`
2. pass `setState` to a child component
3. call `[state, dispatch] = useReducer(reducer)` in the child
4. call `setState()` in `reducer`
5. trigger `dispatch` in an event handler in the child twice

Link to code example:
[code sandbox](https://codesandbox.io/s/yanovich-scheduleupdateonfiber-cjpuy)

## The current behavior
Half of the time an update is batched with a rerender, and a warning `Cannot update a component (`App`) while rendering a different component (`Table`)` is raised.

## The expected behavior
Update always happens before rerender.",Support
https://github.com/facebook/react/issues/20261,20261,[DevTools] Components tab goes blank with React 16.8.0,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,27,2020-11-15T14:52:32Z,2021-11-03T05:05:12Z,2021-07-03T23:31:26Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.8.0

## Steps To Reproduce
Install react 16.8.0

1. Build a hello world with any component
2. Open React Dev Tools.
3. Choose components tab.
4. Nothing will be seen.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Tab ""Component"" is blank

## The expected behavior
Tab ""Component"" should show React components

FYI: I installed Material UI library.
Chrome: Versión 86.0.4240.183 (Build oficial) (64 bits) Ubuntu 18.04.
Tested today.
Versión
4.10.0 (11/12/2020)
Actualizado
13 de noviembre de 2020",Support
https://github.com/facebook/react/issues/20294,20294,"Bug: function in useState hook, setting different value ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,1,2020-11-19T02:00:47Z,2021-04-13T15:45:51Z,2021-04-13T15:45:51Z,NONE,completed,," useState hook telling me one value then setting another, understand its recommended to use useReducer when working with data structures but i still dont understand why this is happening, this is code block
```
const onAdd = (id, amount = 1) => {
   setItems(old => {
      const idx = old.findIndex(i => i.product_id === id)
      console.log(old[idx].value, amount)
      old[idx].value += amount;
      console.log(""after"", old[idx].value)
      return [...old]
   })
```
value starts at 0, the console logs are as follows

<img width=""461"" alt=""log"" src=""https://user-images.githubusercontent.com/50396417/99610540-24f50400-2a66-11eb-82eb-0c5f3637a825.png"">

the state ""adds"" double what ever the amount is, for the case above, 2, the console logs only run once so the function isnt running twice and it also works fine the non-useEffect safe way below

```
const old = [...items]
const idx = old.findIndex(i => i.product_id === id)
old[idx].value += amount;
setItems(old)
```

React version: react-dom@17.0.1

",Support
https://github.com/facebook/react/issues/20297,20297,Bug: Infinite loop when following the instructions of Exhaustive Deps.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2020-11-19T12:19:57Z,2020-11-23T01:16:09Z,2020-11-23T01:16:09Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.1

Link to code example:

```json

        ""react-hooks/exhaustive-deps"": ""warn"",
```

If you write the following code, `Exhaustive Deps` will spit a warning in deps of` useMemo`

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

### Infinite loop code
The infinite loop code has a negative effect on the browser, so I've included only a sample. If you change the hook used from `useNonInfinite` to` useInfinite`, the code will be similar.

```tsx
import {
  useEffect, useMemo, useState,
} from 'react';

const useInfinite = (a: string[]) => {
  const [state, setState] = useState<string[]>([]);
  const b = useMemo(() => a.concat('b'), [a]);
  useEffect(() => {
    setState(b);
  }, [b]);
  return {
    state,
  };
};

export {
  useInfinite,
};
```

### non infinite loop code
https://codesandbox.io/s/kind-water-4lybu?file=/src/App.js

```tsx
import {
  useEffect, useMemo, useState,
} from 'react';

const useNonInfinite = (a: string[]) => {
  const [state, setState] = useState<string[]>([]);
  const b = useMemo(() => a.concat('b'), []);
  useEffect(() => {
    setState(b);
  }, [b]);
  return {
    state,
  };
};

export {
  useNonInfinite,
};
```

If you follow linter's instructions, you will end up in an infinite loop

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20328,20328,"Bug: react-scripts 4.0.1 : EBUSY: resource busy or locked, open 'C:\...\project\.eslintcache'","[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2020-11-24T16:18:42Z,2020-11-24T18:45:06Z,2020-11-24T18:44:59Z,NONE,completed,,"React version:

## Steps To Reproduce

1. Upgrade react-scripts from 4.0.0 to 4.0.1 (It works on 4.0.0)
2. yarn start

Link to code example:

Seems happen only on windows due to locking

## The current behavior

![image](https://user-images.githubusercontent.com/4507910/100120709-907d0e00-2e78-11eb-92e6-bd94c89acfd5.png)

## The expected behavior

No lock error :)

Thanks,",Other
https://github.com/facebook/react/issues/20334,20334,Bug: Strange lines in the page,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2020-11-27T02:56:35Z,2020-11-27T09:48:39Z,2020-11-27T09:48:28Z,NONE,completed,,"When chrome devtools is opened, some strange lines appear in the page and disappear after disable&enable the react extension.
I'm wondering if there are some bugs on react extension.
Win10x64 Chrome 87.0.4280.66
[Chrome issue 83155766](https://support.google.com/chrome/thread/83155766)
![img](https://storage.googleapis.com/support-forums-api/attachment/thread-83155766-2167922176753088865.jpg)",Support
https://github.com/facebook/react/issues/20339,20339,"Improved ""memory leak"" warning","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-11-27T14:10:21Z,2021-08-19T19:30:45Z,2021-08-19T19:30:45Z,NONE,completed,,"Dear React Maintainers,

My proposal to improve the [""memory leak"" warning](https://github.com/facebook/react/blob/e6a0f276307fcb2f1c5bc41d630c5e4c9e95a037/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L3096) has quite a long background, so let me first thank you for keeping React alive and well. You are all fabulous 🎉

### TL;DR

A Promise is not cancellable, so there is 90% chance that no memory leaks will be fixed when a user applies a ""solution"" to this warning from the internet. This warning encourages a pit of failure (more complex code without removing actual memory leaks) and I argue the detection of memory leaks should be changed.

Table of contents: <a href=""#good"">The good</a> (<a href=""#solutions"">Intended Solutions</a>) - <a href=""#bad"">The bad</a> - <a href=""#uncanny"">The uncanny</a> - <a href=""#proposal"">Proposal</a>

# The good <a name=""good""></a>

> Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.

There were, obviously, good reasons to introduce this warning in the first place. React can't detect memory leaks directly, so this was the next best thing to detect forgotten imperatively attached DOM event handlers or uncancelled WebAPIs. The warning itself does not list any examples, so let me illustrate with [my own bad example](https://codesandbox.io/s/immutable-sun-fo3nt?file=/src/App.js):

```js
const [tick, setTick] = useState(0)
useEffect(() => {
  setInterval(() => setTick(t => t+1), 1000)
}, [])
```

And the intention of the warning is to gently guide the developer to figure out, on their own, what cleaning up means. 

## Intended Solutions <a name=""solutions""></a>

Let me list a few ideas how I think the memory leaks should be solved.

For the *setInterval* (or *setTimeout*):

```js
const [tick, setTick] = useState(0);
useEffect(() => {
  const interval = setInterval(() => setTick(t => t + 1), 1000)
  return () => clearInterval(interval)
}, []);
```

*Aborting a fetch*:

```js
const [data, setData] = useState(null);
useEffect(() => {
    const {signal, abort} = new AbortController()
    fetch('...', {signal}).then(r => r.json()).then(setData)
    return abort
}, []);
```

Replacing closure references to the dispatch function inside `.then(...)` when *dealing with an uncancellable Promise*:

```js
const [data, setData] = useStateIfMounted(null)
useEffect(() => {
  myGenericPromise.then(setData)
}, [])

...

function useStateIfMounted(initialValue) {
  const [state, setState] = useState(initialValue)
  const setterRef = useRef(setState)
  const setterIfMounted = useCallback((...args) => setterRef.current(...args), [])
  useEffect(() => {
    return () => {
      setterRef.current = () => undefined
    }
  }, [])

  return [state, setterIfMounted]
}
```

Note the last one is basically recreating the `no-op` done internally by React (if my understanding is in the right ballpark).

# The bad <a name=""bad""></a>

Now, the same buggy code causes a [completely different warning in tests](https://github.com/facebook/react/blob/e6a0f276307fcb2f1c5bc41d630c5e4c9e95a037/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L3354) (at least in most cases I checked, not sure if always):

>  Warning: An update to MyComponent inside a test was not wrapped in act(...).

Let's ignore that for a second and try to analyze the solutions that developers can find for the ""memory leak"" problem on the internet. 

1.) `isMounted` variants, like in most of the top answers on [StackOverflow](https://stackoverflow.com/search?tab=votes&q=%22perform%20a%20React%20state%20update%20on%20an%20unmounted%20component%22) or various learning materials such as Kent's [useSafeDispatch](https://github.com/kentcdodds/advanced-react-hooks/blob/560980b10fd10e66fcf5e4f5b4b90bf46cb5fc7b/src/utils.js#L3)

=>❌ These solutions only address the warning, not solving any memory leaks (presumably, they focus on making the warning go away if it's a false positive). The code is more complex without any benefit. An example of shutting up the warning without solving the leak:

```js
const [tick, setTick] = useState(0)
const isMounted = useRef(true)
useEffect(() => {
  setInterval(() => isMounted && setTick(t => t+1), 1000) // ❌ please don't run infinite intervals at home
  return () => isMounted.current = false
}, [])
```

2.) fake cancellation like at the end of [isMounted is an Antipattern](https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html) or the cancel method from the [react-async library](https://github.com/async-library/react-async/blob/129385c7477c9c6b5ad9c4ea96220779478a1ff6/packages/react-async/src/useAsync.tsx#L230-L231)

=>❌ These look like valid solutions on a first look, but they actually leave the closure references untouched, so not solving any memory leaks either. JS Promise is simply not cancellable (yet?), and no amount of sophistication will allow garbage collection of closures of the function used for the `.then(...)` callback while the Promise is still pending - it is not possible to modify the original Promise, only to create a new Promise. The code is much more complex without any benefit. (see <a href=""#uncanny"">The uncanny</a> section for details)

3.) real cancellation like https://stackoverflow.com/a/54964237/1176601

=>✔ Aborting a fetch request and other operations that enable garbage collection.
=>❌ But it's very hard to figure it out from the available advice - ""memory leaks"" is not the best documented topic for JavaScript...

# The uncanny <a name=""uncanny""></a>

My statement about fake cancellations (2. above) could be controversial, so let me elaborate:

As far as I can tell, the `makeCancellable` utility from the end of https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html as well as _all_ proposed solutions in https://github.com/facebook/react/issues/5465 , https://github.com/reactjs/reactjs.org/issues/1082 and https://github.com/facebook/react/issues/15006 suffer from the same memory leaks as a naive solution would:

```js
// naive
const [value, setValue] = useState()
useEffect(() => {
  myPromise.then(setValue)
}, [])
```

This naive solution can trigger the warning (as a race condition during unmount), while the complicated solutions won't. Both leak the exact same amount of memory references - functions that we know will never be used but the JS engine cannot garbage collect - because a closure reference to them still exists.

Let me illustrate on a modified example that can be executed in the console => the `cancelablePromise` will be rejected after 2 seconds, so the reference from `then` to the function that was a value of the `setValue` variable will exist for exactly as long as in the naive solution:

```js
const cancelablePromise = makeCancelable(
  new Promise(r => setTimeout(r, 2000))
);
const setValue = () => undefined

cancelablePromise
  .promise
  .then(setValue)
  .catch((reason) => console.log('isCanceled', reason.isCanceled));

cancelablePromise.cancel(); // Cancel the promise

function makeCancelable(promise) {
  let hasCanceled_ = false;

  const wrappedPromise = new Promise((resolve, reject) => {
    promise.then(
      val => hasCanceled_ ? reject({isCanceled: true}) : resolve(val),
      error => hasCanceled_ ? reject({isCanceled: true}) : reject(error)
    );
  });

  return {
    promise: wrappedPromise,
    cancel() {
      hasCanceled_ = true;
    },
  };
};
```

As for the `cancel` method in https://github.com/async-library/react-async/blob/129385c7477c9c6b5ad9c4ea96220779478a1ff6/packages/react-async/src/useAsync.tsx#L230-L231, that is even more complicated, but my intuition says that a reference to `dispatch` will continue to exist after `cancel()` as long as the `promiseFn` is pending - because the `cancel` function does not clear `lastPromise.current`...

# Proposal <a name=""proposal""></a>

## Option 1: small tweak

How about flipping [this condition](https://github.com/facebook/react/blob/e6a0f276307fcb2f1c5bc41d630c5e4c9e95a037/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L3121) `if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;` the other way round? If some code tries to update the state of an unmounted component just once, ignore it.

Sweep the little insignificant memory leak under the carpet (remember, I argue that it is more likely that an attempt to fix the warning will NOT fix any memory leaks, so remaining quiet is not such a bad option and the memory will be freed at the same time with or without this warning - but the user code will be much simpler if they don't attempt to fix this warning).

On the other hand, if the state update happens repeatedly after the unmounting (e.g. setInterval or observable stream), that is a very clear signal that the memory leak is more serious => the warning is much more useful in this situation. It might require some re-wording + a link to examples how to fix it correctly.

However, I am not sure about the related `not wrapped in act(...)` warning in tests. Changes to one warning might require synchronization of both warnings for consistency...

## Option 2: detect the memory leaks in Dev Tools

In an ideal world, it should be possible to trigger browser garbage collection from inside React Dev Tools code in all supported browsers. That might not be the case in the real world, but please stay with me for 1 more minute: both supported browsers are open source and they both expose the tools to trigger garbage collection in GUI => some API must exist and it should be possible to expose it in a browser extension.

Now, if React Profiler could trigger GC reliably after pressing the stop profiling button, then we can use an array of [WeakRef](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef)s to find all references to the dispatchers (or other objects) of unmounted components that leaked in some closure somewhere. Pseudocode:

```js
const zombies = []

function unmountComponent(node) {
  dispatchZombies.push(new WeakRef(node))
}

function stopProfiling() {
  gc()
  warningAboutZombies.nodes = zombies.map((ref => ref.deref()).filter(Boolean)
}
```

## Option 3: React.getZombies()

Expose some method to get a list of ""undead zombie references"" in tests, that would be available when running in Node with the `--expose-gc` flag...",Other
https://github.com/facebook/react/issues/20340,20340,imp,[],closed,FALSE,,0,2020-11-27T14:33:49Z,2020-11-27T14:45:06Z,2020-11-27T14:45:06Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/20354,20354,Bug: ,"[{""id"":40929154,""node_id"":""MDU6TGFiZWw0MDkyOTE1NA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Invalid"",""name"":""Resolution: Invalid"",""color"":""e6e6e6"",""default"":false,""description"":null}]",closed,FALSE,,0,2020-11-29T23:00:22Z,2020-11-30T09:35:10Z,2020-11-30T09:35:03Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20360,20360,Bug: useState initial value overrides itself with each render,"[{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,2,2020-12-01T10:59:20Z,2020-12-01T15:02:12Z,2020-12-01T15:02:05Z,NONE,completed,,"given the following component
```
export default function Test() {
  const [test] = useState(Math.random());

  useEffect(() => {
    console.log('mount')
    return () => console.log('unmount');
  }, []);

  console.log(test);

  return null;
}
```
i'm expecting to get the same random number logged on every render

but this is what i'm getting in the console
```
- 0.03154673508944783
- 0.055598314429445184
- mount
```

React version: 16.13.1
",Support
https://github.com/facebook/react/issues/20361,20361,"Error: ""getCommitTree(): Unable to reconstruct tree for root ""1"" and commit 12""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2020-12-01T13:16:05Z,2021-04-28T14:35:30Z,2020-12-01T22:30:44Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.0-11a2ae3a0d

Call stack: at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:9)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20104:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34150:33)
    at Fh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12806:7)
    at ni (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13448:7)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16065:86)
    at ik (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15450:11)
    at hk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15442:23)
    at Zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15426:5)
    at Tj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15038:105)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34133:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28195:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35761:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29208:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29325:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32923:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24311:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24800:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29393:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36196:3)",Other
https://github.com/facebook/react/issues/20408,20408,Bug: eslint-plugin-react-hooks does not catch early returns in anonymous default exports,"[{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,3,2020-12-08T21:40:37Z,2020-12-23T10:52:38Z,2020-12-23T10:38:43Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
17.0.1

## Steps To Reproduce
1.
```jsx
import { useEffect } from 'react'

export default () => {
  if (true) return false

  useEffect(() => {})

  return false
}
```

2. run the linter



<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->



<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
No errors

## The expected behavior
error  React Hook ""useEffect"" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?

failing test-suite case
```
{
  code: `
    export default () => {
      if (cond) {
        useConditionalHook();
      }
    }
  `,
  errors: [conditionalError('useConditionalHook')],
},
```
",Support
https://github.com/facebook/react/issues/20413,20413,Mistake,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-12-09T10:21:30Z,2020-12-09T10:32:59Z,2020-12-09T10:32:59Z,NONE,completed,,"If I write useEffect() without passing the callback as a parameter, the plugin crashes with an error TypeError: Cannot read property 'type' of undefined

React version: 16.12.0

## Steps To Reproduce

1. Create a functional React component
2. Add useEffect() without params

Еhe error occurs here: eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1734:24

` switch (callback.type) {
        case 'FunctionExpression':
        case 'ArrowFunctionExpression':
          visitFunctionWithDependencies(callback, declaredDependenciesNode, reactiveHook, reactiveHookName, isEffect);
          return;
        // Handled`
I think its needs checking if callback is set 

## The current behavior 
The plugin crashed with TypeError: Cannot read property 'type' of undefined

## The expected behavior
The plugin not crashed and reports that the callback is required 
",Other
https://github.com/facebook/react/issues/20418,20418,"[React DevTools] Bug: irrelevant ""Cannot update a component from inside the function body of a different component""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-12-09T21:01:14Z,2020-12-10T14:38:45Z,2020-12-10T14:38:06Z,NONE,completed,,"There are situations where the warning  ""Cannot update a component from inside the function body of a different component"" seems irrelevant.

1. Consider a third party component which has a `renderStuff` prop to customize the rendering of sub-views.
2. This `renderStuff` prop passes arguments that are relevant for the parent component.
3. The warning ""Cannot update a component from inside the function body of a different component"" will trigger because the parent sets a cached value of this interesting argument with a `setXXX` call.

React version: 16.13.1

## Steps To Reproduce

See minimal demo: https://codesandbox.io/s/irrelevant-warning-khe6r

## Details

In my use-case, I need to cache an animated object (from React Native).
",Other
https://github.com/facebook/react/issues/20450,20450,Bug: Trailing Comma in Arrays and Dict,"[{""id"":40929156,""node_id"":""MDU6TGFiZWw0MDkyOTE1Ng=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Wontfix"",""name"":""Resolution: Wontfix"",""color"":""ffffff"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2020-12-13T02:33:56Z,2020-12-14T14:24:33Z,2020-12-14T14:24:20Z,NONE,completed,,"The learn react tic tac toe game tutorial shows a trailing comma at the end of dictionary values. This is known to cause issues with Internet Explorer. Hoping you can change that.

https://stackoverflow.com/questions/5139205/javascript-can-a-comma-occur-after-the-last-set-of-values-in-an-array

React version:  LTS

## Steps To Reproduce

1. Run tic tac toe tutorial code

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Internet Explorer throws weird errors

## The expected behavior
Internet Explorer loads the tic toe game without any ussyes",Support
https://github.com/facebook/react/issues/20452,20452,Bug: document 'keydown' event listener prevents input's onChange handler from firing,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-12-13T12:40:43Z,2020-12-13T12:47:55Z,2020-12-13T12:47:55Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

An Input (type='text') component's onChange handler will not fire if the document has a keydown event with event.preventDefault()

React version:

## Steps To Reproduce

1. Render an <input type='text' onChange={handler}></input> with an onChange handler
2. Add a 'keydown' event to the document with event.preventDefault().
3. Attempt to type in input textbox

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/busy-newton-fr9rx?fontsize=14&hidenavigation=1&theme=dark

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
User cannot type in input textbox because the onChange handler is never called

## The expected behavior
Both the onChange handler and keydown event should fire",Other
https://github.com/facebook/react/issues/20454,20454,React DevTools should bump the Electron version to 11.0.1 for darwin-arm64 builds,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":717031390,""node_id"":""MDU6TGFiZWw3MTcwMzEzOTA="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue"",""name"":""good first issue"",""color"":""6ce26a"",""default"":true,""description"":null}]",closed,FALSE,,17,2020-12-13T23:57:36Z,2022-07-15T16:27:32Z,2021-01-04T15:38:12Z,NONE,completed,,"## Environment:
- macOS 11.0.1 Big Sur, on an Apple Silicon (M1) chip
- React 17.0.1
- React DevTools 4.10.1, running in standalone mode via Electron 11.1.0 (darwin-arm64 build)
- New project using create-react-app . with the useScript hook to add the <script> tag required by React DevTools.

## Steps to reproduce

1. Add React DevTools to a project with `npm install --save react-devtools` (or yarn).
2. react-devtools expects Electron 9.x.x; however builds for darwin-arm64 are only available for 11.1.0. Installation fails with:
```
npm ERR! code 1
npm ERR! path /Users/michael/git/components-blank/node_modules/electron
npm ERR! command failed
npm ERR! command sh -c node install.js
 HTTPError: Response code 404 (Not Found) for https://github.com/electron/electron/releases/download/v9.4.0/electron-v9.4.0-darwin-arm64.zip
 ...
```

Link to code example:  [mglukhovsky/react-devtools-components-blank](https://github.com/mglukhovsky/react-devtools-components-blank)

## The current behavior
Workarounds are [documented here](https://github.com/mglukhovsky/react-devtools-components-blank#electron-1110-required-for-m1); however a 11.1.0 build is required.

## The expected behavior
Bump the version in package.json so this works out of the box.
",Bug
https://github.com/facebook/react/issues/20461,20461,Bug: Module not found: Can't resolve 'react-transition-group' in 'C:file/path,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2020-12-14T19:37:00Z,2020-12-14T19:37:12Z,2020-12-14T19:37:12Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20467,20467,Bug: This isn't a bug but a feature request  ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2020-12-15T14:33:06Z,2020-12-16T20:18:41Z,2020-12-16T20:18:41Z,NONE,completed,,"React version: 17

This isn't  a bug but a feature request that many devs would like to see in react including me.
For many times we have to use map funtion to loop items in a array just like the following:

`exampleArray.map((index) => (
      <motion.li key={index} className=""item"" variants={item} />
    ))}`

The sample above works great when we want to map an object, group of objects or arrays. There are some cases where we would like to do different. For example, in the code bellow I want inside JSX to loop 6 times a line of code:

`{[0, 1, 2, 4, 5].map((index) => (
      <motion.li key={index} className=""item"" variants={item} />
    ))}`

The code above seems off, we should be able to make a for cycle inside JSX. I would like to repeat the line 6 times to create 6 circles.

Do you think in future versions we could do it?  Using this way doesn't seem great.

I wrote here because I didn't see any link pointing to feature or improvement request.",Other
https://github.com/facebook/react/issues/20473,20473,Strict-Dynamic CSP issue in react js,[],closed,FALSE,,1,2020-12-16T15:43:37Z,2020-12-16T18:00:22Z,2020-12-16T18:00:22Z,NONE,completed,,"Hi Team,

I am trying to implement CSP in my react APP. While adding strict-dynamic in head tag , my app is not loading the chunk.js file because it is getting created during build time in inline script. Also i am unable to find any solution to provide nonce attribute to the chunk.js file. Can anyone please suggest how CSP works in react js application. also can any one suggest moving forward will the app is compatible with all the BROWSERS(IE,Chrome,Mozila). ",Support
https://github.com/facebook/react/issues/20530,20530,Bug: useEffect with no dependencies always fires a warning,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-01-01T14:26:11Z,2021-01-08T18:22:38Z,2021-01-08T18:22:38Z,NONE,completed,,"Using useEffect with an empty dependency array will fire up the warning 'react-hooks/exhaustive-deps'. However, using useEffect with an empty dependency list should be a safe praxis when using it as the equivalent of onComponentDidMount.

React version: ^17.0.1

## Steps To Reproduce

1. Use useEffect with no dependencies.

## The current behavior

'react-hooks/exhaustive-deps' is fired

## The expected behavior

Either no warning is fired for an intentional empty array, or an alternative hook useOnDidMount is added, which is useEffect but without dependencies.

```
export const useOnMount = handler => {  // does not trigger react-hooks/exhaustive-deps
     return useEffect(() => {
         return handler();
     }, []);
};
```",Support
https://github.com/facebook/react/issues/20532,20532,Bug: No transition when reordering nodes with keys,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2021-01-02T15:15:28Z,2021-01-03T21:14:50Z,2021-01-03T21:14:50Z,NONE,completed,,"The following component should display a DOM node that transitions from left to right. This is because there is a JSX element with a key prop and a transition property. However, it does not transition from left to right.

```import React from 'react';
import ReactDOM from 'react-dom';
import { useEffect, useState } from 'react';

function App() {
  const [state, setState] = useState(false)
  useEffect(() => {
    setInterval(() => {
      setState(st => !st)
    }, 1000)
  }, [])

  let e1 = <span
    key=""foo""
    style={{
      left: state ? `100px` : `200px`,
      position: ""absolute"",
      transition: ""left 1s""
    }}>WHAT</span>

  let e2 = <span key=""bar"">HEY</span>

  return state ? [e1, e2] : [e2, e1]
}


ReactDOM.render(<App />, document.getElementById('root'));
```



React version:

17.0.1

## Steps To Reproduce

1. Create a new project with create-react-app
2. Replace the index.js file with the code I provided
3. Use npm start to run


Link to code example:

https://codesandbox.io/s/ecstatic-sky-h6qm5

## The current behavior

The user does not see the span transition from left to right. 

## The expected behavior

A smooth transition from left to right
",Support
https://github.com/facebook/react/issues/20538,20538,React developer tool,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-01-03T15:07:25Z,2021-01-04T13:58:31Z,2021-01-04T13:58:31Z,NONE,completed,soloatGitHub,,Other
https://github.com/facebook/react/issues/20540,20540,Bug: TypeScript JSX does not properly detect props when using type union in component props definition,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-01-03T21:00:05Z,2021-01-07T18:01:27Z,2021-01-07T18:01:27Z,NONE,completed,,"React version: 16.13.1
Typescript version: 4.1.2

## Steps To Reproduce

See the code examples bellow

1. Create a component that compiles its props based on the props of a child
2. Pass a child with a primitive type and a callback type prop
3. Observe that the primitive type is inferred correctly but the callback prop is not

The motivation for this was to create a `Wrapper` component that inherits all the props from a given child component

Type detected successfully             |  Typescript complains about no implicit any
:-------------------------:|:-------------------------:
<img width=""414"" alt=""Screen Shot 2021-01-03 at 12 48 27 PM"" src=""https://user-images.githubusercontent.com/544097/103488522-15394100-4dc2-11eb-991a-d0ef8dd418f9.png"">  |  <img width=""524"" alt=""Screen Shot 2021-01-03 at 12 51 50 PM"" src=""https://user-images.githubusercontent.com/544097/103488559-7eb94f80-4dc2-11eb-8d0a-8e67d9bd1e73.png"">

**Link to code example:**
- [TypeScript issue example][1] Line 19 is the problem, the `callback` property gets the correct type if you hover over the JSX prop name, but TS complains that `val` is implicit any

- [An equivalent plain TS example without react][2] I did my best to reproduce the behavior in pure typescript to make sure this is specifically a react problem and not a TS problem. 

## The current behavior
Inferred callback props cause TS errors 

## The expected behavior
TS gets the correct type and 

[1]: https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIzAJ5hZwDqUyY7UABWJhUAHgAqAPjgBeOAG84uABbAANgBMAXHHEAaOAHcefLFADCAIQD8OgBTHe-AGrI1OgEYQIanADsASllpZD8WOABfeiYGXDU0dG4nMwk4LAAPGCw-DXRsPBgAOnMSSD9smHE2LFFQlklpRjhmtMzs3MwqIpLwCHK-GFEmlpGk00FhMSk4ADI4AHkQYEH8-GLSvoqhCBEJSQMyFXUNSj8ySWHm6XkIxkZcPtR4cWUsc1VNHVWigDFzUUUADc3ABXLA6PwgkAeMxwAA+cC8Pn8BlwbjUHjwAGt7MD3HAnlBgH4AOZBGQhMKRaRyOzk6SQtRqaKMAD0rM6YHiuGJJLgMFeCyWg0KoukfTgamJHAA7EZlso4ABlGDIGDAXDvY7bETypkofAg9HhQzQLFwAjSgweEHwDRYAg4eACjhgEFQSCoLDMarK1XqzUfDQ69ByRbLUTfda9fowEOiVjsCAEXSvLWafbkI6aU7nFkMURjfhwdn81ToMDCMxqcL2rL4dAAAzxYMbiNtSlK8WJ6GQXg7jbRTMxuCxjbZHMLJn4CeqydTbyD0lLAuA6FNUCx6Et5Qt0BQ+pei+OcErO1QlyUQZk8iP6Y0twYIxbWBvAEYAEwAZkfIyHGOxG88WCOBPx-EsOSPflfXnQd0RHMc4DXTsoEofAazgOssHwLANCQlMWAgEE4GUCBAVhMjYRdOA-GQEAsGtDtxCVTtwG7Px0AFNU4GbNw22UNAkLYjVlhQMIDCwci-DLCASRBRVljIdAsJwjRL0ccYrBvDSXDcEDGTUR9WUkIA

[2]: https://www.typescriptlang.org/play?#code/MYGwhgzhAEDCD2BbADvAdgUzQFwDwAUAneZCAPmgG8BYAKGgemWNIC5oiSIBuOx6YOgjZCAV2DZ4hABTMu7TqQCUVaNgAWASwgA6OaWgBeJix7QAvnUu06oSDADqhMMmQZCuACrQMAD2xYACYwCCjoWHhgaACeZBR+AWjBcEiomDi4lAJaIIHs3ubQAGTQAJJoAGbuihBecVR8jIJowmISUrKm7E4ubh6eZADaAOT6EMMAuko09PyMEKJ9nVxKvLMM1ta24FBwOYE+-kEhqeEZWQBuYCCiGOxooogARu7QAD7QT-DwIBhRADQCa4gJ5gYAAa3Y0iuIHYrU0aAA5ipDBQotELBRKOY1nRsNE3GVKtVTF5DolkqE0hFcOj6sZvAljikwuk8AiqoQOKYKAB+blcaD3DAXdy42jNYQCACMRmgmAA7ntNLlpJdrrd2NKAEwAZkBwGBoIh7BhRgo0oADJaLKtbEJsNAFbLjIroD1XO41dkVXkZYCYZroDr9UCQCCwZDoGbUdBtdbbdwgA",Other
https://github.com/facebook/react/issues/20559,20559,Bug: url misspelled as uri when adding background image,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-01-07T20:31:04Z,2021-01-08T18:36:24Z,2021-01-08T18:36:24Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
17.0.1
## Steps To Reproduce

1. Add an empty url in the background-image tag in css
2. The url will not be fetched and it will say ""Unable to find *uri*""

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
.chatBody{
    background-image: url("""");
}
## The current behavior
Error: Unable to find URI

## The expected behavior
Error: Unable to find URL


PS: I would love to rectify the issue as I found it :)
",Other
https://github.com/facebook/react/issues/20560,20560,"Error: ""Cannot read property 'concat' of undefined""","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-01-08T02:18:10Z,2021-01-10T05:18:34Z,2021-01-08T18:19:55Z,NONE,completed,rufataliy,"Describe what you were doing when the bug occurred:
1. It worked the first time I ran it.
2. Then I added useRef and console for debugging (don't think is related to the but might help)
3. I profile the interaction
4. When I stopped profiling this error occurred

Link to repo [repo](https://github.com/rufataliy/recippy)

You will need API_KEY env variable to be able to access the api. I believe you can use 1 for searching but it will not get you initial recipes when you load the page first.

So if you run the `npm run next-dev` command after installing dependencies you will have dev version of the app and you will need to run the profiler, click the view button on the recipe card and stop profiler.

Sorry, if it not that helpful I couldn't reproduce it myself, as well.

Hope it is helpful.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",Other
https://github.com/facebook/react/issues/20566,20566,Bug: In some cases virtual dom className not generating class ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-01-09T22:04:26Z,2021-01-10T09:17:08Z,2021-01-10T09:16:47Z,NONE,completed,nicewaytodoit,"React version:
react-dom@17.0.1

## Steps To Reproduce

Bug described here: https://github.com/gatsbyjs/gatsby/issues/28951

In what circumstances class that is already in virtual DOM element would not reflect on DOM?
Above issue is already described as Gatsby but I am not sure it is issue with React.

Two elements have same className, after hard reload both element in Virtual DOM have same className, but only one element has styled applied, how?!


",Other
https://github.com/facebook/react/issues/20585,20585,Bug: useImperativeHandle return undefined of ref.current property,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-01-14T03:22:14Z,2021-01-14T14:56:46Z,2021-01-14T14:56:46Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: last

## Steps To Reproduce

1. Mouse enter to the text
2. check console log

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/exciting-platform-f7prw?fontsize=14&hidenavigation=1&theme=dark

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
get an `undefined` in sometimes

## The expected behavior
aways get `roo`",Support
https://github.com/facebook/react/issues/20586,20586,"Bug: CRA 4, React 17.0.1 new jsx not umd, React CDN can not work","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-01-14T07:17:22Z,2022-03-30T01:11:50Z,2022-03-30T01:11:50Z,NONE,completed,,"
### Describe the bug

externals React, CDN loading React error.

### Environment

System:
    OS: macOS 11.1
    CPU: (12) x64 Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz
  Binaries:
    Node: 14.15.1 - /usr/local/bin/node
    Yarn: Not Found
    npm: 6.14.10 - /usr/local/bin/npm
  Browsers:
    Chrome: 87.0.4280.141
    Edge: Not Found
    Firefox: Not Found
    Safari: 14.0.2
  npmPackages:
    react: Not Found
    react-dom: Not Found
    react-scripts: Not Found
  npmGlobalPackages:
    create-react-app: Not Found

### Steps to reproduce
1.  Create project
```  
npx create-react-app my-app --template typescript
``` 
2. [Use craco](https://github.com/gsoft-inc/craco/blob/master/packages/craco/README.md#installation)
``` diff
/* package.json */
""scripts"": {
-   ""start"": ""react-scripts start"",
+   ""start"": ""craco start"",
-   ""build"": ""react-scripts build"",
+   ""build"": ""craco build""
-   ""test"": ""react-scripts test"",
+   ""test"": ""craco test""
}
```
3. Create craco.config.js
``` javascript
module.exports = {
  webpack: {
    configure: (webpackConfig, { env, paths }) => {
      webpackConfig.externals = {
        react: {
          root: ""React"",
          commonjs2: ""react"",
          commonjs: ""react"",
          amd: ""react""
        },
        'react-dom': {
          root: ""ReactDOM"",
          commonjs2: ""react-dom"",
          commonjs: ""react-dom"",
          amd: ""react-dom""
        }
      }
      return webpackConfig;
    }
  }
}
```
4. edit public/index.html
``` diff
<div id=""root""></div>
+ <script src=""https://cdnjs.cloudflare.com/ajax/libs/react/17.0.1/umd/react.<%=  process.env.NODE_ENV==='development'?'development':'production' %>.min.js""></script>
+ <script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.1/umd/react-dom.<%= process.env.NODE_ENV==='development'?'development':'production' %>.min.js""></script>
</body>
</html>
  ```
5.  npm run start
6. React is mounted
![image](https://user-images.githubusercontent.com/9164133/104183735-604ff580-544d-11eb-9512-510b4bd137cb.png)

### Expected behavior

Render the page normally

### Actual behavior

![image](https://user-images.githubusercontent.com/9164133/104183141-7610eb00-544c-11eb-86e5-f2589ce8d585.png)



",Other
https://github.com/facebook/react/issues/20590,20590,"Bug: react-test-renderer provides no equivalent to attachTo option of Enzyme, mandatory to snapshot Leaflet and other","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-01-14T15:47:26Z,2021-01-15T10:35:54Z,2021-01-15T10:35:34Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. In a project with React, and react-leaflet@2.7.0
2.
```ts
import React from ""react"";
import Renderer from ""react-test-renderer"";
import { Map, TileLayer } from ""react-leaflet"";

let component = Renderer.create(
    <Map>
      <TileLayer
        attribution='&copy; <a href=""http://osm.org/copyright"">OpenStreetMap</a> contributors'
        url=""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png""
      />
    </Map>
  );
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-test-renderer-leaflet-mohzp
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

It raise an error `Map container not found.`

## The expected behavior

Enzyme's `attachTo` option allow to mount the comment in a more realistic environment, which fixes this bug. But there is no equivalent feature in `react-test-renderer` as far as I know.

See https://github.com/PaulLeCam/react-leaflet/issues/246 for more info about the Enzyme fix for this issue.

It should render the map as expected.",Other
https://github.com/facebook/react/issues/20598,20598,Bug: IE 11 not working with latest React version,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,6,2021-01-15T14:07:11Z,2021-01-15T17:28:42Z,2021-01-15T17:16:11Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 
react@17.0.1 
react-dom@17.0.1

## Steps To Reproduce

1. Create a new project with CRA: `npx create-react-app ie11-test --template typescript --use-npm`
2. Install polyfills for IE11: `npm i react-app-polyfill`
3. Add polyfills to src/index.tsx
4. Add IE 11 under both 'production' and 'development' in 'browserslist' in package.json
5. start dev server and open in IE 11

It does however start working in IE 11 if i downgrade react to 16.13.1 with `npm i react@16.13.1 react-dom@16.13.1` *but* I have to remove node_modules and do `npm i` again for it to start working in IE11. 

Version 16.14.0 is also broken in IE 11 though.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://github.com/Markus-ipse/react-ie11-issue/

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
When opening in IE11 it crashes with the following error message:
![image](https://user-images.githubusercontent.com/830794/104734888-31819a00-5741-11eb-86c7-502b89eef672.png)
> SCRIPT5022: Objects are not valid as a React child (found: object with keys {$$typeof, type, key, ref, props, _owner, _store}). If you meant to render a collection of children, use an array instead.
## The expected behavior
For it to not crash in IE11 after adding polyfills and adding IE11 to browserlists",Other
https://github.com/facebook/react/issues/20629,20629,Bug: React not giving error on calling the component on its render.,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-01-20T17:01:32Z,2021-01-20T17:32:02Z,2021-01-20T17:31:47Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.9.53

## Steps To Reproduce

1. Create a simple react app with create-react-app with typescript


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

<!-- Link to code example: (The issue can be replicated fairly easily) -->

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

Only changed App.tsx:
```js
const App = () => {
  return (
    <>
      <h1>Hello World</h1>
      <App />
    </>
  );
};


export default App
```

## The current behavior
The page just keeps loading

## The expected behavior
Some kind of error for calling a component inside itself infinitely.",Other
https://github.com/facebook/react/issues/20634,20634,"Error: ""Commit tree already contains fiber 1. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-01-21T04:46:23Z,2021-04-28T20:30:17Z,2021-01-21T13:50:32Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19661:17)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",Other
https://github.com/facebook/react/issues/20697,20697,Hydrate issues text content doesn't match for identical text content,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-01-30T08:09:22Z,2021-11-09T04:10:21Z,2021-01-31T20:41:05Z,NONE,completed,,"This relates to the stackoverflow question https://stackoverflow.com/questions/65939528/text-content-did-not-match-warning-for-identical-text 

The issue is that text that is interpolated in a component ends up generating multiple text nodes. For example consider this component:


```
const App = (props) => (
   <h1>
      Application version {props.version}
   </h1>
);
```
On when rendering it serverside (assuming props.version is e.g. 1.0.0) this renders:

```
<h1>Application version 1.0.0</h1>
```
the browser will then render the inner text in a single textnode 

However when react hydrates this element (or without SSR when it renders it) `document.querySelector('h1').childNodes` shows 2 text nodes, one containing ""Application version "" and once containing ""1.0.0"" so I guess my suggestion here either:

1.  Render adjacent text in the same textnode  or
2. Consider adjacent text nodes to match a single text node if the concatenated text content matches

I think using something like [normalize](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize) at some step of this process might help but I'm not sure where this can be added to not have an impact in performance (my guess is on the hydration warning side since that does not add any overhead in production versions?)
",Other
https://github.com/facebook/react/issues/20708,20708,Bug: Rule of hook should not apply when making an HOC,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,5,2021-02-01T10:48:20Z,2021-02-25T21:50:02Z,2021-02-24T09:46:11Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0..1

## Steps To Reproduce

1. Attempt to compile the following typescript

```typescript
import { useState } from ""react"";

const useMyHook = () => {
    let [value] = useState(null);
    return value;
}

const MyHOC = function (Component: any) {
    return function ({ ...otherProps }) {
        const value: any = useMyHook();
        return <Component value={value} {...otherProps} />
    }
}

export default MyHOC
```

## The current behavior

```
  Line 22:28:  React Hook ""useMyHook"" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function  react-hooks/rules-of-hooks
```

## The expected behavior

Since we're actually returning a new component, I expected that the rules of hook wouldn't apply in this particular case.

I personally think that HOCs would be a great way to abstract away even a single hook. My goal is to allow the users to use components transparently by directly feeding the result returned by the hook as a prop of the component.",Support
https://github.com/facebook/react/issues/20754,20754,Change default branch name to “main”. Currently is “master”,[],closed,TRUE,,2,2021-02-06T22:59:55Z,2022-07-25T07:16:31Z,2022-07-25T07:16:31Z,NONE,completed,,The word main is more inclusive than master. Master refers to slavery and makes some people feel lesser. Changing the branch name is a small but important gesture.,Other
https://github.com/facebook/react/issues/20757,20757,Bug: No way to specify the same CSS property twice in inline style,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-02-07T16:57:03Z,2021-02-09T21:48:10Z,2021-02-09T21:40:04Z,CONTRIBUTOR,completed,,"Hi! As far as I can tell there is no (simple) way in a React component to provide the same property twice in a style attribute, e.g. to turn into this HTML:

    style=""background-image: url(foo.jpg); background-image: -webkit-image-set(url(foo_1x.jpg) 1x, url(foo_2x.jpg) 2x)”

Providing the same property twice for browser compatibility reasons is a common practice. (Incompatible browsers will ignore the declaration they can’t parse. Compatible browsers will overwrite the fallback declaration with the newer declaration.)

My use case for an inline style here is that the image URLs are dynamic, from a DB.

I asked about it here and haven’t found or heard about a solution yet, other than introducing further dependencies: https://stackoverflow.com/questions/66060349/how-do-i-add-the-same-css-property-e-g-background-image-multiple-times-with-r

I admit this is a somewhat edgy case (both wanting multiple of the same property and an inline style) but I still think it could be considered a bug if React doesn’t support it. ",Support
https://github.com/facebook/react/issues/20769,20769,"Error: ""can't access property ""isCollapsed"", child is undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-02-09T17:20:35Z,2021-02-16T18:23:54Z,2021-02-16T18:23:53Z,NONE,completed,jarod-a-smith,"Describe what you were doing when the bug occurred:
1. On initializing dev tools for react components


---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Component stack: List@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:22629:30
div
AutoSizer@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:3003:19
div
div
Tree_Tree@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28429:47
div
div
InspectedElementContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28920:43
OwnersListContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:27557:37
SettingsModalContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:28205:40
Components_Components@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:33383:52
ErrorBoundary_ErrorBoundary@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29219:5
PortaledContent@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29336:27
div
div
ProfilerContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:32933:35
TreeContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24321:31
SettingsContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:24810:35
ModalDialogContextController@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:29403:38
DevTools_DevTools@moz-extension://6883bcc9-237a-4a4c-aa0b-be251be145ec/build/main.js:36206:27",Other
https://github.com/facebook/react/issues/20797,20797,Bug: react deverloper tools: component state read only,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-02-10T23:19:50Z,2021-02-16T18:23:32Z,2021-02-16T18:23:32Z,NONE,completed,,"React version:
react: 17.0.1
react-scripts: 4.0.1.
react developer tools: 4.10.1
chrome: 88.0.4324.150

## Steps To Reproduce

1. create create-react-app
2. build the app `yarn build`
3. Host the app somewhere
4. Open the app with react-developer-tools
5. Try to update the state of components



## The current behavior
State is grayed out and read only.

## The expected behavior
Able to upate the state.",Other
https://github.com/facebook/react/issues/20825,20825,Bug: conditionally using suspense with a fallback on server side causes hydration warnings,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710332294,""node_id"":""MDU6TGFiZWw3MTAzMzIyOTQ="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering"",""name"":""Component: Server Rendering"",""color"":""d4c5f9"",""default"":false,""description"":null},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,9,2021-02-15T06:55:48Z,2022-02-14T21:02:05Z,2021-02-18T01:11:26Z,NONE,completed,,"Conditionally using `Suspense` with a fallback on the server side causes incorrect hydration warnings

React version: 17.0.1

## Steps to reproduce
1. Try to hydrate a `<Suspense>` component with a fallback

Link to code example:
https://codesandbox.io/s/vibrant-heisenberg-f3wsj?file=/src/index.js

## The current behavior
It produces incorrect hydration warnings
<img width=""474"" alt=""Warning: Did not expect server HTML to contain a <p> in <div>."" src=""https://user-images.githubusercontent.com/5855663/107914198-9e6b9800-6f6a-11eb-9dd3-82000e254ee6.png"">


## The expected behavior
It should not produce hydration warnings...? Maybe...? I know it's a bit of a whacky use of suspense but the reason we're doing that is because it's pretty trivial to have all the data preloaded on the server in such a way where we are guaranteed to not suspend on the server side.

## Interesting behavior
[Removing `fallback=""Loading...""` causes the warning to go away](https://codesandbox.io/s/laughing-bassi-qwnef?file=/src/index.js)",Support
https://github.com/facebook/react/issues/20830,20830,"Error: ""Cannot read property 'concat' of undefined""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,10,2021-02-17T11:11:58Z,2021-05-20T02:18:48Z,2021-05-20T02:18:47Z,NONE,completed,alanjhughes,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19702:53)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",Other
https://github.com/facebook/react/issues/20835,20835,Bug: useRef acting weird in Strict mode.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,5,2021-02-17T19:42:33Z,2022-03-30T17:41:41Z,2021-02-17T21:37:47Z,CONTRIBUTOR,completed,,"React version: latest (tested with 16 and 17 both)

## Steps To Reproduce

Please see attached videos for reference and code sandbox for the live experiment

1.  Set component in StrictMode but wrapping it in `<React.StrictMode>`
2. Have a useRef in that component that takes an empty array as input.
3. Try mutating it on every render, maybe something like `refVar.current.push(""doesn't really matter what goes in here"")`
4. use that array (have made a simple list from that, but should apply to all cases)
5. array is being mutated from a different universe (to me it seems that only 😅 ).

Link to code example:
https://codesandbox.io/s/strict-bug-mrv-w7r11

## The current behavior
There are 2 `console.log` to show the value of the array before and after array mutation.
In strict mode when clicked provided button array gets an extra element, same as pushed valued. (Please see attachment one)

## The expected behavior
I believe this should be the same as when not in not strict mode.


Apart from this I also have tried using the debugger to see what actually is happening. When added breakpoint to `list.current.push()` it seems dev tools is stopping on that line twice. What even more confusing to me is, if in case function ran(rendered) twice, how come there is console only once, please attached video (attachment two ) for the same.

Attachments:
 1. https://user-images.githubusercontent.com/20264337/108258484-12ce5300-7186-11eb-8bb2-6e82a14ac856.mov
 2. https://user-images.githubusercontent.com/20264337/108256943-1fea4280-7184-11eb-9840-2dfc243eb6ae.mov
",Support
https://github.com/facebook/react/issues/20839,20839,"Error: ""Commit tree does not contain fiber 13586. This is a bug in React DevTools.""",[],closed,FALSE,,0,2021-02-18T15:24:44Z,2021-02-18T15:24:58Z,2021-02-18T15:24:58Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19594:26)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19587:32)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",Other
https://github.com/facebook/react/issues/20841,20841,Mixin rewrite with React and Higher-order-functions,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-02-18T16:23:13Z,2021-02-18T18:24:44Z,2021-02-18T18:24:37Z,NONE,completed,,"@gaearon How would you re-write the following mixins?

https://github.com/gerobit/ivis-core/blob/a51154c8937d4d392f20303caeb8b450ecf9189a/client/src/lib/decorator-
helpers.js",Support
https://github.com/facebook/react/issues/20842,20842,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,0,2021-02-18T17:42:25Z,2021-02-18T18:25:20Z,2021-02-18T18:24:17Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20851,20851,Bug: It seems that the default value in functional React component gets updated after render.,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-02-20T01:05:40Z,2022-03-30T18:11:56Z,2021-02-20T22:51:19Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

It seems that the default value in functional React component gets updated after render.

React version: 17.0.1

## Steps To Reproduce

I created a question on StackOverflow: https://stackoverflow.com/questions/66286856/why-default-value-in-functional-react-component-gets-updated-after-render, but also repeat it here:


```
const MyComponent = () => {

  // Initialise data with a random value:
  const [data, setData] = React.useState(
    () => {
      const data = _.sampleSize(_.range(5), 3)
      // Print data on initialisation:
      console.log('init data in default:', data)
      return data
    }
  )

  React.useEffect(() => {
    // Print data after the component is rendered:
    console.log('init data after render:', data)
  })

  return (
    <div>{data}</div>
  );
};
```

The output in console is:

```
[Log] init data in default: – [0, 3, 1] (3)
[Log] init data after render: – [2, 1, 3] (3)
```

My understanding is that before the component is rendered, the function under `useState` is called. The value returned by the function is assigned to `data`, and the `data` values is used to render the component on the screen. The function under `useState` is called only once and we never call `setData`, so the value should be the same. Maybe I miss something?

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

https://codesandbox.io/s/jovial-glade-9jm75?file=/src/App.js

## The current behavior

The output in console before and after render is different.

## The expected behavior

The output in console before and after render should be the same.",Support
https://github.com/facebook/react/issues/20875,20875,"Bug: useEffect hook, dom ref is null in unmount callback.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-02-24T19:19:32Z,2021-02-24T20:30:28Z,2021-02-24T20:30:28Z,NONE,completed,,"### DOM element references created with `useRef` are not null-ed by the time `useEffect` cleanup callback is called. 

React version:
>17
The same code works as expected in React below v17
## Steps To Reproduce

1. Create a functional component with a simple div returned and referenced with a `useRef` hook.
2. Add a `useEffect` hook and try to access the dom element on unmount.

note:
I understand that a local variable is the ideal solution for storing references inside useEffect, however this behaviour of null-ing  DOM element references by the time the unmount phase runs is new to React 17.

Link to code example:
https://codesandbox.io/s/interesting-water-n8c48?file=/src/App.js

## The current behavior
Inside useEffect cleanup: The ref.current value is null 

## The expected behavior
Inside useEffect cleanup:  The ref.current value should still point to the DOM element as the component has not unmounted yet.",Support
https://github.com/facebook/react/issues/20924,20924,Question about getting the latest state value in the concurrent mode,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null}]",closed,FALSE,,10,2021-03-03T15:25:10Z,2021-03-04T11:45:16Z,2021-03-04T11:45:16Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.1

## Steps To Reproduce

1. Enable strict mode for checking for possible issues in the future concurrent mode
2. create the below component and run the code
```
import { useCallback, useState } from ""react"";

const Example = ({ onIncrement }) => {
  const [count, setCount] = useState(0);

  const incrementHandler = useCallback(() => {
    onIncrement(count, count + 1);  // Is count guaranteed to be the latest state here due to including count in the useCallback dependency array?
    setCount((count) => count + 1);
  }, [count, onIncrement]);

  return (
    <>
      <span>{count}</span>
      <button onClick={incrementHandler}>increment</button>
    </>
  );
};

const Parent = () => (
  <Example
    onIncrement={(currentCount, incrementedCount) =>
      alert(
        `count before incrementing: ${currentCount}, after increment: ${incrementedCount}`
      )
    }
  />
);

export default Parent;
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

<!-- Link to code example: -->

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
In this simple example everything seems to be fine but in a more complicated situation full of event handlers that change the count or async callbacks that may change the count( like data fetching callbacks) the count value is not guaranteed to be the latest state and if I change the `incrementHandler` function like below:
```
const incrementHandler = useCallback(() => {
    setCount((count) => {
      onIncrement(count, count + 1);  
      return count + 1
    });
  }, [count, onIncrement]);
```
then the `onIncrement` will run twice in development while in strict mode and may run twice in production in concurrent mode according to documentation.
and If you suggest running the `onIncrement` in `useEffect` callback with `count` and `onIncrement` in effect's dependencies array how can I know that the `onClick` event of the increment button has caused the effect and not another event for example decrement or anything else.

you may say by setting another state that shows what is responsible for the effect, then I may need the previous state which unlike this example may be impossible to recalculate.

you may suggest using a ref for storing the previous state (count) then I will end up with **one extra state or ref for storing what is responsible for the effect to run**, **one extra ref for storing the previous state**, and **a useEffect hook to run the onIncrement click event handler**

## The expected behavior
Providing a second callback argument to `setState`  like in class Components that will run after this state update so we can save the current and next state and use it in the callback like below:
```
const incrementHandler = useCallback(() => {
    let prevCount, nextCount;
    setCount(
      (count) => {
        prevCount = count;
        nextCount = count + 1;
        return nextCount;
      },
      () => onIncrement(prevCount, nextCount)
    );
  }, [onIncrement]);
``` 
In my humble opinion, this doesn't collide with the async nature of `setCount` and can be implemented. 

unlike below`getState` proposals that if it will be asynchronous it may not return the desired state. and if it will be synchronous it will not return the latest state too because `setState` is not executed yet.

**wrong solution:**
```
const [count, setCount, getCount] = useState(0);

  const incrementHandler = useCallback(() => {
    setCount((count) => count + 1);
    const currentCount = getCount();
    const nextCount = currentCount + 1;
    onIncrement(currentCount, nextCount)
  }, [onIncrement]);
```
or providing a third array to `useCallback` for accessing the latest state can not be implemented due to the same problem with `getState` and async nature of setState.

Please tell me if I'm missing something or I've misunderstood things.

If not, please tell me if there is a simple solution for this scenario or similar ones, or tell me the best practices for running a callback or event handler with the latest state.

Thank you!",Support
https://github.com/facebook/react/issues/20930,20930,"[Reactjs][GeckoDriver] O_CREAT"", _c.fs is undefined in ./node_modules/tmp/lib/tmp.js","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-03-04T16:38:01Z,2021-03-05T10:33:18Z,2021-03-05T00:01:57Z,NONE,completed,,"https://github.com/SeleniumHQ/selenium/issues/9225 , still have issue ? Something better for alternative ? I just want fetch html ( and fetch is not super easiest solution (cors or not cors .... thats the question .... ) what I want to do)

React version: 17.0.1

## Steps To Reproduce

see selenium documentation for geckodriver install.
fellow this link https://github.com/SeleniumHQ/selenium/issues/9225 



Link to code example: https://github.com/c0ncentus/Selenium_issue 

## The current behavior
crash with this message O_CREAT"", _c.fs is undefined in ./node_modules/tmp/lib/tmp.js

## The expected behavior
not crash and do stuff with selenium.

it is React or nodejs issue ?
",Other
https://github.com/facebook/react/issues/20935,20935,Uncaught Invariant Violation: Hooks can only be called inside the body of a function component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-03-05T04:52:31Z,2021-03-24T19:37:48Z,2021-03-24T19:37:48Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/20969,20969,Bug: Create-react-app error using bash and tried powershell and more,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,3,2021-03-10T03:38:46Z,2021-03-11T07:47:27Z,2021-03-10T13:29:41Z,NONE,completed,,"  
I decided to try and learn react and was following the instructions listed here https://reactjs.org/docs/create-a-new-react-app.html. So I made a folder opened it in vscode, went into my bash terminal and ran the below code as instructed. 

npx create-react-app my-app // But i used demo 

once completed then cd'ed into my demo folder
cd my-app

and then typed npm start and this is where I get this bug
npm start

error: 

```
PersonalInfo@DESKTOP-C0M5IPI MINGW64 /f/1.Web Development/Tutorials&Courses/Devslopes/learn-react/demo-app (master)
$ npm start

> demo-app@0.1.0 start
> react-scripts start

'Courses\Devslopes\learn-react\demo-app\node_modules\.bin\' is not recognized as an internal or external command,
operable program or batch file.
internal/modules/cjs/loader.js:883
  throw err;
  ^

Error: Cannot find module 'F:\1.Web Development\react-scripts\bin\react-scripts.js'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:880:15)
    at Function.Module._load (internal/modules/cjs/loader.js:725:27)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}
```

Now I tried, running npm install and then npm start and still same error. I have tried different folder names and locations ect, i'm starting to think this is a bug with bash because prior to me wanting to learn react was working with node and express and databases(mongodb) all day today.

I have node.js installed globally and i'm sure the npx create-react-app installs node locally to the folder. I'm at a loss here, even went inside discord and asked for help in various channels and people also don't know whats going on here. 

Upon further inspection it seems that inside the error its for some reason trying to locate the node module from this directory which is weird F:\1.Web Development\react-scripts\bin\react-scripts.js because when I ran npx create-react-app demo in this directory /f/1.Web Development/Tutorials&Courses/Devslopes/learn-react/ and then cd into demo. and ran npm start and this gives me the above error. 

React version: what ever version get loaded with npx create-react-app 

## Steps To Reproduce

I just created a main folder inside my other folders called learn-react opened that in visual code and then followed the guide for npx create-react-app demo and then followed the next instructions once i got to the npm start or npm run start tried both commands and it results is said error. 

I tried switching terminal and used default powershell in vscode and still same error. I'm not sure what happened cause like i said above was using npm to install packages all day today and then when i wanted to learn react this is happening to me...

Link to code example:

google drive video: https://drive.google.com/file/d/1bYmT--iQ49ymJ2co0S6YGxBksmVXvCbL/view?usp=sharing

",Other
https://github.com/facebook/react/issues/20988,20988,Bug: React appends element twice when using `document.doby.appendChild()`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,1,2021-03-12T05:49:52Z,2021-03-12T08:33:32Z,2021-03-12T08:33:26Z,NONE,completed,,"React appends element twice when using `document.doby.appendChild()`

React version: 17.0.1

## Steps To Reproduce

1. Create a sample app with nix with the following code:
    ```
    npx create-react-app test 
    ```
2. Add a child element to the document with  `document.doby.appendChild()` like demonstrated in the code example below.
3. Now save and run the app with code:
    ```
    npm start
    ```
4. Now you gonna see 2 divs  called `Hello` with a 'Hello Test' innerHtml In the Elements tag of your Chrome DevTools
![Screen Shot 2021-03-12 at 13 49 21](https://user-images.githubusercontent.com/17794470/110898229-cc5db580-8339-11eb-9bf8-bcd5fcade783.png)


## Code example:
``` 
    import React, {Component} from 'react';
    import logo from './logo.svg';
    import './App.css';
    
    class App extends Component {
    
        constructor(props) {
            super(props);
    
            let link = document.createElement(""div"");
            link.className = ""Hello"";
            link.innerHTML = ""Hello Test"";
            document.body.appendChild(link);
        }
    
    
        render() {
            return (
                <div className=""App"">
                    <header className=""App-header"">
                        <img src={logo} className=""App-logo"" alt=""logo""/>
                        <p>
                            Edit <code>src/App.js</code> and save to reload.
                        </p>
                        <a
                            className=""App-link""
                            href=""https://reactjs.org""
                            target=""_blank""
                            rel=""noopener noreferrer""
                        >
                            Learn React
                        </a>
                    </header>
                </div>
            );
        }
    }
    
    export default App;

 ```

## The current behavior
Tow `<div class=""Hello"">Hello Test</div>`s in the HTML

## The expected behavior
Only one `<div class=""Hello"">Hello Test</div>` in the HTML
",Support
https://github.com/facebook/react/issues/20990,20990,Bug: performing input.select() in IE11 throws a React error,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105383,""node_id"":""MDU6TGFiZWw2OTEwNTM4Mw=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20IE"",""name"":""Browser: IE"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2021-03-12T17:51:22Z,2022-03-29T23:06:17Z,2022-03-29T23:06:16Z,NONE,completed,,"The example below is extracted from the app with a spreadsheet-like UI, where cells become editable upon focus (can be achieved either by tabbing into the cells or clicking). The text in such cell immediately becomes selected.

The bug occurs only in IE11, as the user navigates from one such cell to another by clicking.
Likely related to https://github.com/facebook/react/pull/19664.

React version: 17.0.1

## Steps To Reproduce

1. Clone https://github.com/Dremora/react-i11-input-focus-bug
2. Install dependencies (`yarn`) and start the app (`yarn start`)
3. Open http://localhost:3000 in IE11
4. Click on the text saying `hello`
5. Click on the text saying `world`

Link to code example: https://github.com/Dremora/react-i11-input-focus-bug/blob/master/src/App.js

## The current behavior
`Unspecified error` gets logged to the console, followed a few other errors, one of them being `Should not already be working` error. As this is a React internals error, application stops working. Nothing gets thrown in the user-land code.

## The expected behavior
`world` text gets selected.",Other
https://github.com/facebook/react/issues/21026,21026,"Bug: DevTools built-in hook number badges are broken for ""light"" theme","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,0,2021-03-18T00:32:29Z,2021-03-19T13:52:59Z,2021-03-19T13:52:59Z,COLLABORATOR,completed,bvaughn,"I mostly use the ""dark"" theme which these badges looked good in. The ""light"" theme is broken though. No contrast.",Bug
https://github.com/facebook/react/issues/21036,21036,React App Show me this Error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-03-19T15:41:25Z,2021-03-20T03:20:38Z,2021-03-20T03:20:38Z,NONE,completed,sureshjangid,"
![Screenshot (234)](https://user-images.githubusercontent.com/75411144/111806067-9bf8b700-88f7-11eb-8c82-cf96ba48aea4.png)
![Screenshot (233)](https://user-images.githubusercontent.com/75411144/111806017-90a58b80-88f7-11eb-8931-6ac4c0da7221.png)
![Screenshot (235)](https://user-images.githubusercontent.com/75411144/111806390-ed08ab00-88f7-11eb-81bf-69536ba1df64.png)
",Support
https://github.com/facebook/react/issues/21055,21055,Bug: Lazy loading a component throws Unchaught undefined,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,10,2021-03-22T23:15:57Z,2021-07-06T12:17:50Z,2021-03-24T19:40:23Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1. Upgrade from React 16 to React 17 (react and react-dom both to 17.0.2)
2. Do not touch the source code besides upgrading react versions

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->


<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Receiving `Unchaught undefined` when trying to render a lazy-loaded component inside `<Suspense />`

## The expected behavior

The code works as it was on version 16.
",Support
https://github.com/facebook/react/issues/21066,21066,asdf,"[{""id"":2392325672,""node_id"":""MDU6TGFiZWwyMzkyMzI1Njcy"",""url"":""https://api.github.com/repos/facebook/react/labels/invalid"",""name"":""invalid"",""color"":""ffefc4"",""default"":true,""description"":""""}]",closed,FALSE,,0,2021-03-24T10:44:55Z,2021-03-24T10:54:19Z,2021-03-24T10:54:12Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/21070,21070,asdf,"[{""id"":2392325672,""node_id"":""MDU6TGFiZWwyMzkyMzI1Njcy"",""url"":""https://api.github.com/repos/facebook/react/labels/invalid"",""name"":""invalid"",""color"":""ffefc4"",""default"":true,""description"":""""}]",closed,FALSE,,0,2021-03-24T10:44:57Z,2021-03-24T10:55:31Z,2021-03-24T10:54:09Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/21098,21098,Bug: aspectRatio not being applied via style,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,7,2021-03-25T15:03:36Z,2021-03-26T07:10:48Z,2021-03-25T17:01:36Z,NONE,completed,,"React version: 16.14.0, 17.0.2

## Steps To Reproduce

1. Apply aspectRatio via `style` - no aspectRatio applied
2. Add via className - aspectRatio applied

Needs Chrome 79 or above:
Link to code example: https://codesandbox.io/s/react-bug-not-applying-aspect-ratio-via-style-w2pqh?file=/src/App.js

## The current behavior

No aspectRatio rule applied:
https://codesandbox.io/s/react-bug-not-applying-aspect-ratio-via-style-w2pqh?file=/src/App.js


## The expected behavior

aspectRatio applied, here I'm adding it via a `useLayoutEffect`:
https://codesandbox.io/s/currying-hill-i09qn?file=/src/App.js
",Support
https://github.com/facebook/react/issues/21115,21115,"Error: ""value is undefined""",[],closed,FALSE,,1,2021-03-27T10:24:27Z,2021-03-27T14:49:48Z,2021-03-27T14:49:42Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Component stack: AutoSizeInput_AutoSizeInput@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:29827:19
Field@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31855:15
div
Row@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31754:13
div
StyleEditor_StyleEditor@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31645:33
NativeStyleEditor@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31932:50
NativeStyleEditorWrapper@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31912:44
div
InspectedElementView_InspectedElementView@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31991:51
div
InspectedElementWrapper@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:32192:50
Suspense
NativeStyleContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:31434:38
div
div
InspectedElementContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:28920:43
OwnersListContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:27557:37
SettingsModalContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:28205:40
Components_Components@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:33383:52
ErrorBoundary_ErrorBoundary@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:29219:5
PortaledContent@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:29336:27
div
div
ProfilerContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:32933:35
TreeContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:24321:31
SettingsContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:24810:35
ModalDialogContextController@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:29403:38
DevTools_DevTools@moz-extension://65865dd8-b79d-432e-893e-c14607a468af/build/main.js:36206:27",Other
https://github.com/facebook/react/issues/21120,21120,Bug: exhaustive-deps tells me to add state to deps but it shouldn't be the case,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2021-03-28T12:08:36Z,2021-03-29T13:51:30Z,2021-03-29T13:51:30Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

I have Add/Edit form with dynamic fields for it. So, I have two parts of the form: shape (fields itself) and data to populate those fields initially (in edit case). Thus, I propagate shape to initialState of form and update data in useEffect if needed.

However I have to copy the state in useEffect because otherwise setState won't trigger re-render sometimes. But exhaustive-deps linter rule tells me I have to add state variable to deps as well as data from props. If I do that I'll run into infinite re-render of course.

React version: 16.14.0

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
```
import React, { useState, useEffect } from 'react';

const AddEditForm = ({ fields, editData }) => {
  const initialState = Object.fromEntries(fields.map(([key]) => [key, '']));
  const [formData, setFormData] = useState(initialState);

  useEffect(() => {
    if (editData) {
      const newState = { ...formData };
      Object.entries(editData)
        .forEach(([key, value]) => {
          newState[key] = value;
        });
      setFormData(newState);
    }
  }, [editData]);

  return (
    <form>
      {Object.entries(formData).map(([key, value]) => (
        <>
          <label htmlFor={key}>
            {key}
            <input
              id={key}
              type=""text""
              value={value}
              onChange={
                (event) => setFormData({ ...formData, [key]: event.target.value })
}
            />
          </label>
        </>
      ))}
    </form>
  );
};

export default AddEditForm;


```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
![image](https://user-images.githubusercontent.com/3126341/112751366-52cef400-8fd6-11eb-8c89-4b84e5a201a8.png)


## The expected behavior
I think rule should not suggest to add state to deps",Support
https://github.com/facebook/react/issues/21140,21140,"Error: ""Commit tree does not contain fiber 74. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-03-30T17:21:18Z,2021-03-30T18:29:34Z,2021-03-30T18:29:25Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. I am trying to record using profiler on my react app
2. when , I stop recording .This bug appears
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-f160547f47

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19729:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19574:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20115:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34161:33)
    at Hh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:12807:7)
    at qi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13457:7)
    at mk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16074:86)
    at lk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15459:11)
    at kk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15451:23)
    at ck (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15435:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34144:50)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28206:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35772:50)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29219:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29336:32)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32934:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24322:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24811:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29404:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:36207:3)",Other
https://github.com/facebook/react/issues/21160,21160,Exposing possibleStandardNames as a module proposal,[],closed,FALSE,,5,2021-04-01T12:18:24Z,2021-04-01T14:07:25Z,2021-04-01T13:59:40Z,NONE,completed,,"I'm curious if there'd be any interest in exposing [possibleStandardNames.js](https://github.com/facebook/react/blob/a423a01223785a8bc4dcd55f2a0288200b033eee/packages/react-dom/src/shared/possibleStandardNames.js) as an importable entity for users of React. It wouldn't have to be this mapping object specifically; just a utility or some way to be able to reliably and programmatically map `accesskey` to `accessKey`, `class` to `className`, etc.

The use-case I have is that we expose a WYSIWYG editor to end users in some places and then after the WYSIWYG data is sanitized and saved as an HTML string on the server, we render it back out on other screens. For a first pass I had to simply dangerously set that HTML string so that formatting was preserved, but I'd really like to go a step further and transform the HTML string programmatically into React elements. This would allow me to _enhance_ the markup and do logic like:

```
if (nodeName === 'img') {
  // attach a click handler that opens a dialog with a zoomable view and/or render a totally different component instead of a plain old image
} else if (nodeName === 'a') {
  // add target=""_blank"" to make sure all links open in new tabs, then render the a tag, preserving all other attributes
} else {
  // just render the node as is, preserving attributes
}
```

The trouble is that I can't just dump attributes from the parsed DOM node onto a created React element, because they don't match. Right now it seems that the only good way to achieve the attribute mapping is to manually write them myself (which is brittle and laborious) or to copy the `possibleStandardNames.js` file from the React repo (at the correct version tag, of course) and make sure that someone remembers to keep it up to date when we bump versions of React (again, brittle and pretty error prone).

Maybe I'm going about this the wrong way, but I expect I'm not the only person with this (or similar) use case, but I am very interested to hear discussion/rationale in favor or against this proposal.

Thanks",Feature
https://github.com/facebook/react/issues/21172,21172,Bug: DevTools settings dialog no longer opens,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,7,2021-04-03T13:24:52Z,2021-04-05T15:09:43Z,2021-04-05T15:09:43Z,COLLABORATOR,completed,bvaughn,"Click the settings gear in either the inline or extension build and it does not open.

Edit: This was broken by a change to React via f8ef4ff571db3de73b0bfab566c1ce9d69c6582f / #21150",Bug
https://github.com/facebook/react/issues/21191,21191,useCallback memoization,[],closed,FALSE,,2,2021-04-07T18:24:23Z,2021-04-08T00:56:30Z,2021-04-08T00:56:29Z,NONE,completed,,"I want to continue a discussion about the `useCallback` that started on twitter (https://twitter.com/ramon_fritsch/status/1379569928454303749) here, following @gaearon's suggestion.

It's about `useCallback` returning a new reference when dependencies change. I always wondered if that's what we usually want.

Take this example: https://codesandbox.io/s/sipxs

I understand `useCallback` is intended to use on event handlers and regular callback props, thus we need to make it as flexible as possible. But the case for event handlers, I'd suggest to have a new hook `useEventCallback` that would memoize the callback function forever and never return a new reference, helping in not causing a re-render down the chain.

The folks from Formium solved this with https://github.com/formium/formik/blob/2d613c11a67b1c1f5189e21b8d61a9dd8a2d0a2e/packages/formik/src/Formik.tsx#L1193-L1205

Isn't it important enough to become a core hook in the React ecosystem? Or at least have a clear statement in the documentation about this behavior and best practices for event handlers?
",Support
https://github.com/facebook/react/issues/21206,21206,Cannot Found Out The Error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,6,2021-04-08T12:11:52Z,2021-05-04T13:38:22Z,2021-05-04T13:38:22Z,NONE,completed,Rajan-max,"I have already tried all the solutions mentioned still none of them works.Neither the reasons are matching with my error..Please Help
![Screenshot (6)](https://user-images.githubusercontent.com/51814768/114024440-c8b74300-9893-11eb-8633-2cd949e4cd3c.png)

",Other
https://github.com/facebook/react/issues/21213,21213,React Developer Tools chrome extension not detecting react,"[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-04-08T22:37:17Z,2021-04-13T15:44:23Z,2021-04-13T15:44:23Z,NONE,completed,,"Google Chrome
Version 89.0.4389.114 (Official Build) (x86_64)

macOS Big Sure
Version: 11.2.3 (20D91)

I'm developing on localhost. All-access, including file-urls and incognito mode, are allowed. 

Weird thing is the redux tool seems to be working just fine.

EDIT: I just realized that having a particular URL pattern breaks the react detection:
`http://localhost:3000/fakeframe/?link=http://localhost:3000/some/feature-im-working-on`
It's not using an iframe or anything, just a particular URL format used when doing certain things on our app. 

My problem is solved, but I'll leave this open for bug exposure in case anyone else runs into this.",Other
https://github.com/facebook/react/issues/21241,21241,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-04-12T14:19:56Z,2021-04-12T14:24:09Z,2021-04-12T14:24:04Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22171:35)
    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22187:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29770:63
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23893:18)
    at Ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14002:76)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13993:10)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16728:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)",Other
https://github.com/facebook/react/issues/21243,21243,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-04-12T18:19:06Z,2021-04-12T18:34:38Z,2021-04-12T18:34:30Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getElementAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22171:35)
    at store_Store.getElementIDAtIndex (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22187:26)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29770:63
    at List.render (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23893:18)
    at Ii (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14002:76)
    at Hi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13993:10)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16728:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)",Other
https://github.com/facebook/react/issues/21244,21244,"Error: ""Commit tree does not contain fiber 110. This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-04-12T21:02:37Z,2021-04-13T00:33:12Z,2021-04-13T00:33:04Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1.  Trying to run profiler to test renders
2.  This is my first issue so I'm not sure what else to write here
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20532:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20377:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20951:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35462:33)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13245:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13944:7)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16725:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35445:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37243:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)",Other
https://github.com/facebook/react/issues/21258,21258,"Error: ""Cannot read property 'isCollapsed' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2021-04-14T02:51:57Z,2021-08-11T01:15:56Z,2021-04-29T18:06:25Z,CONTRIBUTOR,completed,,"Describe what you were doing when the bug occurred:
1. Refresh the page I'm inspecting.
2. Notice two warnings in the errors and warnings section, like so: 
<img width=""196"" alt=""Screen Shot 2021-04-13 at 7 44 32 PM"" src=""https://user-images.githubusercontent.com/1285131/114647125-65f9e900-9c91-11eb-8412-c7807a1c7063.png"">
3. Click any arrow, either the one going up or the one going down, to view one of them. The tools crash.

If I restart the tools, things work smoothly again. I also don't see the warnings anymore.

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at store_Store.getIndexOfElementID (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:22245:24)
    at getCurrentValue (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29244:29)
    at useSubscription (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25874:12)
    at SelectedTreeHighlight_SelectedTreeHighlight (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29268:16)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13245:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13944:7)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16725:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16221:5)

Component stack: at SelectedTreeHighlight_SelectedTreeHighlight (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29213:34)
    at div
    at InnerElementType (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29953:3)
    at div
    at List (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23588:30)
    at div
    at AutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:3111:5)
    at div
    at div
    at Tree_Tree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29531:47)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28680:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34645:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)",Bug
https://github.com/facebook/react/issues/21271,21271,"Error: ""Could not find node with id ""40035"" in commit tree""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2021-04-14T19:16:21Z,2022-02-05T22:01:38Z,2021-04-28T14:29:23Z,NONE,completed,jonsundberg,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.11.0-39713716aa

Call stack: at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20884:13
    at Map.forEach (<anonymous>)
    at RankedChartBuilder_getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20880:24)
    at ProfilingCache_ProfilingCache.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21004:11)
    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35717:32)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13245:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13944:7)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16725:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16245:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16237:23)

Component stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35696:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29121:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37243:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30035:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30157:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34264:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25356:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25963:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30300:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37639:3)",Other
https://github.com/facebook/react/issues/21315,21315,DevTools doesn't seem to install properly,[],closed,FALSE,,0,2021-04-19T15:58:17Z,2021-04-19T15:59:43Z,2021-04-19T15:59:43Z,NONE,completed,,"I have react devtools ""installed"" on my chrome account: on the installation page it appears to be installed. However, other developer friends of mine say that I don't have any of the features that are supposed to come with it and that it looks like it's not even installed. Any guidance on this would be appreciated because I don't know what else I can do aside from repeatedly clicking the add/remove button.",Other
https://github.com/facebook/react/issues/21321,21321,"Error: ""can't access property ""isCollapsed"", child is undefined""","[{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-04-20T15:00:05Z,2021-05-03T13:52:55Z,2021-05-03T13:52:55Z,NONE,completed,Jurrevandenberg,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.12.3-8f202a7c8d

Component stack: List@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:23907:30
div
AutoSizer@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:3140:19
div
div
Tree_Tree@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29857:47
div
div
OwnersListContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29005:37
SettingsModalContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:29446:40
Components_Components@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:37593:52
ErrorBoundary_ErrorBoundary@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33093:5
PortaledContent@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33172:34
div
div
ProfilerContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:37211:35
TreeContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:25674:31
SettingsContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:26288:35
ModalDialogContextController@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:33315:38
DevTools_DevTools@moz-extension://d7e5d713-e002-4ecc-9f7e-2f81502878f8/build/main.js:40586:27",Other
https://github.com/facebook/react/issues/21371,21371,Bug: calling calling `setState` twice inside `useEffect` creates extra function calls,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,2,2021-04-28T00:12:41Z,2021-04-28T20:04:54Z,2021-04-28T07:47:07Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1. Create a function component
2. Call 2 `setState` functions inside a `useEffect` hook.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

```tsx
import { FC, useEffect, useState } from 'react'

const resolvedPromise = Promise.resolve()

const Test: FC = () => {
  const [a, setA] = useState(2)
  const [b, setB] = useState(0)

  useEffect(() => {
    let canceled = false

    resolvedPromise.finally(() => {
      console.log(a, b, canceled)
      if (canceled) return
      if (a > 0) {
        setA(a - 1)
        setB(b + 1)
      }
    })

    return () => {
      canceled = true
    }
  }, [a, b])

  return null
}
```

Link to code example: https://codesandbox.io/s/react-bug-606s4?file=/src/App.tsx

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
- `b` ends up being `1`.
- There is an extra function call when `a` is `1` and `b` is `0`. I think this is after `setA(a - 1)` but before `setB(b + 1)`.
- The function call with `1 0 false` was not canceled.
- The function call with `1 1 true` was canceled.

Current console output:
```
2 0 false
1 0 false 
1 1 true
0 1 false
```
## The expected behavior
- `b` ends up being `2`
- No extra function call in between `setA()` and `setB()`

Expected console output:
```
2 0 false
1 1 false
0 2 false
```
",Other
https://github.com/facebook/react/issues/21376,21376,Bug: The digital precision in Style Object is lost.,"[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-04-28T13:16:10Z,2021-05-05T21:01:34Z,2021-05-05T21:01:34Z,NONE,completed,,"
React version:
  v17.0.2
## Steps To Reproduce

```javascript
class App extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
    	scaleX: 1/3
    }
  }
  
  render() {
    const { scaleX } = this.state;
    return (
      <div
        className='box'
        data-scaleX={scaleX}
        style={{
      	  transform: `scaleX(${scaleX})`
        }}
       >
         {scaleX}
       </div>
    )
  }
}
```


Link to code example:

https://jsfiddle.net/slaneyang/cduvptLh/

## The current behavior
![image](https://user-images.githubusercontent.com/16184782/116409482-7780ea80-a866-11eb-80c3-3ecbc670fb8f.png)

## The expected behavior
![image](https://user-images.githubusercontent.com/16184782/116409585-92535f00-a866-11eb-9616-a3db697b9f4d.png)

**In this example, the precision of scaleX is lost.**

",Support
https://github.com/facebook/react/issues/21389,21389,"Error: ""Commit tree does not contain fiber ""951"". This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-04-29T10:05:19Z,2021-04-29T14:34:42Z,2021-04-29T14:34:33Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.13.0-2a7bb41548

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20430:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20275:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20803:11)
    at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35651:33)
    at Qh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13178:7)
    at Bi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13879:7)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16673:86)
    at tk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16193:11)
    at qk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16185:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16169:5)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35634:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29016:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37064:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30336:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30416:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34462:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25252:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25855:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30558:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37572:3)",Other
https://github.com/facebook/react/issues/21390,21390,Bug: Cannot read property __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED of undefined,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-04-29T15:59:50Z,2021-04-29T18:29:34Z,2021-04-29T18:29:06Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

# I got this issue when using react in deno deploy, but i think it will still throw this error in nodejs

## Code: https://github.com/code913/react-ssr-deno

![what the heck is this tbh](https://user-images.githubusercontent.com/54856929/116580980-82ed1800-a931-11eb-8671-05cb0cde4dfc.png)

React version: 17.0.2 react-dom, react version latest

## Steps To Reproduce

1. Import react-dom from the umd production or development url (havent tested others): `https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.min.js`
2. Try to hydrate some data from react-dom/server",Support
https://github.com/facebook/react/issues/21396,21396,"Error: ""Commit tree does not contain fiber ""2456"". This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-04-30T09:30:48Z,2021-04-30T14:04:20Z,2021-04-30T14:03:54Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.12.3-8f202a7c8d

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20851:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20716:26)
    at ProfilingCache_ProfilingCache.getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21270:11)
    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38661:33)
    at Rh (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:13416:7)
    at Ci (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:14117:7)
    at vk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16901:86)
    at uk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16421:11)
    at rk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16413:23)
    at jk (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16397:5)

Component stack: at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38644:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29447:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40191:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33093:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33173:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37212:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25675:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26289:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33316:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40587:3)",Other
https://github.com/facebook/react/issues/21408,21408,"Error: ""Commit tree does not contain fiber ""48424"". This is a bug in React DevTools.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-05-02T14:56:52Z,2021-05-25T18:49:52Z,2021-05-25T18:49:52Z,NONE,completed,,"Describe what you were doing when the bug occurred:
1. 
2. 
3. 

---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.13.0-2a7bb41548

Call stack: at updateTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20430:21)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20295:26)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)
    at getCommitTree (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:20288:32)

Component stack: at CommitFlamegraphAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35634:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:29016:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37064:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30336:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30416:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34462:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25252:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25855:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30558:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37572:3)",Other
https://github.com/facebook/react/issues/21411,21411,Bug: Bug: Error message incorrectly,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-05-03T08:41:27Z,2021-05-07T20:33:07Z,2021-05-07T20:33:07Z,NONE,completed,0xdevnet,"Getting this error message:

React Hook ""useStyles"" is called conditionally. React Hooks must be called in the exact same order in every component render

However, I'm pretty darn sure that I'm not actually calling useStyles conditionally. Also, the error messages come and go if I comment out unrelated code.

React version: 16.8",Other
https://github.com/facebook/react/issues/21435,21435,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-05-05T15:02:15Z,2021-05-05T15:08:05Z,2021-05-05T15:08:05Z,NONE,completed,,"


",Other
https://github.com/facebook/react/issues/21444,21444,"Error: ""Node ""103"" was removed before its children.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2021-05-06T10:31:22Z,2021-05-18T15:44:13Z,2021-05-18T15:44:12Z,NONE,completed,bvaughn,"<!-- Please answer both questions below before submitting this issue. -->

### Which website or app were you using when the bug happened?

Please provide a link to the URL of the website (if it is public), a CodeSandbox (https://codesandbox.io/s/new) example that reproduces the bug, or a project on GitHub that we can checkout and run locally.

### What were you doing on the website or app when the bug happened?

If possible, please describe how to reproduce this bug on the website or app mentioned above:
1. <!-- FILL THIS IN -->
2. <!-- FILL THIS IN -->
3. <!-- FILL THIS IN -->

<!--------------------------------------------------->
<!-- Please do not remove the text below this line -->
<!--------------------------------------------------->

### Generated information

DevTools version: 4.13.1-93782cfed2

Call stack:
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21514:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19607:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37788:39)

Component stack:
(none)

GitHub URL search query:
https://api.github.com/search/issues?q=Node%20%20was%20removed%20before%20its%20children.%20in%3Atitle%20is%3Aissue%20is%3Aopen%20is%3Apublic%20label%3A%22Component%3A%20Developer%20Tools%22%20repo%3Afacebook%2Freact",Bug
https://github.com/facebook/react/issues/21446,21446,Renaming `getComponentName` to `getComponentNameFromType` in the error log,[],closed,FALSE,,2,2021-05-06T13:39:06Z,2021-05-07T04:32:18Z,2021-05-07T01:03:36Z,NONE,completed,,"https://github.com/facebook/react/blob/bd070eb2c489a1f758e4a55b193820af7346fa15/packages/shared/getComponentNameFromType.js#L56

A very small thing, would it be better to change the `getComponentName` to `getComponentNameFromType` in the error log since we separated the original logic into two functions (`getComponentNameFromType`, `getComponentNameFromFiber`)? Although it wouldn't be an issue for the authors, it feels like it would be better to sync it with the function name? Would you mind renaming it in the next 'typo fixing'?",Other
https://github.com/facebook/react/issues/21455,21455,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-05-07T05:59:33Z,2021-05-07T08:32:59Z,2021-05-07T08:32:59Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/21457,21457,"Error: ""Cannot add node ""1"" because a node with that id is already in the Store.""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-05-07T09:48:09Z,2021-05-07T12:45:06Z,2021-05-07T12:44:40Z,NONE,completed,,"<!-- Please answer both questions below before submitting this issue. -->

### Which website or app were you using when the bug happened?

Please provide a link to the URL of the website (if it is public), a CodeSandbox (https://codesandbox.io/s/new) example that reproduces the bug, or a project on GitHub that we can checkout and run locally.

### What were you doing on the website or app when the bug happened?

If possible, please describe how to reproduce this bug on the website or app mentioned above:
1. <!-- FILL THIS IN -->
2. <!-- FILL THIS IN -->
3. <!-- FILL THIS IN -->

<!--------------------------------------------------->
<!-- Please do not remove the text below this line -->
<!--------------------------------------------------->

### Generated information

DevTools version: 4.13.1-93782cfed2

Call stack:
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21390:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19607:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19767:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37788:39)

Component stack:
(none)

GitHub URL search query:
https://api.github.com/search/issues?q=Cannot%20add%20node%20%20because%20a%20node%20with%20that%20id%20is%20already%20in%20the%20Store.%20in%3Atitle%20is%3Aissue%20is%3Aopen%20is%3Apublic%20label%3A%22Component%3A%20Developer%20Tools%22%20repo%3Afacebook%2Freact",Bug
https://github.com/facebook/react/issues/21469,21469,[DevTools Bug]: Children list grows indefinitely when adding/removing useEffect,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-05-08T15:43:14Z,2021-05-18T15:43:29Z,2021-05-18T15:43:29Z,COLLABORATOR,completed,bvaughn,"### Website or app

Please checkout the linked branch not `main`
https://github.com/eps1lon/react-devtools-repro-no-matching-node/tree/repro/elements-leaking
Repro steps and screen recording included in the repro

### Repro steps

1. Clone repro
1. yarn
1. yarn start
1. Open app page
1. open devtools
1. Uncomment the `useEffect` block i.e. add an effect
1. inspect `Component` element
1. comment `useEffect` block i.e. remove the effect
1. Repeat comment/uncomment to see that children grow indefinitely


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

Could not inspect element with id 4

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_

Might be a duplicate of https://github.com/facebook/react/issues/21436#issuecomment-835406075 since the repro steps are the same. But depending on what the effect is doing, the behavior is different.",Bug
https://github.com/facebook/react/issues/21510,21510,Bug: Effects are run on parents of suspending components,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,6,2021-05-14T14:37:34Z,2022-03-29T22:47:19Z,2021-05-15T06:38:27Z,NONE,completed,,"With a component hierarchy like:

```tsx
<Suspense>
  <Parent>
    <Child /> {/*<-- this one suspends */}
  </Parent>
</Suspense>
```

If the child throws to suspense, neither the parent nor child are in the DOM. However, the parents effects are still run. This breaks classes of layout effects, e.g. measuring text etc.

React version: 17.0.2

## Steps To Reproduce

1. Open code sandbox
2. Look at console

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/parent-effects-suspense-m2k4q?file=/src/App.tsx (see the console)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Effects are run on parent component even though it isn't in the DOM

## The expected behavior
Effects are not run on the parent component until it is actually mounted",Bug
https://github.com/facebook/react/issues/21522,21522,"[DevTools Error] Cannot remove node ""771"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,6,2021-05-18T16:52:46Z,2021-05-19T04:03:28Z,2021-05-19T02:46:51Z,NONE,completed,aluiscode,"### Website or app

https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/

### Repro steps

I'm using a context to manage app global state like in [Website](https://soshace.com/react-user-login-authentication-using-usecontext-and-usereducer/) when get that error

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""771"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/21527,21527,"[DevTools Error] Cannot remove node ""527"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-05-19T14:12:31Z,2021-05-19T15:08:38Z,2021-05-19T15:08:38Z,NONE,completed,khairmuhammadLU,"### Website or app

localhost

### Repro steps

The error was thrown at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""527"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21477:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19585:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19745:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37733:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/21528,21528,[DevTools Bug]: Fast Refresh + DevTools breaks component inspection,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-05-19T15:50:20Z,2021-05-20T21:10:13Z,2021-05-20T15:24:09Z,COLLABORATOR,completed,bvaughn,"### Website or app

https://github.com/eps1lon/react-devtools-repro-no-matching-node/

### Repro steps

1. `yarn start`
2. Open `App.js`
3. Uncomment the `useEffect` block
4. Click to inspect ""Component"" in DevTools
5. Error: ""_Could not inspect element with id 5_""

Originally reported in https://github.com/facebook/react/issues/21436#issuecomment-835406075

---

https://user-images.githubusercontent.com/12292047/117544707-e6a6cd80-b022-11eb-9f8f-bb8cfd9f7743.mp4

### How often does this bug happen?

Every time
",Bug
https://github.com/facebook/react/issues/21534,21534,"[DevTools Error] Cannot remove node ""2315"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,5,2021-05-19T20:31:40Z,2021-05-21T14:19:06Z,2021-05-21T14:19:06Z,NONE,completed,AsheshL,"### Website or app

Website

### Repro steps

Not sure

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.2-e468072e17

### Error message (automated)

Cannot remove node ""2315"" because no matching node was found in the Store.

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Support
https://github.com/facebook/react/issues/21560,21560,[Feature Request]: Add array of updated deps indices to `useEffect` hooks arg,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-05-25T16:17:20Z,2021-05-25T19:31:38Z,2021-05-25T19:31:38Z,NONE,completed,,"I would like to request adding the indices of updated dependencies of `useEffect`, `useLayoutEffect` as arg of the callback.

## For example:

if `dep1` and `dep3` changes, then indices of the dependencies that triggers the update should be passed to the callback as argument.

```jsx
useEffect((updatedIndices) => {

  console.log(updatedIndices); // Array [1,3]

}, [dep1, dep2, dep3])
```

I think this feature will be useful for most of us all.",Feature
https://github.com/facebook/react/issues/21599,21599,"Bug: when use custom hooks in App.js,an error of Invalid hook call happened","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,4,2021-06-02T10:14:43Z,2021-06-03T03:43:27Z,2021-06-03T03:13:58Z,NONE,completed,JokerSora,"I created the app by npx create-app order //not this problem Mismatching Versions of React and React DOM  and not this Duplicate React

here is my code
First,I created a hook usePre.js which is copied from https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
`
import React,{useRef,useEffect} from ""react"";
export default function useTest(value) {
    const ref=useRef();
    useEffect(()=>{
        ref.current=value;
    });
    return ref.current;
}
`
then I fixed the App.js to 
`
import React from ""react"";
import useTest from ""./useTest"";
function App() {
  const a = useTest(1);
  return (<div>test</div>);
}
export default App;
`

and fixed the index.js 
`
import ReactDOM from 'react-dom';
import App from './App';
const app = App();
ReactDOM.render(
  app,
  document.getElementById('root')
);
`
then the error of Invalid hook call happened
I don't think I have broken the hooks rules 
no call Hooks in class components.
no call in event handlers.
no call Hooks inside functions passed to useMemo, useReducer, or useEffect

I just use it in the root app?maybe it's the new rule?

",Support
https://github.com/facebook/react/issues/21624,21624,Bug: `react-hooks/exhaustive-deps` false positive with direct function calls on an object?,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,7,2021-06-04T15:46:08Z,2022-04-29T15:15:41Z,2022-04-29T15:15:35Z,NONE,completed,,"**`eslint-plugin-react-hooks` version: `4.2.0`**

---

When calling a function within `useEffect` where the function exists directly on an object and the function is included in the effect's dependency array, the `react-hooks/exhaustive-dep` ESLint rule is triggered. I'm wondering whether this is a false positive, or if there is actually a valid reason for this ESLint rule to be triggered in this scenario.

Please let me know if this has already been answered/explained elsewhere;  I tried searching for this problem and couldn't find anything about it!

It's also worth noting that I found this out when trying to call [`react-query` `useMutation` `mutateAsync`](https://react-query.tanstack.com/reference/useMutation) within a `useEffect` call. As the return value of `useMutation` is not referentially stable (https://github.com/tannerlinsley/react-query/issues/1858), including the whole object in the dependency array isn't feasible, as it causes the effect to fire more than it should. However, as mentioned in that linked issue, the ""functions / objects on the returned object are referentially stable"", which means that including `x.mutateAsync` (where `x` is assigned the return value of the `useMutation` call)  in the dependency array means that the effect fires only when it actually needs to/should do. However when trying to do so, `react-hooks/exhaustive-dep` returns the warning mentioned.

I understand that I could get around this warning by destructuring the `mutateAsync` off of the returned object before using it in `useEffect`, but that would be worse DX wise in my opinion, and I'd like to avoid it if possible.



## Steps To Reproduce

1. Call a function within `useEffect` where the function exists directly on an object and include the function in the effect's dependency array.
2. See the ESLint warning coming from `react-hooks/exhaustive-dep`.

Link to code example: https://codesandbox.io/s/bold-fast-smo6g?file=/src/App.js

The above example shows the following scenarios (to show that the behavior feels inconsistent and potentially wrong):

1. Calling a function within `useEffect` where the function exists directly on an object (the case in question).
2. Calling a function within `useEffect` where the function did exist on an object, but was called from a different variable.
3. Referencing another value (in this case a number) within `useEffect` where the value exists directly on an object.

## The current behavior

The `react-hooks/exhaustive-dep` rule returns the following warning (in the case in the code example above):

> React Hook `React.useEffect` has a missing dependency: '`test`'. Either include it or remove the dependency array.

## The expected behavior

No warning comes from `react-hooks/exhaustive-dep`, or an explanation is given by the rule as to why this is a problem?",Other
https://github.com/facebook/react/issues/21633,21633,Failed Compile,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-06-06T13:06:03Z,2021-06-06T14:59:17Z,2021-06-06T14:59:00Z,NONE,completed,,"
React version: Latest Version

When i compile it say's this  : -

./src/App.css (./node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!./node_modules/postcss-loader/src??postcss!./src/App.css)
Error: Can't resolve '../img/01.jpg' in 'F:\portfolio\src'",Support
https://github.com/facebook/react/issues/21644,21644,Request for Package Release,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-06-08T05:31:47Z,2021-06-08T20:45:45Z,2021-06-08T14:48:39Z,NONE,completed,,"I'm sorry if this is the wrong place to file this, but I wasn't sure how else to get ahold of the React team. The #21392 by @bvaughn fixes an issue that was causing MobX components to display components in stack traces as `wrappedComponent`, making it very hard to debug issues. This PR was merged back in April, but there hasn't been a React release since March. Is there any chance you guys would be willing to release React 17.0.3 with this fix?

Thanks!",Support
https://github.com/facebook/react/issues/21653,21653,"[DevTools Bug] Cannot remove node ""5"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-06-10T05:13:29Z,2021-06-10T17:14:39Z,2021-06-10T17:14:31Z,NONE,completed,asirhameem,"### Website or app

https://github.com/facebook/react-devtools

### Repro steps

This bug is shown when I am reloading the page. It will be very helpful if someone provide me with a solution.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.5-0ae5290b54

### Error message (automated)

Cannot remove node ""5"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:21178:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19286:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19446:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37413:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/21695,21695,[DevTools Bug]: Long keys overlap,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-06-16T20:57:00Z,2021-06-18T17:48:02Z,2021-06-18T17:48:01Z,NONE,completed,MinimumViablePerson,"### Website or app

https://05cdc.csb.app/

### Repro steps

![image](https://user-images.githubusercontent.com/16916098/122292219-a540f200-ceed-11eb-8799-211fcd4b7399.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/21707,21707,React 18 : Project dependency tree issue. ,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,4,2021-06-19T19:38:49Z,2021-06-22T07:43:32Z,2021-06-20T13:48:44Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->
``` $ yarn start
yarn run v1.22.5
$ react-scripts start

There might be a problem with the project dependency tree.
It is likely not a bug in Create React App, but something you need to fix locally.

The react-scripts package provided by Create React App requires a dependency:

  ""babel-jest"": ""^26.6.0""

Don't try to install it manually: your package manager does it automatically.
However, a different version of babel-jest was detected higher up in 
the tree:

  C:\Users\UNION\node_modules\babel-jest (version: 27.0.2)

Manually installing incompatible versions is known to cause hard-to-debug issues.

If you would prefer to ignore this check, add SKIP_PREFLIGHT_CHECK=true to an .env file in your project.
That will permanently disable this message but you might encounter other issues.

To fix the dependency tree, try following the steps below in the exact order:

  1. Delete package-lock.json (not package.json!) and/or yarn.lock in your project folder.
  2. Delete node_modules in your project folder.
  3. Remove ""babel-jest"" from dependencies and/or devDependencies in 
the package.json file in your project folder.
  4. Run npm install or yarn, depending on the package manager you use.

In most cases, this should be enough to fix the problem.
If this has not helped, there are a few other things you can try:    

  5. If you used npm, install yarn (http://yarnpkg.com/) and repeat the above steps with it instead.
     This may help because npm has known issues with package hoisting which may get resolved in future versions.

  6. Check if C:\Users\UNION\node_modules\babel-jest is outside your 
project directory.
     For example, you might have accidentally installed something in 
your home folder.

  7. Try running npm ls babel-jest in your project folder.
     This will tell you which other package (apart from the expected 
react-scripts) installed babel-jest.

If nothing else helps, add SKIP_PREFLIGHT_CHECK=true to an .env file 
in your project.
That would permanently disable this preflight check in case you want 
to proceed anyway.

P.S. We know this message is long but please read the steps above :-) We hope you find them helpful!

error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command. 



- I'm not able to solve this issue, I did tried the following steps but it seems like I'm not getting this? Please give some suggestions, so that i could work on my project smoothly.

",Support
https://github.com/facebook/react/issues/21708,21708,Some way to fuzz setState timing/usage,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-06-20T14:53:35Z,2021-06-21T00:01:03Z,2021-06-20T18:24:34Z,NONE,completed,,"One of the more common problems people have with setState is stale refs or other timing and concurrency mistakes. For native code, we have things like Application Verifier's concurrency fuzzer, which can randomly delay some APIs to see if user code correctly handle uncommon timing issues.

So, why don't we have something like that for React APIs like setState? Randomly delay them for a set time? It looks like there's some internal fuzzing to test React's own correctness, but I don't see anything that I could enable to fuzz my React code.",Other
https://github.com/facebook/react/issues/21711,21711,[DevTools Bug]: Where's the error stack trace?,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-06-21T01:28:26Z,2021-06-22T22:29:40Z,2021-06-22T22:29:40Z,NONE,completed,,"### Website or app

There's no error stack trace when there's an error

### Repro steps

There's no error stack trace when there's an error

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/21712,21712,React 18: Error boundaries actually catches errors in effects,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,2,2021-06-21T10:43:39Z,2021-06-24T14:48:50Z,2021-06-24T14:48:28Z,COLLABORATOR,completed,,"Given
```js
function ThrowInEffect() {
  React.useEffect(() => {
    throw new Error('passive effect')
  }, [])
  return null;
}
```

In React 17 this error got logged to the console (and triggered the error overlay in create-react-app) regardless of whether `ThrowInEffect` was a child of an Error Boundary or not.

In React 18 (`createRoot` and legacy root API) an Error Boundary will prevent logging that error to the console (and not trigger the error overlay in create-react-app).

Errors during render work like they did in React 17.

Behavior in React 17: https://codesandbox.io/s/react-17-error-boundaries-vp21e?file=/src/index.js
Behavior in React 18: https://codesandbox.io/s/react-18-error-boundaries-psd56?file=/src/index.js


Recording of effect errors in React 17 and 18 and with and without Error Boundaries_

https://user-images.githubusercontent.com/12292047/122749780-053ced00-d28e-11eb-98ce-075dcdc53ee2.mp4

",Bug
https://github.com/facebook/react/issues/21716,21716,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-06-22T07:56:45Z,2021-06-22T08:50:19Z,2021-06-22T08:50:19Z,NONE,completed,,"Test <b>1234<b/>
<img src=""http://img.alicdn.com/tfs/TB1sdP.Q8LoK1RjSZFuXXXn0XXa-48-48.png"">
hello
",Other
https://github.com/facebook/react/issues/21725,21725,Hooks at a Glance,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-06-23T00:58:30Z,2021-07-14T22:55:07Z,2021-07-14T22:55:07Z,NONE,completed,tomasdelaveau,"In the _Effect Hook_ section, it reads **By default, React runs the effects after every render — including the first render.**
I just copied and pasted the example in a Next JS page, and upon page load (ie. first render) I see the title remains unchanged (even if I remove the `<title>` tag from the head in `_app.js`). It only changes to ""You clicked 1 times"" after the first click (ie. second render).",Other
https://github.com/facebook/react/issues/21758,21758,"I don't see a React tab in my Chrome Dev tools, also, so I'm not quite sure how to access the dev tools at all to be honest. Here is what I see in my Chrome settings:",[],closed,FALSE,,3,2021-06-26T12:06:56Z,2021-07-01T22:57:55Z,2021-06-28T04:08:57Z,NONE,completed,,"I don't see a React tab in my Chrome Dev tools, also, so I'm not quite sure how to access the dev tools at all to be honest. Here is what I see in my Chrome settings: 

![screen shot 2015-05-14 at 3 50 58 pm](https://cloud.githubusercontent.com/assets/910753/7628735/0a85e094-fa51-11e4-8f9d-dea75ae9339d.png)

_Originally posted by @RichardLitt in https://github.com/facebook/react/issues/3877#issuecomment-101975101_",Support
https://github.com/facebook/react/issues/21789,21789,[DevTools bug] Extension not showing on browser,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2021-07-02T10:06:26Z,2021-07-07T15:35:04Z,2021-07-07T13:44:31Z,NONE,completed,KingsleyIbe,I have installed React dev tools extension but can't see it in the inspect window.,Support
https://github.com/facebook/react/issues/21795,21795,[DevTools Bug] Could not inspect element with id 3,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-07-02T16:03:34Z,2021-07-02T16:03:50Z,2021-07-02T16:03:50Z,NONE,completed,let-sbo,"### Website or app

chorme

### Repro steps

1.compiling my react app
2.the bug happends

### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.13.5-0ae5290b54

### Error message (automated)

Could not inspect element with id 3

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:31392:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30033:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30176:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:32661:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28268:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:28709:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34512:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30033:5)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30147:5)
    at div
    at div
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:34138:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24945:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25548:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30234:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37241:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id 3 in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/21800,21800,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-07-05T10:34:06Z,2021-07-05T10:59:53Z,2021-07-05T10:59:53Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/21819,21819,"[DevTools] Improve ""retry"" function for inspected component props/state/hooks","[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-07-07T19:27:38Z,2021-07-08T18:07:15Z,2021-07-08T18:07:15Z,COLLABORATOR,completed,bvaughn,"Currently if an error occurs when inspecting a component, an error overlay is shown in the right hand side of DevTools along with a ""dismiss"" button to allow the inspection to be retried. However, currently this ""retry"" does not clear the entry from the cache and so it will immediately fail again if the same component is re-selected. We should clear the cache entry so that we actually retry when the modal is dismissed",Bug
https://github.com/facebook/react/issues/21834,21834,[DevTools] Skip loading and parsing source for unnamed built-in hooks,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,0,2021-07-08T20:11:17Z,2021-07-08T20:47:40Z,2021-07-08T20:46:17Z,COLLABORATOR,completed,bvaughn,"Hooks like `useEffect` or `useLayoutEffect` will _never_ have names, so if a the only hooks for a given source file are these ""unnamed"" built-in hooks, we should skip loading the source code.",Bug
https://github.com/facebook/react/issues/21845,21845,Bug: import preact component with hooks in React Page ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-07-10T04:37:00Z,2021-07-10T10:05:31Z,2021-07-10T10:04:15Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/21878,21878,[Proposal] Add extra props argument when calling getChildHostContext,[],closed,FALSE,,2,2021-07-14T13:27:50Z,2021-09-27T22:47:39Z,2021-09-26T19:28:43Z,NONE,completed,,"Hi 👋 

We are building a custom React renderer using the `react-reconciler` package and we ran in a situation where we would need to have access to the props of a instance in the call to `getChildHostContext`.

In short, here is the pseudo-code of what we need:

```tsx
const hostConfig = {
  /**
   * Our root will have a driver that is a default for the entire React tree
   */
  getRootHostContext: function (rootContainerInstance) {
    return { driver: rootContainerInstance.driver };
  },

  /**
   * But we want to allow overriding the value of the `driver` via a special tag
   * 
   * Ex: <special-tag driver={customDriver}>....</special-tag>
   */
  getChildHostContext: function (
    parentContext,
    type,
    rootContainerInstance,
    props
  ) {
    if (type === ""special-tag"") {
      return { driver: props.driver };
    }

    // Otherwise we forward the original parent context
    return parentContext;
  },

  /**
   * Then on creating instances (or updating) we can use the relevant driver based on the ancestor tree
   */
  createInstance: function (externalType, newProps, container, hostContext) {
    const driver = hostContext.driver;
  },
};
```

We saw that [in the implementation of the function](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHostContext.new.js#L77) that calls `getChildHostContext`, it has access to a `fiber` instance that has access to ""props"". Would something the change below make sense?

```diff
function pushHostContext(fiber: Fiber): void {
  const rootInstance: Container = requiredContext(
    rootInstanceStackCursor.current,
  );
  const context: HostContext = requiredContext(contextStackCursor.current);
-  const nextContext = getChildHostContext(context, fiber.type, rootInstance);
+  const nextContext = getChildHostContext(context, fiber.type, rootInstance, fiber.pendingProps);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor, nextContext, fiber);
}
```

We don't understand the internals of the Fiber/reconciler implementation and the implications it would have to expose these props. I guess a potential issue is that they change in re-renders?

Thank you so much for all the efforts on making React such a fantastic and extendable library ❤️.

cc: @xaviervia",Other
https://github.com/facebook/react/issues/21895,21895,react developer tools ,"[{""id"":40929155,""node_id"":""MDU6TGFiZWw0MDkyOTE1NQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Question"",""name"":""Type: Question"",""color"":""cc317c"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-07-16T04:26:13Z,2021-07-16T13:58:18Z,2021-07-16T13:58:03Z,NONE,completed,,I successfully installed the extensions but i am not able to see the the news tabs ( components and react,Support
https://github.com/facebook/react/issues/21919,21919,Bug: React component library with dependency that has a React dependency gets Error: Invalid hook call when using npm link,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-07-20T03:22:21Z,2021-07-20T04:20:50Z,2021-07-20T04:20:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.3.1

## Steps To Reproduce

1. Create a react project `npx create-react-app app`
2. Create a react library `npx create-react-library library`
3. Add a dependency to `library` that has a dependency on React `cd library && yarn add @material-ui/core`
4. Link between the two `cd library && npm link`, `cd library && npm link library`
5. In the `library` project, make a component using the dependency:
```javascript
import { Button } from ""@material-ui/core"";
export const ExampleComponent = ({ text }) => {
  return <Button>Example Component: {text}</Button>
}
```
6. In the `app` project, use the component

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: Can't really make a code example because it requires two projects

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.

I know that this is falling under the 3rd case. `library/node_modules/react` definitely exists, but it isn't clear what the solution is to this issue.

## The expected behavior

The app to run without an error
",Support
https://github.com/facebook/react/issues/21931,21931,"feature request:  getState, example, const [state, setState, getState] = useState(null); ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,9,2021-07-21T09:52:09Z,2021-09-30T12:29:21Z,2021-09-30T12:29:02Z,NONE,completed,,"feature request:  getState, example, const [state, setState, getState] = useState(null); 

it is ok to use the simple variable in a dependent uses effect, but not ok in not a dependant use effect.

the state is a simple variable. which is closure passed into functions, so it is not updated.
and setState with a function argument is asynchronously dispatched.
I suggest adding a synchronous function getState.

it will be useful in simple js functions that are defined in useEffect for integration with not react js



```javascript

  const [audioTrack, setAudioTrack] = useState(null);
  const [savedSelectedAudioTrack, setSavedSelectedAudioTrack] = useState(null);
  const [audioContext, setAudioContext] = useState(null);

// use useEffect to run once
useEffect( () =>{
const handleParticipant = (participant) => {

          const availableTracks = Array.from(
            participant.tracks.values()
          ).filter(
            (publication) => publication.isSubscribed,
          ).map(
            (publication) => publication.track,
          );

          const audioTracks = availableTracks.filter(
            (track) => track.kind === 'audio',
          );
          
          const selectedAudioTrack =
            audioTracks.length === 0 ? null : audioTracks[0];

          if (selectedAudioTrack !== savedSelectedAudioTrack) { // here savedSelectedAudioTrack will not work
            setSavedSelectedAudioTrack(selectedAudioTrack);
            if (audioContext)
              setAudioTrack(
                // eslint-disable-next-line prettier/prettier
                audioContext.MediaStreamAudioSourceNode(selectedAudioTrack)
              );
            else setTimeout(() => handleParticipant(participant), 100);

            // setSelectedAudioTrack(selectedAudioTrack1);
            window.hasAudioTrack = true;
          } else {
            window.hasAudioTrack = false;
          }


          console.log(
            'audioTracks.length:',
            audioTracks.length
          );
  };


  // create audiocontext and 3rd parity library and add event handler to 3rd parity library
 setAudioContext(createdAudioContext);
 3rdParityLibrary.handleEvent=handleParticipant ;
} ,[])
```


but the working implementation is like 


```javascript

  const [audioTrack, setAudioTrack] = useState(null);
  const [savedSelectedAudioTrack, setSavedSelectedAudioTrack] = useState(null);
  const [audioContext, setAudioContext] = useState(null);

// use useEffect to run once
useEffect( () =>{
const handleParticipant = (participant) => {

      setSavedSelectedAudioTrack((savedSelectedAudioTrack) => {
        setAudioContext((audioContext) => {

          const availableTracks = Array.from(
            participant.tracks.values()
          ).filter(
            (publication) => publication.isSubscribed,
          ).map(
            (publication) => publication.track,
          );

          const audioTracks = availableTracks.filter(
            (track) => track.kind === 'audio',
          );
          
          const selectedAudioTrack =
            audioTracks.length === 0 ? null : audioTracks[0];

          if (selectedAudioTrack !== savedSelectedAudioTrack) { // here savedSelectedAudioTrack will not work
            setSavedSelectedAudioTrack(selectedAudioTrack);
            if (audioContext) // and audio context also will not work
              setAudioTrack(
                // eslint-disable-next-line prettier/prettier
                audioContext.MediaStreamAudioSourceNode(selectedAudioTrack)
              );
            else setTimeout(() => handleParticipant(participant), 100);

            // setSelectedAudioTrack(selectedAudioTrack1);
            window.hasAudioTrack = true;
          } else {
            window.hasAudioTrack = false;
          }


          console.log(
            'audioTracks.length:',
            audioTracks.length
          );
          
          
          return audioContext;
        });
        return savedSelectedAudioTrack;
      });
  };


  // create audiocontext and 3rd parity library and add event handler to 3rd parity library
 setAudioContext(createdAudioContext);
 3rdParityLibrary.handleEvent=handleParticipant ;
} ,[])
```


i wish there was  a synchronous getState.


```javascript

  const [audioTrack, setAudioTrack] = useState(null);
  const [savedSelectedAudioTrack, setSavedSelectedAudioTrack, getSavedSelectedAudioTrack] = useState(null);
  const [audioContext, setAudioContext, getAudioContext] = useState(null);

// use useEffect to run once
useEffect( () =>{
const handleParticipant = (participant) => {

          const availableTracks = Array.from(
            participant.tracks.values()
          ).filter(
            (publication) => publication.isSubscribed,
          ).map(
            (publication) => publication.track,
          );

          const audioTracks = availableTracks.filter(
            (track) => track.kind === 'audio',
          );
          
          const selectedAudioTrack =
            audioTracks.length === 0 ? null : audioTracks[0];

          if (selectedAudioTrack !== getSavedSelectedAudioTrack()) { // here savedSelectedAudioTrack will not work
            setSavedSelectedAudioTrack(selectedAudioTrack);
            if (getAudioContext())
              setAudioTrack(
                getAudioContext().MediaStreamAudioSourceNode(selectedAudioTrack)
              );
            else setTimeout(() => handleParticipant(participant), 100);

            // setSelectedAudioTrack(selectedAudioTrack1);
            window.hasAudioTrack = true;
          } else {
            window.hasAudioTrack = false;
          }


          console.log(
            'audioTracks.length:',
            audioTracks.length
          );
  };


  // create audiocontext and 3rd parity library and add event handler to 3rd parity library
 setAudioContext(createdAudioContext);
 3rdParityLibrary.handleEvent=handleParticipant ;
} ,[])
```",Feature
https://github.com/facebook/react/issues/21939,21939,DevTools: Order of higher-order component badges,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2021-07-22T09:48:55Z,2022-07-25T07:02:13Z,2022-07-25T07:02:13Z,COLLABORATOR,completed,,"Given 

```jsx
const StyleDiv = forwardRef(function Component({ children }, ref) {
  return <div ref={ref}>{children}</div>;
});

StyleDiv.displayName = `styled(connected(div))`;
```

-- https://codesandbox.io/s/little-sky-y8h1b?file=/src/App.js

I would expect that the badges from the display name are prioritized in the component tree.
However, devtools currently displays the `ForwardRef` badge first:

> `div ForwardRef +2`
![Screenshot from 2021-07-22 11-44-32](https://user-images.githubusercontent.com/12292047/126619858-20b3747b-8723-4306-b5b0-13457d8f45e2.png)

Oddly enough, the inline devtools in codesandbox do prioritize the badge from the `displayName` (maybe this regressed?):

> `div styled +2` ![Screenshot from 2021-07-22 11-45-27](https://user-images.githubusercontent.com/12292047/126620032-bda9ef1a-ab26-4df3-a10c-e0e8c5cfc3d3.png)


There's also an argument to be made that devtools should not display the `ForwardRef` badge to begin with (since we explicitly omitted it in `displayName`). That can be discussed separately but would solve the issue entirely.",Bug
https://github.com/facebook/react/issues/21956,21956,Bug: React StrictMode takes not updated state value from first update on second update of strictmode,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,7,2021-07-24T22:49:10Z,2021-08-04T23:50:39Z,2021-08-04T23:50:39Z,NONE,completed,,"copy and edited from https://github.com/facebook/react/issues/21930#issuecomment-886117564

**I will use the next 2 terms**
- update call - execution of the function body(no effects)
- render cycle - update(s) call and following effects

**2 very important notes:**
 - Calling state hook from effect(like useEffect or useLayoutEffect) will cause React to schedule another render.
- Calling state hook from FC body will cause React to schedule another update call.

**on StrictMode**:
after a small experiment,2 updates,1 render for each render cycle(means the body of the FC executes twice while effect fire once)

### code
see the next code , and lets remember react triggers 2 updates(at least) per render on StrictMode, if the first update will trigger another update(via setState for example) it will come before the second update strictmode schedules:
```typescript
  if (shouldUpdatePosition.current) {
    ...
    const pos = getPosition(...)
    setSt(pos);
    log('pos',pos)
    shouldUpdatePosition.current = false;
  }
log('st',st)
```
on the first render `shouldUpdatePosition.current=true` so setSt gets the right position and update call scheduled by React with the right dimensions. the update call would execute **and then on StrictMode**, the second update would start(and the 3'th update call) and now `shouldUpdatePosition.current=false` the setSt is not executed, and **React takes the value from the first update and not from the previous update call**. this is unexpected!

## recap, and logs:
for logs explanation, let's say 0 is the wrong(not updated) value and 10 is the correct value

- update 0
'pos',10  (set state trigger, another update call is scheduled)
'st',0
- update 1
'st',10
- update 2 (StrictMode only! the second update call of strict mode!)
'st',0 (why? not expected! should be 10)

in order to fix this bug and make the result as expected react should take the value from the most recent update call and not the the first update call of the current cycle in strict mode

this is clearly a bug (or limitation) in StrictMode

### code sandbox
see logs, this is not expected
https://codesandbox.io/s/react-strict-mode-bug-bx8is?file=/src/index.js",Support
https://github.com/facebook/react/issues/21961,21961,"[DevTools Bug] Could not inspect element with id ""175""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-07-26T08:26:01Z,2021-07-26T08:26:15Z,2021-07-26T08:26:15Z,NONE,completed,manishsainju,"### Website or app

localhost:4000

### Repro steps

Just simple react app

### How often does this bug happen?

Often

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Could not inspect element with id ""175""

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
InspectedElementContextController@testErrorStack.js:109842:43
Suspense
ErrorBoundary_ErrorBoundary@testErrorStack.js:108452:5
div
InspectedElementErrorBoundaryWrapper@testErrorStack.js:108838:46
NativeStyleContextController@testErrorStack.js:111206:38
div
div
OwnersListContextController@testErrorStack.js:106680:37
SettingsModalContextController@testErrorStack.js:107121:40
Components_Components@testErrorStack.js:113123:52
ErrorBoundary_ErrorBoundary@testErrorStack.js:108452:5
PortaledContent@testErrorStack.js:108571:34
div
div
ProfilerContextController@testErrorStack.js:112748:35
TreeContextController@testErrorStack.js:103336:31
SettingsContextController@testErrorStack.js:103939:35
ModalDialogContextController@testErrorStack.js:108901:38
DevTools_DevTools@testErrorStack.js:115897:27
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/21974,21974,[DevTools Bug]: StrictMode not shown in component tree,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-07-27T21:02:03Z,2021-12-08T21:23:51Z,2021-08-30T19:39:43Z,MEMBER,completed,,"### Website or app

https://codesandbox.io/s/objective-lehmann-u2jn4?file=/src/App.js

### Repro steps

- Open React devtools in codesandbox
- See that there's no StrictMode in the tree any more

<img width=""1463"" alt=""Screen Shot 2021-07-27 at 4 56 17 PM"" src=""https://user-images.githubusercontent.com/2440089/127226919-bad27090-db61-45eb-8133-ed701e411d3b.png"">


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/21989,21989,Bug: createPortal anywhere in the tree makes native events be ran too late,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2021-07-29T18:41:56Z,2021-07-30T08:48:58Z,2021-07-30T08:48:53Z,NONE,completed,,"## Summary
Native events added via `useEffect` are called too late (and with improper (new) state, rather than the state during listener attachment) if there's a `ReactDOM.createPortal` anywhere in the tree. First the effect is re-run and a new listener is attached, and only then the native event is called.

React version:
17.0.2

Link to code example:

[CodeSandbox](https://codesandbox.io/s/late-star-1izm6)

## Reproduction 

* Anywhere in the tree is a `createPortal`. It can even be `createPortal(null, document.body)`
* Somewhere, there is a component with `useState`.
* It renders a div. The div has an `onClick` handler passed.
* On top of that, `useEffect` is used to attach a `click` event to `window`
* Both event handlers (both the native event attached to window, and the React event passed to `div`) use `setState`.

## The current behavior

* The React handler is called. It calls setState
* The component rerenders with the new state, and its effects are re-run.
* Since the effect is re-run, a new native listener is attached (which is bound to the new state)
* Only then, the new listener (with the NEW state) is called.

## The expected behavior

* The React handler is called. It calls setState
* The component might rerender or not (doesn't matter)
* The native handler is called with the old state.

In other words
```
const [popupOpen, setPopupOpen] = useState(false);
useEffect(() => {
   // close popup if clicked anywhere on the screen, some code ignored for brevity 
  const listener = () => {
    console.log('NATIVE', popupOpen);
    if (popupOpen) setPopupOpen(false);
  };
  window.addEventListener(""click"", listener);
  return () => window.removeEventListener(""click"", listener);
}, [popupOpen]);

return (
  <>
    <div
      onClick={() => {
        console.log('REACT', popupOpen); // REACT HANDLER STATE
        if (!popupOpen) setPopupOpen(true);
      }}
    >
      Open popup
    </div>
    {ReactDOM.createPortal(null, document.body)}
  </>
);
```

Logs

![image](https://user-images.githubusercontent.com/45483493/127549843-763c1ee1-4976-4d7b-855e-91b16b8c4e3e.png)

But without `createPortal`, the following is logged:

![image](https://user-images.githubusercontent.com/45483493/127550018-901aee68-c9d9-4c66-9897-9466789256ce.png)
",Other
https://github.com/facebook/react/issues/22033,22033,Question: How dispatchAction will update the current fiber in react 17,[],closed,FALSE,,1,2021-08-05T12:10:54Z,2021-08-06T07:37:07Z,2021-08-06T07:36:51Z,NONE,completed,,"  useState would return an array，then the second argument is a function that invoking the dispatchAction.bind() returns.
`var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);`
I have a question. In this case，the first parameter of dispatchAction is always determined. There will be a closure that will shallowly copy its value, if you need to modify it, you have to get its reference, and then manually modify the properties of the object.

Could someone help me answer？ how to modify the current fiber?",Other
https://github.com/facebook/react/issues/22048,22048,Bug: Cannot set property 'memoizedState' of null with nested renderToStaticMarkup and hooks,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-08-09T09:41:16Z,2021-08-09T09:47:43Z,2021-08-09T09:47:43Z,NONE,completed,,"React version: 17.0.2

## Steps To Reproduce

1. Have a component which memoizes the result of a renderToStaticMarkup.
2. Use renderToStaticMarkup to render the component of 1.

Link to code example:

```
function nestedRender() {
  return renderToStaticMarkup(<p>This is the nested render result</p>);
}

function MyComponent() {
  const nestedRenderResult = useMemo(() => nestedRender(), []); // Removing useMemo will solve the issue
  return <p>The nested result is: {nestedRenderResult}</p>;
}

function wrapperRender() {
  return renderToStaticMarkup(<MyComponent />);
}
```

https://codesandbox.io/s/lingering-shadow-vyqyd

## The current behavior

The application crashes with a TypeError: Cannot set property 'memoizedState' of null

```
Uncaught TypeError: Cannot set property 'memoizedState' of null
    at Object.useMemo (react-dom-server.browser.development.js:1587)
    at useMemo (react.development.js:1532)
    at MyComponent (App.tsx? [sm]:12)
```

## The expected behavior

The result is rendered correctly to a string containing the final markup.

## Context about my use case

The example may seem a bit contrived as nesting renderToStaticMarkups is by no means a common case. However, we use the outer renderToStaticMarkup to do server side rendering of HTML output. The inner renderToStaticMarkup is used to render the content to a string on which we do extra postprocessing after (e.g. Handlebars).",Other
https://github.com/facebook/react/issues/22079,22079,Bug: `TypeError: Cannot call a class as a function` when rendering class component inside a functional component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-08-12T06:55:14Z,2021-08-12T07:50:04Z,2021-08-12T07:50:04Z,NONE,completed,,"React version: 17.0.2

## Steps To Reproduce

**It won't reproduce in codesandbox,, etc**

Link to code example: https://codesandbox.io/s/react-playground-forked-inft2

1. Make parents component as functional
2. Make child component as class (and I also add `extends React.Component`)
3. Render child in parents as `prop.child`
4. Error

Here's my codes..

1. child component (class)
<img width=""925"" alt=""Screen Shot 2021-08-12 at 3 48 13 PM"" src=""https://user-images.githubusercontent.com/44552838/129150686-7c3afcfc-e683-4003-89f8-b564263cc9ee.png"">

2. assigned as props
<img width=""405"" alt=""Screen Shot 2021-08-12 at 3 49 08 PM"" src=""https://user-images.githubusercontent.com/44552838/129150772-dba814cc-94c6-4227-a069-0a32b90e75d3.png"">

3. parents component (funtional)
<img width=""709"" alt=""Screen Shot 2021-08-12 at 3 53 00 PM"" src=""https://user-images.githubusercontent.com/44552838/129151250-ec4f5740-0a72-41f4-9985-3839385cc64a.png"">


## The current behavior
<img width=""752"" alt=""Screen Shot 2021-08-12 at 3 54 56 PM"" src=""https://user-images.githubusercontent.com/44552838/129151467-e6165133-b999-42e1-9f6d-9144fc6ede5d.png"">


## The expected behavior
Render nomally",Other
https://github.com/facebook/react/issues/22084,22084,"[DevTools Bug] Could not inspect element with id ""3""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-08-13T07:58:40Z,2021-08-13T07:58:53Z,2021-08-13T07:58:53Z,NONE,completed,xcorp1986,"### Website or app

code

### Repro steps

pure project with command ""npx create-react-app . --use-npm --template typescript"",then run and open react devtools,the following message appeard


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.15.0-c6f2188ed

### Error message (automated)

Could not inspect element with id ""3""

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
at InspectedElementContextController (testErrorStack.js:143043:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (testErrorStack.js:141591:5)
    at div
    at InspectedElementErrorBoundaryWrapper (testErrorStack.js:142024:3)
    at NativeStyleContextController (testErrorStack.js:144425:3)
    at div
    at div
    at OwnersListContextController (testErrorStack.js:139820:3)
    at SettingsModalContextController (testErrorStack.js:140261:3)
    at Components_Components (testErrorStack.js:146350:52)
    at ErrorBoundary_ErrorBoundary (testErrorStack.js:141591:5)
    at div
    at div
    at ThemeProvider (testErrorStack.js:141709:3)
    at PortaledContent (testErrorStack.js:141743:5)
    at div
    at div
    at div
    at ThemeProvider (testErrorStack.js:141709:3)
    at SchedulingProfilerContextController (testErrorStack.js:147386:3)
    at ProfilerContextController (testErrorStack.js:145976:3)
    at TreeContextController (testErrorStack.js:134687:3)
    at SettingsContextController (testErrorStack.js:135298:3)
    at ModalDialogContextController (testErrorStack.js:142087:3)
    at DevTools_DevTools (testErrorStack.js:156036:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/22092,22092,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-08-14T13:10:44Z,2021-08-15T21:22:29Z,2021-08-15T21:22:29Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/22098,22098,Bug: Can't resolve 'antd/lib/image' ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-08-16T09:22:31Z,2021-08-16T14:26:59Z,2021-08-16T14:26:58Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:'17.0.2'

## Steps To Reproduce

1.            <Upload {...uploadProps} fileList={imgfileList} beforeUpload={this.imgbeforeUpload} disabled={isdetail}>
                                                        <Button>
                                                            <Icon type=""upload"" />
                                                            {
                                                                imgfileList && imgfileList.length ? '重新上传' : '选择图片'
                                                            }
                                                        </Button>
                                                    </Upload>
2.       imgbeforeUpload = (file) => {
        return new Promise((resolve, reject) => {
            var fileReader = new FileReader();
            let width = 0;
            let height = 0;
            reader.onload = (e) => {
                var imgData = e.target.result;//获取图片的文件流
                //通过Image 对象去加载图片
                var image = new Image();
                image.onload = () => {
                    width = image.width;
                    height = image.height;

                    console.log(width,height)
                }
                image.src = data;
            }
            fileReader.readAsDataURL(file);
        })
    }

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
使用ant Upload组件在图片上传的时候使用 Image 方法获取图片的长宽 但是提示 Can't resolve 'antd/lib/image'  webpack: Failed to compile.

## The expected behavior
",Support
https://github.com/facebook/react/issues/22115,22115,DevTools: Better Bundle Names for Dynamically Imported Modules,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":725156255,""node_id"":""MDU6TGFiZWw3MjUxNTYyNTU="",""url"":""https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)"",""name"":""good first issue (taken)"",""color"":""b60205"",""default"":false,""description"":null}]",closed,FALSE,,13,2021-08-17T20:46:42Z,2021-09-15T17:51:34Z,2021-09-15T17:51:34Z,CONTRIBUTOR,completed,akgupta0777,"In the DevTools extension, webpack currently uses an automatically assigned ID as the chunk name for dynamically imported modules (ie. `parseHookNames` and associated code will get bundled into `6.js`).

We've tried adding `chunkFilename: '[name].js'` to `output` in `webpack.config.js` and  magic comments (ie.`/* webpackChunkName: ""parseHookNames"" */`) to the dynamic import to fix, but neither works. ",Bug
https://github.com/facebook/react/issues/22120,22120,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-08-18T06:49:28Z,2021-08-18T14:55:50Z,2021-08-18T14:53:51Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/22123,22123,[DevTools Bug]: Profiler freezes when navigating through commits,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2021-08-18T09:33:30Z,2021-08-20T18:08:23Z,2021-08-20T18:08:23Z,COLLABORATOR,completed,,"### Website or app

https://github.com/eps1lon/material-ui/tree/757f6cf571557f8b03a372db5c7cc1cf3837c944

### Repro steps

1. Enable chrome://flags/#enable-throttle-display-none-and-visibility-hidden-cross-origin-iframes
1. goto https://611f52616dca6500083055f2--material-ui.netlify.app/components/slider/#ContinuousSlider
1. record at least 2 commits via Profiler

The larger the component tree the more reliable the crash. When I reduce the component tree in the UI the crash stops at some point.


https://user-images.githubusercontent.com/12292047/129874688-1f38e1ea-6f80-4fbc-a331-b76fdde32b99.mp4



### How often does this bug happen?

Every time

### DevTools package (automated)

1d2528097

### DevTools version (automated)

4.16

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
profiler freeze
```
",Other
https://github.com/facebook/react/issues/22131,22131,Potential expensive operation optimisation,[],closed,FALSE,,2,2021-08-19T06:50:14Z,2021-09-21T15:27:51Z,2021-09-21T15:27:51Z,NONE,completed,,"This seems to be an expensive operation - 
https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberTreeReflection.js#L325

used in loops in -

i) https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L322
ii) https://github.com/facebook/react/blob/aa25824f3ebbdbbea01be48417f2f99251be1a12/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L345

Can/Should we use memoize this somehow?
",Other
https://github.com/facebook/react/issues/22133,22133,refs for function components as first class citizens,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-08-19T13:12:41Z,2022-04-29T15:08:44Z,2022-04-29T15:08:43Z,NONE,completed,,"I'm looking everywhere, but I can't seem to find an official answer.

It seems `ref`s are discouraged, and developers are required to use `forwardRef`, or pass ref as a separate prop (i.e. `forwardRef={ref}`). 
`ref` are very important when access to the DOM is required, usually when a measurement is needed.
Example usages include **tooltips**, graph nodes, animations, and dom observers.

For example, [@tippyjs/react](https://www.npmjs.com/package/@tippyjs/react) assumes children receive a ref (since `findDOMNode` is deprecated), and will simply fail with most components.
Another example is a `ClickOutside` hook, that watches click events and triggers callback which clicking on a dom element outside a specific component.

Lastly, it really complicated component compositions.
Composing components and ultimately forwarding all props down to the DOM allows us to use all components as first class citizens, so they all have the same abilities as a div. I can pass an event handlers, data attribute, tabIndex, etc, to any component, without having to alter it.
```tsx
interface UserMenuProps extends MenuProps {
  users: User[];
}

function UserMenu({users, ...rest}: UserMenuProps) {
  // even if Menu supports ref forwarding, I need to forwardRef again just to keep the same behavior.
  return <Menu {...rest}>
    {props.users.map(x=> <UserItem user={x})}
  </Menu>
}

function SettingsPage(props) {
  const privacyRef = useRef(null);
  const validatePrivacy = () => {...};
  
  useClickOutside(privacyRef, validatePrivacy());

  return <div>
     {/* tooltip is implicitly using ref to target children */}
     <Tooltip content=""this is your user menu!"">
       <UserMenu className=""centered"" />
     </Tooltip>
     {/* PrivacySettings is already getting ref, so tooltip needs an explicit target */}
     <Tooltip content=""select how public you want to be!"" target={privacyRef} />
       <PrivacySettings ref={privacyRef} style={{shadow: ""1px 2px black""}} onClick=(...)/>
     </ Tooltip>
  </div>
}
```

I don't like to use forwardRef because:
* It prevents even the simplest of component from being used in (our) legacy react 15 project.
* The syntax is really complicated, and I need to set the same function name 3 times for each component.
* I don't want to add it to every single component I make. (and force my team to do the same).

I would prefer to use refs as first class citizens, like
```tsx
function Menu(props: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      {...props}
      className={cn(""menu"", props.className)}
      // just to emphasize, I'm getting the ref from the props.
      // I could also apply it to a different element, or pass a completely different object for ref.current, or keep it null
      ref={props.ref}
    />
  )
}
```

I see a hint here - https://github.com/reactjs/rfcs/pull/107#issuecomment-466282354, that refs will finally be first class props in the new JSX transform. Is this true? or will we still be required to use forwardRef?

Most importantly, can I rely on it in projects with the new transform? including legacy project using `React 15.7.0`?",Other
https://github.com/facebook/react/issues/22153,22153,React 18 and next.js,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,5,2021-08-22T07:07:58Z,2021-08-25T07:10:25Z,2021-08-23T18:34:56Z,NONE,completed,,"react is so plain.we have to write bunch of code for small things, so i think react should include all functions (code) of next.js, for one or two functionality we have to change whole framework or make a new project and write whole bunch of code for it and there many opensource frameworks like next.js from which we can borrow functionality and improve react.if you are agree with me, its my pleasure to help you with writing code for it.main functionality i think react should have are in built all 3 types of SSR and file based routing.please reply me soon as possible. thanks in advance",Other
https://github.com/facebook/react/issues/22225,22225,A11y_CDE - Mission Control and APIs_Measure Failure Investigation-Measure Drilldown_Screen Reader: Narrator is just reading as Group for Add dimension drop down.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-09-01T09:46:44Z,2021-09-01T11:56:29Z,2021-09-01T11:56:29Z,NONE,completed,,"Check out Accessibility Insights! - Identify accessibility bugs before check-in and make bug fixing faster and easier.

Environment Details:
OS: Windows 20H2 1903(OS Build 19042.508)​
Microsoft Edge Dev Version 93.0.926.0 (Official build) dev (64-bit)
URL:  https://mission-control-ci.azurewebsites.net/​
​
Repro Steps:​​
1) Hit the URL : https://mission-control-ci.azurewebsites.net/​
2) Login with Valid login credentials​​
3) Start Narrator
4) Home page will get open ​​
5) Tab till left navigation bar and Press enter on Windows icon​​
6) Tab till Release Readiness (RQV) and press enter ​​
7) Tab till Compliance from left Navigation bar  and press enter ​​
8) Tab till Compliance expandable button present in the page and press enter​​
9) Tab till any graph and press enter​
10) Graph pop-up will get open​
11) Tab till Investigate Measure Link and press enter
12) Measure Failure Investigation page will get open 
13) Tab till Jump to related views (Three dots) and press enter
14) Tab till Data Landscape and press enter
15) Measure: 20203773 - [RQV Compliance Measure] Privacy - Reset page will get open
16) Tab till Add dimension drop down and check whether Narrator is reading as Group or not

Actual Result:​​
Narrator is not reading descriptive information when focus land on the 'Select a dimension' combo box. It is announcing add dimension edit scan off space space 0 result available select is focus to find the dimension list......... 

Expected Result:​​
Narrator should read descriptive information when focus land on the 'Select a dimension' combo box. It should announce 'Select a dimension combo box collapsed editable' 

Note: Same issue repro with NVDA & JAWS screen reader as well.
NVDA is narrating 'Add dimension edit has auto complete' and JWAS is narrating 'Add dimension column edit type and text'.

User Impact:​​
Screen Reader users will have difficulty in understanding if Narrator is just reading as Group for Add dimension drop down with out reading the role assigned to the drop down

MAS Reference:​​
(https://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc={54f28d1f-a2d1-4dcd-84e1-5c9b87e8aba4}[](url)
<img width=""942"" alt=""BUG1"" src=""https://user-images.githubusercontent.com/89897257/131650206-60865ec3-39e4-4d1a-948b-197dc9a6ca94.png"">
",Other
https://github.com/facebook/react/issues/22226,22226,"A11y_MissionControlAndAPIs_ExperimentationGroup_GroupDetails_HighContrast: Keyboard focus is not visible in the list items of the ""Select"" combo edit boxes in high contrast when navigating using down arrow key","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2021-09-01T10:05:15Z,2021-09-01T11:56:57Z,2021-09-01T11:56:56Z,NONE,completed,,"Bug discussion:
""Check out Accessibility Insights! - Identify accessibility bugs before check-in and make bug fixing faster and easier.""
Environment Details:
Application Name: Mission Control and APIs
#URL: https://mission-control-ci.azurewebsites.net/
Windows Version: Win10 
Chrome version: Version 87.0.4280.88

Prerequisite:
Enable high contrast black mode
Repro Steps:
Navigate to https://mission-control-ci.azurewebsites.net/experiments
Tab till ""OneSettings Config"" tab.
It should default to ""Groups"" sub tab
Tab till ""+ New OneSettings Config Group"" button and hit enter
Tab till ""Data Science Owner- Select"" combo edit box and expand it
Check if keyboard focus is visible on the list items using down arrow key.
Actual:
Keyboard focus is not visible in the list items of the ""Select"" combo edit boxes in high contrast when navigating using down arrow key

Similar issue is observed throughout the application where ""combo edit box"" is present.
Expected:
Keyboard focus should be visible in the list items of the ""Select"" combo edit boxes in high contrast when navigating using down arrow key
User Impact:
Low vision users will not be able to identify where the keyboard focus is inside the list box.
Recommendation:
Refer repository of bug fixes code snippets 
MAS Reference:
MAS 1.4.3 - Contrast (Minimum)
<img width=""576"" alt=""BUG2"" src=""https://user-images.githubusercontent.com/89897257/131652886-54efb362-4d6c-49e7-b6d3-6db968894210.png"">
",Other
https://github.com/facebook/react/issues/22270,22270,"When I console.log(), the Chrome console gives the log but instead of showing the file and line number ",[],closed,FALSE,,3,2021-09-08T13:27:45Z,2021-09-09T17:35:12Z,2021-09-08T13:56:01Z,NONE,completed,,"When I console.log(), the Chrome console gives the log but instead of showing the file and line number it just says react_devtools_backend.js:4049. How do I get the console to show the file and line number when I console.log()?",Support
https://github.com/facebook/react/issues/22301,22301,found an empty rule set ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2021-09-13T11:23:58Z,2021-09-14T14:08:03Z,2021-09-14T13:58:23Z,CONTRIBUTOR,completed,,"this is the file path - packages/react-devtools-shared/src/devtools/views/Settings/SettingsShared.css

going here i found a empty rule set called selector which had nothing inside it and it is not a good practice to keep empty ruleset .


here is the PR link for the same - https://github.com/facebook/react/pull/22298

hope to get a feedback soon!",Other
https://github.com/facebook/react/issues/22304,22304,React 18 ,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,1,2021-09-13T16:32:44Z,2021-09-13T17:05:29Z,2021-09-13T17:05:29Z,NONE,completed,,"npm WARN deprecated flatten@1.0.3: flatten is deprecated in favor of utility frameworks such as lodash.
npm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintained 
npm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintained
npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated
npm WARN deprecated har-validator@5.1.5: this library is no longer supported
npm WARN deprecated request-promise-native@1.0.9: request-promise-native has been deprecated because it extends the now deprecated request package, see https://github.com/request/request/issues/3142
npm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.
npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated
npm WARN deprecated left-pad@1.3.0: use String.prototype.padStart()
npm WARN deprecated sane@4.1.0: some dependency vulnerabilities fixed, support for node < 10 dropped, and newer ECMAScript syntax/features added
npm WARN deprecated eslint-loader@3.0.2: This loader has been deprecated. Please use eslint-webpack-plugin        
npm WARN deprecated @hapi/address@2.1.4: Moved to 'npm install @sideway/address'
npm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.
npm WARN deprecated babel-eslint@10.0.3: babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
npm WARN deprecated html-webpack-plugin@4.0.0-beta.5: please switch to a stable version
npm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintained   
npm WARN deprecated @hapi/joi@15.1.1: Switch to 'npm install joi'
npm WARN deprecated core-js@2.6.12: core-js@<3.3 is no longer maintained and not recommended for usage due to the

### When installing React using command line showing above errors, what to do?",Other
https://github.com/facebook/react/issues/22333,22333,"Error: ""Cannot read property 'length' of undefined""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2021-09-16T05:45:36Z,2021-11-15T15:51:57Z,2021-11-15T15:51:57Z,NONE,completed,drager,"Describe what you were doing when the bug occurred:
1. Just trying to profile an React Native app

![Screenshot_2021-09-16_07-44-35](https://user-images.githubusercontent.com/1957563/133556382-73ddabab-f985-4fd2-9d60-1a1438d8bd8b.png)


---------------------------------------------
Please do not remove the text below this line
---------------------------------------------

DevTools version: 4.10.1-3a8c04e3b2

Call stack: at Jc (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:342921)
    at ii (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:59391)
    at Kl (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:114564)
    at Ns (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:101189)
    at Is (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:101117)
    at Os (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:100980)
    at gs (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:24:96690)
    at w (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:1749)
    at MessagePort.A.port1.onmessage (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:2251)

Component stack: at Jc (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:341665)
    at div
    at div
    at fi (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:235808)
    at /nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:347533
    at Hi (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:249715)
    at /nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:251980
    at div
    at div
    at lu (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:305412)
    at En (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:173743)
    at jn (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:184811)
    at Ji (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:253490)
    at Nd (/nix/store/dhc43b6q83i2d842ry36ydnwck64wlyc-react-native-debugger-0.11.7/share/resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:56:353738)",Other
https://github.com/facebook/react/issues/22336,22336,app:lintVitalReleaseBug issue,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-09-16T12:30:35Z,2021-09-17T12:10:18Z,2021-09-17T12:10:18Z,NONE,completed,,"
```
* What went wrong:
Could not determine the dependencies of task ':app:lintVitalRelease'.
> Could not resolve all artifacts for configuration ':app:debugRuntimeClasspath'.
   > Could not resolve org.webkit:android-jsc:+.
     Required by:
         project :app
      > Failed to list versions for org.webkit:android-jsc.
         > Unable to load Maven meta-data from https://jcenter.bintray.com/org/webkit/android-jsc/maven-metadata.xml.
            > Could not HEAD 'https://jcenter.bintray.com/org/webkit/android-jsc/maven-metadata.xml'.
               > Read timed out
```

**Screen-shot**

<img width=""654"" alt=""Local_issue_jcenter"" src=""https://user-images.githubusercontent.com/90843653/133613659-70ee0e0a-ceac-430f-8ede-b93b78063c67.PNG"">

_React Native version:_

**""react-native"": ""0.63.2""**
## Steps To Reproduce

1.gradlew assembleRelease  (on local machine, windows system)

",Other
https://github.com/facebook/react/issues/22361,22361,React 18: hydration mismatch when an external store is updated in an effect,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,7,2021-09-20T08:35:04Z,2021-09-20T16:32:33Z,2021-09-20T16:32:33Z,COLLABORATOR,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: https://github.com/facebook/react/pull/22347

## Steps To Reproduce

1. Read store (using `useSyncExternalStore`) inside a Suspense boundary where no component suspended
2. Read store (using `useSyncExternalStore`) outside of any Suspense boundary
3. Update store outside of any Suspense boundary in an effect (`useEffect`)


```js
<Store>
  <Suspense fallback={null}>
    <Demo>inside suspense has hydration mismatch</Demo>
    {/* When the fallback is actually used on the server, we don't get a hydration mismatch */}
    {/* <Suspender /> */}
  </Suspense>
  <Demo>outside suspense has no hydration mismatch</Demo>
  <UpdatesStore />
</Store>
);
```

Link to code example: https://codesandbox.io/s/react-18-updating-store-in-an-effect-during-mount-causes-hydration-mismatch-uses-m6lwm?file=/src/index.js


## The current behavior

`<Demo />` inside the Suspense boundary causes a hydration mismatch since it's hydrated with the value set during `useEffect`.

## The expected behavior

No hydration mismatch.

## Repro explainer

The repro is based on https://github.com/reduxjs/react-redux/issues/1794 which is based on a usage from the mui.com docs. 
The behavior this repro is implementing is reading a value from `window.localStorage` (e.g. settings) with a fallback on the server. 

The `store` is a Redux store that is the same on Server and Client.
Reading from the `store` is implemented like so:
```js
const ReduxStoreContext = createContext();

function useValueRedux() {
  const store = useContext(ReduxStoreContext);
  const selector = useCallback(() => store.getState().codeVariant, [store]);

  // The store is equivalent on Client and Server so we can just re-use `getSnapshot` for `getServerSnapshot`
  return useSyncExternalStore(store.subscribe, selector, selector);
}
```
The repro contains an implementation that uses React Context for the store which works as expected i.e. no hydration mismatches.

## Context

I recently stumbled over

> (In general, updates inside a passive effect are not encouraged.)

-- https://github.com/facebook/react/pull/22277

which makes it sound like this behavior is expected because the update is inside a passive effect. Though it's unclear what is meant by ""not encourage"". How would I render a default value on the Server and populate it with the actually desired value on the Client?
",Support
https://github.com/facebook/react/issues/22432,22432,The source code of v16.14.0 is inconsistent with the release package.,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,TRUE,,7,2021-09-26T13:26:01Z,2022-01-12T13:45:10Z,2021-09-27T17:19:02Z,NONE,completed,,"I downloaded and compiled the source code of v16.14.0. It is found that the compiled code is inconsistent with the code of the release package. Some bugs [#18539](https://github.com/facebook/react/pull/18539) that were only fixed in version 17.0.0 have been fixed in my compiled code. Of course, it has not been fixed in the v16.14.0 release package. I checked the merge record of these repair codes, and it has indeed been merged into the v16.14.0 tag.

 I want to know which commit record corresponds to the actual source code of the v16.14.0 release package.
@gaearon Please help me.

React version: 16.14.0

## Steps To Reproduce


## The current behavior


## The expected behavior
",Support
https://github.com/facebook/react/issues/22459,22459,"Bug: setState updater called but not rendered, in Safari, in concurrent mode","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":69105358,""node_id"":""MDU6TGFiZWw2OTEwNTM1OA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Browser:%20Safari"",""name"":""Browser: Safari"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,17,2021-09-29T08:43:19Z,2022-07-02T19:44:24Z,2022-01-18T18:25:35Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0-alpha-9175f4d15-20210928

## Steps To Reproduce

Minimal reproduction in [this codesandbox](https://codesandbox.io/s/black-moon-ymw10?file=/src/index.js).

This issue only appears in Safari, including mobile Safari. It works fine in Chrome and Firefox.

In order to reproduce, you'll need to:

0. Render the app with `createRoot` in the latest 18.0 alpha
1. Within an element's `ref` function, append an iframe to that element using `appendChild`

*The following steps have been removed after simplifying the reproduction:*

~~1. Make a state change originating in a message from a YouTube embed iframe. I assume the same issue would occur with messages from other cross domain iframes, although I have not tested this. The issue does *not* appear when making an async state change through `setTimeout`.~~
~~2. Render a tooltip using the ""tippy.js"" library. I haven't dug into what inside of Tippy is causing this, but commenting out the tippy element resolves the issue. I have confirmed that rendering a simple portal does *not* reproduce the issue.~~


Link to code example:

https://codesandbox.io/s/black-moon-ymw10?file=/src/index.js

## The current behavior

In the example in safari, the updater function passed to `setState` is run (confirmed with the ""run state updater"" console.log)... but the new state is never passed to the component function, leaving the app hanging with no error message, and displaying ""not done"".

## The expected behavior

In Chrome and Firefox, the App component updates after the state updater function is called, as expected, displaying ""done"".

---

Thanks for all the wonderful work on React, btw! It's been a lot of fun playing with the new concurrent React features. Can't wait to see them hit a stable release!
",Bug
https://github.com/facebook/react/issues/22462,22462,[eslint]: useEffect eslint rule not provided to warn/error on missing dependency array,"[{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,4,2021-09-29T16:26:29Z,2021-09-29T17:19:18Z,2021-09-29T17:03:17Z,NONE,completed,,"We had a very nasty bug where we accidentally forgot a dependency array argument in our useEffect so it fires every render.
(just a typo)

I find it strange that useMemo has a rule to warn on this:
```
React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?eslintreact-hooks/exhaustive-deps
(alias) useMemo<void>(factory: () => void, deps: React.DependencyList): void
import useMemo
useMemo will only recompute the memoized value when one of the deps has changed.

Usage note: if calling useMemo with a referentially stable function, also give it as the input in the second argument.

function expensive () { ... }

function Component () {
  const expensiveResult = useMemo(expensive, [expensive])
  return ...
}
```

but there's no configurable rule on the useEffect side.  Isn't it probably true that 99% of the time you don't want to fire useEffect on every render?

Here's a repro scenario (two useEffect fires in the console.log instead of 1, but for us it's infinite due to the fetch causing a prop to change on this component):
https://codesandbox.io/s/nice-chaum-9lf1c?file=/src/App.js",Support
https://github.com/facebook/react/issues/22479,22479,"[DevTools Bug] Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-10-01T13:24:11Z,2021-10-01T15:50:37Z,2021-10-01T13:29:17Z,NONE,completed,,"### Website or app

https://github.com/santhosh-reddy03/react_practice

### Repro steps

$cd repo
and then start the server using npm start

in browser(mozilla firefox)
when i try to add the user and age, and trying to debug the output in ListUsers component, I m facing this error
![Screenshot from 2021-10-01 18-52-36](https://user-images.githubusercontent.com/53914022/135627139-ca7132b6-f39d-4330-8b7d-0cc5281ab552.png)


### How often does this bug happen?

Only once

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.0-2178a831a

### Error message (automated)

Could not inspect element with id ""15"". Error thrown:Cached data for element ""15"" not found

### Error call stack (automated)

_No response_

### Error component stack (automated)

```text
InspectedElementContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:38121:43
Suspense
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
InspectedElementErrorBoundaryWrapper@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36967:46
NativeStyleContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:39541:38
div
div
OwnersListContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:34741:37
SettingsModalContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:35182:40
Components_Components@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41481:52
ErrorBoundary_ErrorBoundary@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36518:5
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
PortaledContent@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36669:34
div
div
div
ThemeProvider@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:36635:23
SchedulingProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:42673:45
ProfilerContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:41106:35
TreeContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:29603:31
SettingsContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:30214:35
ModalDialogContextController@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:37030:38
DevTools_DevTools@moz-extension://8a220e8e-c7fe-42e7-9ec5-0b6e67ae5dd5/build/main.js:52130:27
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not inspect element with id . Error thrown:
Cached data for element  not found in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/22482,22482,ERROR TypeError: undefined is not an object (evaluating '_useContext.register') / react native ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":1775957182,""node_id"":""MDU6TGFiZWwxNzc1OTU3MTgy"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale"",""name"":""Resolution: Stale"",""color"":""e6e6e6"",""default"":false,""description"":""Automatically closed due to inactivity""}]",closed,FALSE,,3,2021-10-01T17:02:21Z,2022-03-30T01:47:38Z,2022-03-30T01:47:38Z,NONE,completed,Ndaahlb,"I am getting the ERROR TypeError: undefined is not an object (evaluating `_useContext.register`). I have it imported and everything set up properly (I think?). please see below

here is the file that having problem

```js
import React, { useContext, useState } from ""react"";
import {
  View,
  Text,
  TouchableOpacity,
  Image,
  Platform,
  StyleSheet,
  ScrollView,
  Button,
} from ""react-native"";
import FormInput from ""../components/FormInput"";
import FormButton from ""../components/FormButton"";
import LinearGradient from ""react-native-linear-gradient"";
import { AuthContext } from ""../navigation/AuthProvider"";

const Login_patient = ({ navigation }) => {
  const [email, setEmail] = useState();
  const [password, setPassword] = useState();

  const { register } = useContext(AuthContext);

  return (
    <LinearGradient colors={[""#BE93C5"", ""#7BC6CC""]} style={styles.con}>
      <View style={StyleSheet.container}>
        <Image source={require(""../images/Logo.png"")} style={styles.logo} />
        <Text style={styles.text}>Doctor care</Text>

        <FormInput
          labelValue={email}
          onChangeText={(userEmail) => setEmail(userEmail)}
          placeholderText=""Email""
          iconType=""user""
          keyboardType=""email-address""
          autoCapitalize=""none""
          autoCorrect={false}
        />

        <FormInput
          labelValue={password}
          onChangeText={(userPassword) => setPassword(userPassword)}
          placeholderText=""Password""
          iconType=""lock""
          secureTextEntry={true}
        />

        <FormButton
          style={styles.loginButton}
          onPress={() => navigation.navigate(""HomeScreen"")}
          buttonTitle=""LOGIN""
          onPress={() => register(email, password)}
        />
      </View>
    </LinearGradient>
  );
};
```

### `AuthProvider.js`
```js
import React, { createContext, useState } from ""react"";
import auth from ""@react-native-firebase/auth"";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  return (
    <AuthContext.Provider
      value={{
        user,
        setUser,
        login: async (email, password) => {
          try {
            await auth().signInWithEmailAndPassword(email, password);
          } catch (e) {
            console.log(e);
          }
        },
        register: async (email, password) => {
          try {
            await auth().createUserWithEmailAndPassword(email, password);
          } catch (e) {
            console.log(e);
          }
        },
        logout: async () => {
          try {
            await auth().signOut();
          } catch (e) {
            console.log(e);
          }
        },
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
```

**Edited** by @bvaughn for formatting.",Other
https://github.com/facebook/react/issues/22528,22528,"Support owners list (or ""rendered by"") in production","[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":3440913459,""node_id"":""LA_kwDOAJy2Ks7NGCwz"",""url"":""https://api.github.com/repos/facebook/react/labels/Size:%20Medium"",""name"":""Size: Medium"",""color"":""DAFA60"",""default"":false,""description"":""""}]",closed,FALSE,,1,2021-10-08T15:39:22Z,2022-03-14T18:08:50Z,2022-03-14T18:08:50Z,COLLABORATOR,completed,,"DevTools shows a [""rendered by"" list](https://github.com/facebook/react/blob/main/packages/react-devtools/CHANGELOG.md#rendered-by-list) for inspected components.

<img width=""599"" alt=""Screen Shot 2021-10-08 at 11 33 53 AM"" src=""https://user-images.githubusercontent.com/29597/136584340-60480623-7d08-48e3-a0eb-4d6a40dc0082.png"">

This provides a quick way to trace the flow of props through an application.

This information is currently retrieved from a DEV-only `_debugOwner` field. (That means DevTools won't show this list in production.)

I wonder if we could calculate this list using the `Error` call stack in production too (using a similar approach as how we build ""native"" component stacks):
https://github.com/facebook/react/blob/5fa4d79b00988f354073bc27313363dd5cce9cd3/packages/react-devtools-shared/src/backend/DevToolsComponentStackFrame.js#L62-L203

For instance, if we walked the `return` path and grabbed the call stacks for each component, I think we could ""group"" components by owner by comparing the stacks.",Feature
https://github.com/facebook/react/issues/22536,22536,Bug: Typescript definitions don't let me define function types that may return Destructors,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-10-10T18:51:14Z,2021-10-10T23:21:17Z,2021-10-10T23:21:17Z,NONE,completed,,"Move Destructor into the React namespace so my typescript can use it.

React version: 17.0.2

## Steps To Reproduce

I want to create functional hook components that replace commonly duplicated code - for instance, I am commonly using my event bus.

```typescript
// somewhere...
const AppContext = createContext<{ eventbus: EventEmitter }>({ eventbus: new EventEmitter() })
// elsewhere...
const { eventBus } = useContext(AppContext)
useEffect(() => {
  if (!eventBus) return
  if (!otherThing) return
  if (someStateThing) eventBus.emit(""setup"", otherThing.bit(someStateThing))
  return (): void => void eventBus.emit(""cleanup"", otherThing.bit(someStateThing))
}, [ eventBus, otherThing, someStateThing ] )
```
But I want to compose something I can use like this:
```typescript
useEffectWithEventBus((eventBus) => {
  if (!otherThing) return
   eventBus.emit(otherThing.bit(someStateThing))
   (): void => void eventBus.emit(""cleanup"", otherThing.bit(someStateThing))
}, [otherThing, someStateThing])
```
But when I go to try and define that
```typescript
const useEffectWithEventBus: (cb: (eventbus: EventEmitter) => void | Destructor, deps: DependencyList) => void = (cb, deps) => {
   const { eventBus } = useContext(AppContext) 
   useEffect(() => cb(eventBus), [ eventBus, ...deps ])
}
```
`Cannot find name Destructor`

But EffectCallback IS `() => void | Destructor`

And destructor is `type Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };`

Its not inside the React Namespace - Destructor is mysteriously limited to the File scope of the react index? So I can't define my custom hook to have a function that can return a destructor... because I don't have access to the Destructor type.

I thought, well, maybe I can just do functional composition on that... but... how do I define my callback out of the scope where eventBus is pulled from the context?  I might be able to get it in there functionally by using the .call(this) context...

```typescript
const useEffectWithEventBus: (cb: EffectCallback, deps: DependencyList) => void = (cb, deps) => {
   const { eventBus } = useContext(AppContext) 
   useEffect(() => cb.call(eventBus), [ eventBus, ...deps ])
}
useEffectWithEventBus(() => {
  if (!otherThing) return
   this?.emit(otherThing.bit(someStateThing))
   (): void => void this?.emit(""cleanup"", otherThing.bit(someStateThing))
}, [otherThing, someStateThing])
```

But then the compiler thinks that this might be undefined (true) and it has no idea that this refers to an `EventEmitter` - and it eludes me how(or even if is possible) to type narrow `this` to an `EventEmitter`.  (that's pretty advanced typing don't you think?)


## The current behavior

Destructor type not exported enough to use in my code

## The expected behavior

Destructor type is exported enough to use in my code
",Other
https://github.com/facebook/react/issues/22539,22539,Allow custom hooks to return stable results,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,3,2021-10-11T13:35:54Z,2022-05-17T18:13:51Z,2022-05-17T18:13:51Z,NONE,completed,,"Right now only `useRef` and other first-party hooks are allowed to return a stable result that is not required to be listed in the dependencies array of other hooks.

We have the `react-hooks/exhaustive-deps`' `additionalHooks` option to specify additional hooks that take dependencies arrays, but we don't have a way to describe a hook that returns a stable result.

An example of such hook could be:

```js
const useLatest = (value) => {
  const ref = useRef(value);
  ref.current = value;
  return ref;
};
```

It would be extremely useful being able to define custom hooks like this with a rule that could look like the following:

```
""react-hooks/exhaustive-deps"": [
  ""warn"",
  {
    ""stableKnownHookValues"": ""(useLatest|useSomethingElse)""
  }
]
```

I'd be willing to work on a PR if this idea is deemed useful.",Feature
https://github.com/facebook/react/issues/22564,22564,Bug: shows duplicate the last elements of an array stored with useRef,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2021-10-14T23:13:04Z,2022-03-30T17:40:23Z,2021-10-15T15:40:01Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

I'm keeping the last values passed as props without force a re-render, I'm using the `useRef` to store the elements without re-render the output.

The weird part is that the values showed are different from what I'm storing, duplicating the last elements.


React version: 17.0.2
![image](https://user-images.githubusercontent.com/14454/137406585-c89f359b-7777-4d66-ba2d-ecaebae5ac47.png)


<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

https://codesandbox.io/s/stupefied-ride-m1did?file=/src/App.js

```
import React from ""react"";

const ComR = React.memo(function Compo({ id, value }) {
  const lastElements = React.useRef([0, 0, 0, 0, 0]);
  const [_, ...m] = [...lastElements.current, value]; // remove first and insert last
  lastElements.current = m;
  console.log(""rendering"", id, value, memo.current);
  return (
    <div>
      {id} - {lastElements.current.join("", "")}
    </div>
  );
});

export default function App() {
  const [value, setValue] = React.useState(0);

  React.useEffect(() => {
    setInterval(() => {
      setValue(Math.ceil(Math.random() * 10000));
    }, 7000);
  }, [setValue]);

  return (
    <div className=""App"">
      <ComR id=""1"" value={value} />
    </div>
  );
}
```

## The current behavior

The console.log is showing different what is printing into the component

![image](https://user-images.githubusercontent.com/14454/137407532-d1fff912-0542-43f8-8c99-5d87da094da2.png)

## The expected behavior

expects work as linear array operations, since was called/rendered once",Support
https://github.com/facebook/react/issues/22570,22570,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,9,2021-10-15T19:16:38Z,2021-10-21T20:04:12Z,2021-10-20T16:23:55Z,NONE,completed,,"### Website or app

https://wayray.com/#how-we-work

### Repro steps

not able to see

### How often does this bug happen?

Sometimes

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.19.2-20ca9b565

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25708:41
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:23923:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24083:12
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:52511:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/22579,22579,Scheduling Profiler: De-emphasize React internals,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null},{""id"":2281766624,""node_id"":""MDU6TGFiZWwyMjgxNzY2NjI0"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Scheduling%20Profiler"",""name"":""Component: Scheduling Profiler"",""color"":""1dc3d6"",""default"":false,""description"":""""}]",closed,FALSE,,0,2021-10-18T18:48:54Z,2021-10-21T18:40:42Z,2021-10-21T18:40:42Z,COLLABORATOR,completed,bvaughn,"Follow up to #22578

Digging into certain sources of slowness (e.g. slow memoization code) requires looking at the CPU flame chart. Unfortunately this predominantly consists of React internal frames, which can be convoluted if you are not familiar with React's source code.

One way to improve this would be to either filter out (remove) React internal frames or de-emphasize them visually in some other way. Because removing them would be more work, we should try dimming them instead. For example:
![Screen-Shot-2021-10-18-at-2 22 32-PM](https://user-images.githubusercontent.com/29597/137787670-f57cd229-16ff-4461-888e-33b46aff0864.png)

Ignore the colors above as it was just a quick mockup. Ideally the ""internal"" frames should be dimmer, not just grayscale.

Coloring internal frames is a simpler solution than filtering/hiding them, but how do we know which frames are internal? One way would be to capture an Error stack at the beginning and end of React internal modules (and then report it, along with other profiling data, via the user timing API).

Conceptually, it would work something like this:
```js
/** @license React v18.0.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const startOfModuleError = new Error();

// React module ...

const endOfModuleError = new Error();
```

However I'm not sure how we would _actually_ do this across multiple modules, in strict mode, without polluting the global namespace. Maybe we could make use of the DevTools hook for this, although until #22529 lands, that seems a little hacky.

Anyway, assuming this information is present somewhere, it could be logged to the user timing API also so that it's persisted along with the other profiling data.

Lastly the Scheduling Profiler could read in this data and use it to determine which frames to color (based on whether or not they were within the start/stop ranges for the specified files).",Feature
https://github.com/facebook/react/issues/22623,22623,I have been learning react for quite some time and I just recently came across the term React.memo() that helps us to optimize our functional components thus increase our application's performance. I understood what's it for but one thing I don't understand is that when to use it? does it make sense to use it in our every primary child components besides App.js?,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,3,2021-10-25T09:13:58Z,2021-10-26T06:27:32Z,2021-10-26T06:27:32Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->
",Support
https://github.com/facebook/react/issues/22652,22652,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-10-29T08:28:41Z,2021-10-29T08:29:03Z,2021-10-29T08:29:03Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/22654,22654,Bug: setState bail out doesn't work sometimes when updating from an effect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-10-29T14:12:55Z,2021-10-29T14:43:00Z,2021-10-29T14:43:00Z,CONTRIBUTOR,completed,,"## Description

The codesandboxed example doesnt make much sense, but I've stumbled upon this when trying to handle source change gracefully with `useSubscription`. I've wanted to rely on the bail-out behavior that is documented [here](https://beta.reactjs.org/reference/usestate#passing-the-same-value-to-setstate) but it turns out that for some reason I can't because the component rerenders twice here (and this is caused by that `setState` within `useEffect`).

React version: 17.0.2

## Steps To Reproduce

1. Trigger some update/rerender
2. setState to the same value from within the `useEffect`

Link to code example:

https://codesandbox.io/s/stupefied-euclid-oo26w?file=/src/App.js

## The current behavior

The component rerenders twice after a click

## The expected behavior

The component should only rerender once after a click
",Other
https://github.com/facebook/react/issues/22704,22704,[ESLint Bug]: Rules of Hooks breaks with IIFEs,[],closed,FALSE,,5,2021-11-05T15:01:38Z,2021-11-05T19:26:25Z,2021-11-05T18:33:12Z,NONE,completed,,"### Summary

It seems like the rules of hooks break on [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)s when it seems like they shouldn't.

[This codesandbox is the best way to see what I'm talking about.](https://codesandbox.io/s/rules-of-hooks-trouble-with-iife-kz1f7?file=/src/index.tsx) However, I've included more details below in the (1) **_Flat Reproduction Steps_** and (2) **_Example Use-case_** sections.

### Flat Reproduction Steps
<ol>
<li>
Create some custom hook.
<pre lang=""tsx""/>
// This one is fine
const useStateRegular = (initVal: any) => useState(initVal);
</pre>
</li>
<li>
Modify the hook to use an <a href=""https://developer.mozilla.org/en-US/docs/Glossary/IIFE"">IIFE</a>
<pre lang=""tsx""/>
// This one breaks rules of hooks. ❌
const useStateIFFE = (initVal: any) => (() => useState(initVal))()
</pre>
</li>
<li>
Observe that this triggers ESLint (in an ESLint compatible environment; see <a href=""https://codesandbox.io/s/rules-of-hooks-trouble-with-iife-kz1f7?file=/src/index.tsx"">codesandbox also linked above</a>)
</li>
</ol>

### Example Use-case
```tsx
// Example usage: a sort-of-functional style for a toggle boolean hook 
const useToggle = (init: any) =>
  (([myBool, setMyBool]): [boolean, () => void] => [
    myBool,
    // useRef breaks the rules of hooks here ❌
    useRef(() => setMyBool((prevValue) => !prevValue)).current
  ])(useState(!!init));

function ExampleUsage() {
  const [value, toggleValue] = useToggle(true);
  return (
    <>
      <h2>example usage</h2>
      <button onClick={toggleValue}>
        <code>{`value:${value}`}</code>
      </button>
    </>
  );
}
```

```
DISCLAIMER: 
1. Although this may be an odd style, this doesn't really break the rules of hooks.
2. Again about the style, it's OK to prefer `useCallback` here if you want. 
I'm not trying to write something perfect for this example, I'm just trying to give one.
```

<hr /> 

EDIT: ~`1. Although this may be an odd style, this doesn't really break the rules of hooks.`~

<details><summary>
<b>I was wrong. <i>It does break the rules of hooks.</i></b>
Specifically, the ""nested functions"" part of the first rule ""<a href=""https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level"">Only call hooks at the top level.</a>""</summary><br/>

1. IFFEs used like this are in fact, nested functions. (see more: [Nested Functions MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#nested_functions_and_closures))

2. Here's the thing I missed <img src=""https://user-images.githubusercontent.com/23425952/140564599-f1621702-e8a8-45f0-8b0e-f4e700bc266e.png"" />
<hr/>

</br></details>",Support
https://github.com/facebook/react/issues/22709,22709,SetState in useCallback or without useCallback,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,4,2021-11-06T12:48:18Z,2022-04-29T09:20:08Z,2022-04-29T09:20:03Z,NONE,completed,,"This looks simple example to pinpoint the scenario, this example not reflect real-time large applications. 

So I want to understand which one is better to approach with useCallback or without useCallback.

As per documentation, useCallback memories function in memory and don't create every render, so do we need to useCallback for setting state though a function or react internally handles it.


In this code we are setting setState in onCheckChange, without useCallback, does it mean React create onCheckChange function every re-render? 

Can we handle without re-creation every render without useCallback

```

const App = () => {
  const [checked, setChecked] = useState(false)

  // Without UseCallback
  const onCheckChange = () => {
    setChecked(!checked);
  };
  return (
    <div className=""App"">
      <input type=""checkbox"" onChange={onCheckChange} checked={checked} />
    </div>
  );
}

```

In this code state will be updated through useCallback to avoid re-creation of onCheckChange 

```
const App = () => {
  const [checked, setChecked] = useState(false)

  // Callback to update Sate
  const onCheckChange = useCallback(() => {
    setChecked(checked => !checked);
  }, [setChecked]);

  // or without dependency list 
  const onCheckChange = useCallback(() => {
    setChecked(checked => !checked);
  }, []);

  return (
    <div className=""App"">
      <input type=""checkbox"" onChange={onCheckChange} checked={checked} />
    </div>
  );
}
```",Support
https://github.com/facebook/react/issues/22728,22728,Bug: I dont like it,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-11-09T07:25:46Z,2021-11-09T07:26:27Z,2021-11-09T07:26:27Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/22741,22741,"Bug: React instrumentation encountered an error: Error: Could not find ID for Fiber ""Portal""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2021-11-11T08:34:48Z,2021-11-15T15:51:47Z,2021-11-15T15:51:47Z,NONE,completed,jackluson,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:  17.0.2

## Steps To Reproduce
1. 
> when i execute `Modal.hide()` 

2.
![image](https://user-images.githubusercontent.com/36684351/141264440-be0f55b9-4aa8-4ff4-a9de-1c8c0291f813.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
![image](https://user-images.githubusercontent.com/36684351/141264419-bcb20cd5-8f69-44d8-a8b2-2cf5c64882b8.png)

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/22742,22742,How can I optimise and speed up react js app with multiple tabs,[],closed,FALSE,,9,2021-11-11T09:22:14Z,2021-11-22T16:13:48Z,2021-11-22T16:13:48Z,NONE,completed,,"Hello,
I have a react application with multiple tabs, in each tab we can add one or multiple highcharts. Once we reach the third tab, the application becomes very slow, took more than 15 seconds to do actions like adding new tab, delete tab, adding or removing highcharts. I'm already using functions of optimisation like memo, useMemo, useCallback, ... So I'm wondering if there is a possibility to unmount or kill the already visited tabs without hiding them in order to save the memory for the active tab. If you have any idea of how I can modify the architecture in order to speed up the application, because, I'm wondering how big applications for example handle multiple tabs without decreasing the performance. Tech : react js, redux, highcharts",Support
https://github.com/facebook/react/issues/22743,22743,Bug: react-hooks/exhaustive-deps incorrectly considers synchronous access of outer scope that isn't in the dependency list to be a violation,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,10,2021-11-11T10:14:17Z,2021-11-28T09:15:31Z,2021-11-28T09:15:30Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1. Implement the `react-hooks/exhaustive-deps` ESLint rule.
2. Create a `useEffect` function that doesn't include synchronously accessed identifiers from the outer scope.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/beautiful-kalam-q0dwu?file=/src/MyComponent.tsx

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Consider this contrived example:

```jsx
type Props = {
  trigger: boolean
  numbers: number[]
}

function MyComponent({trigger, numbers}: Props) {
  const [sum, setSum] = useState<number>()

  useEffect(() => {
    setSum(numbers.reduce((a, b) => a + b, 0))
  }, [trigger])

  return sum === undefined ? null : (
    <div>
      The sum of the numbers is {sum}.
    </div>
  )
}
```

The callback passed to `useEffect` always accesses the latest version of `numbers`, not a stale copy. This is because when `trigger` changes, the _latest_ version of the callback is invoked, which closes over the _latest_ version of `numbers`.

However, `react-hooks/exhaustive-deps` doesn't recognize that `numbers` is never stale when used in the callback. This rule could easily distinguish between safe and unsafe access: All synchronous accesses are safe. Asynchronous accesses are potentially unsafe. The easy way to distinguish between synchronous and asynchronous accesses is to look at whether the access is occurring directly in the function passed to `useEffect` (synchronous and safe) or within a function inside that function (asynchronous and potentially unsafe).

The `react-hooks/exhaustive-deps` rule provides good protection against stale references in `useMemo` and `useCallback`, but in both those hooks, the dependency list has only one purpose: Avoid stale references. The `useEffect` hook has an additional purpose: Trigger the effect callback. So the `react-hooks/exhaustive-deps` rule in its current form is not well suited to `useEffect`. This violation of the single responsibility principle causes countless bugs which `react-hooks/exhaustive-deps` often makes worse in its current form, by prompting developers to add items to the effect list that shouldn't trigger the effect.

## The expected behavior

The `react-hooks/exhaustive-deps` rule should not consider synchronously accessed outer scope within the function passed to `useEffect` to be a violation.",Other
https://github.com/facebook/react/issues/22758,22758,Some one is changing the state variable from the react devlopment tool in production build?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2021-11-15T04:37:46Z,2022-03-09T18:30:33Z,2022-03-09T18:30:33Z,NONE,completed,surajit25,,Other
https://github.com/facebook/react/issues/22823,22823,Can't edit a editable div in facebook post field(Keys not working),"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-11-24T05:04:55Z,2021-11-24T21:43:08Z,2021-11-24T21:43:07Z,NONE,completed,,"I am trying to make a extension like grammarly.When i want to make it work on facebook and twitter post field it doesn't work.When i write something in facebook post field and want to replace a suggestion of a existing wrong word by DOM modification using javascript,replacing suggestion does occur nicely.But after that no key including backspace,delete seems to stop working.This happens only in case of facebook and twitter.I wonder how grammarly manage this.Can anyone show me the path to solve this?

I think react dom of facebook does not permit these type of dom manipulation.What could be the ways to solve this problem from facebook react side.
`document.activeElement.innerText=""hello, world""`",Other
https://github.com/facebook/react/issues/22843,22843,[Suggestion] Throw Circular Reference Error,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-11-29T08:02:17Z,2021-11-29T15:06:22Z,2021-11-29T15:06:13Z,NONE,completed,,"I just spent >20min wondering why my page was hanging. Turns out I had referenced the component I was rendering in the return method.

I know it's a stupid mistake however to prevent more time being wasted on it I propose a circular reference check which should throw an error. 

I may work on a pull request later if I have time and it hasn't been patched yet.",Other
https://github.com/facebook/react/issues/22849,22849,"Bug: Clicking button type=""button"" submits form","[{""id"":127893911,""node_id"":""MDU6TGFiZWwxMjc4OTM5MTE="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20DOM"",""name"":""Component: DOM"",""color"":""fef2c0"",""default"":false,""description"":null}]",closed,FALSE,,9,2021-12-01T21:56:24Z,2021-12-07T12:45:53Z,2021-12-07T12:45:53Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: tested in `16.13.1`, `17.0.2`, and `18.0.0-beta-a65ceef37-20211130`

## Steps To Reproduce

1. Click a button `type=button`
2. Cause a rerender where that same DOM button will be converted into a button `type=submit`
3. Observe that any form linked to the submit button is submitted, even though the submit button was never clicked

Adding a `key` to force a remount circumvents the issue, but it still seems very unexpected.

## Example component

```
const App = () => {
  const [showForm, setShowForm] = React.useState(false);

  if (showForm) {
    return (
      <div>
        <div>
          <form
            id=""form""
            onSubmit={(e) => {
              e.preventDefault();
              console.log(""form submitted"");
            }}
          >
            <p>
              Why was this form submitted? It didn't even exist when the ""Show
              form"" button was clicked.
            </p>
          </form>
        </div>

        <button
          form=""form""
          type=""submit""
          onClick={() => console.log(""submit clicked"")}
        >
          Submit
        </button>
      </div>
    );
  }

  return (
    <div>
      <div></div>
      <button type=""button"" onClick={() => setShowForm(true)}>
        Show form
      </button>
    </div>
  );
};
```


## Live examples
- [Example 1](https://codepen.io/tamlyn/pen/qBPEvLr) - the form is submitted even though it doesn't exist in the DOM at the time of the click
- [Example 2](https://codepen.io/tamlyn/pen/vYeEJRb) - simpler example where wrong form is submitted

",Other
https://github.com/facebook/react/issues/22869,22869,"Bug:在联通4g或wifi网络环境下,引用在线cdn报错","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,5,2021-12-05T13:24:51Z,2022-04-06T06:17:36Z,2021-12-07T18:32:16Z,NONE,completed,wangjia0525,"
<script crossorigin src=""https://unpkg.com/react@17.0.2/umd/react.production.min.js""></script>
<script crossorigin src=""https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js""></script>
引用这两个资源在联通4g或wifi网络环境下,引用react和react-dom报错




<img width=""779"" alt=""023059F6-585C-47D0-A095-072A6829C4C5"" src=""https://user-images.githubusercontent.com/29113575/144748521-465243b7-4895-48a0-a377-6e055f4c301e.png"">

",Other
https://github.com/facebook/react/issues/22894,22894,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:16Z,2021-12-09T13:28:06Z,2021-12-09T13:28:06Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22895,22895,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:18Z,2021-12-09T13:28:05Z,2021-12-09T13:28:05Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22896,22896,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:20Z,2021-12-09T13:28:04Z,2021-12-09T13:28:04Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22904,22904,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:30Z,2021-12-09T13:27:50Z,2021-12-09T13:27:50Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22905,22905,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:31Z,2021-12-09T13:27:45Z,2021-12-09T13:27:45Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22907,22907,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:23:34Z,2021-12-09T13:27:08Z,2021-12-09T13:27:08Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22912,22912,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:24:42Z,2021-12-09T13:27:03Z,2021-12-09T13:27:03Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22920,22920,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:24:52Z,2021-12-09T13:26:52Z,2021-12-09T13:26:52Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22928,22928,Bug: onChange not working with custom elements,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-09T13:25:05Z,2021-12-09T13:26:23Z,2021-12-09T13:26:23Z,NONE,completed,,title says it all!,Other
https://github.com/facebook/react/issues/22940,22940,Bug: extra render with the same value for useState and onClick only for React-DOM,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,7,2021-12-11T15:56:14Z,2022-01-11T05:50:01Z,2022-01-07T18:47:28Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 16.13.1

## Steps To Reproduce

1. I used the following code in Jest

```ts
  it(""should not rerender when setting state to the same value via click"", async () => {
    const callback = jest.fn();
    function MyComponent() {
      const [foo, setFoo] = useState(""bir"");
      callback();
      return (<div data-testid=""test"" onClick={() => setFoo(""bar"")}>{foo}</div>);
    }

    const { getByTestId } = render(<MyComponent />)
    const testElement = getByTestId(""test"");
    expect(testElement.textContent).toEqual(""bir"");
    expect(callback).toBeCalledTimes(1);

    act(() => { fireEvent.click(testElement); });
    expect(testElement.textContent).toEqual(""bar"");
    expect(callback).toBeCalledTimes(2);

    act(() => { fireEvent.click(testElement); });
    expect(testElement.textContent).toEqual(""bar"");
    expect(callback).toBeCalledTimes(2); // gets 3 here

    /*
     assuming we update the last line as follows
     expect(callback).toBeCalledTimes(3); // really should be 2
     act(() => { fireEvent.click(testElement); });
     expect(testElement.textContent).toEqual(""bar"");
     expect(callback).toBeCalledTimes(3); // does not re-render
    */

  })
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

- Similar code in [codesandbox](https://codesandbox.io/s/rerender-on-first-two-clicks-700c0?file=/src/App.js)
- Simlar AND working code in [an Expo Snack](https://snack.expo.dev/@trajano/usestate-test)

## The current behavior

On initial render OK
On first click, rerender due to value change OK
On second click, rerender even with the same value NOT OK

## The expected behavior

On initial render OK
On first click, rerender due to value change OK
On second click, no rerender because useState dispatch with the same value

Note this works correctly on React-Native as shown by Expo",Bug
https://github.com/facebook/react/issues/22993,22993,Bug: Refs are becoming null after setting state ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2021-12-20T03:17:36Z,2021-12-20T04:00:06Z,2021-12-20T04:00:06Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
Setting state after using mouse event listeners causes refs to become null.  The sandbox is from https://stackoverflow.com/questions/61371579/ref-is-strangely-turning-null-in-react   
setting state on line 67 causes the ref to become magically null on line 68.  



<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/reverent-http-khjj0?file=/src/App.js
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
Setting refs to null after setting state should not happen.  This is a huge bug. ",Other
https://github.com/facebook/react/issues/22997,22997,"Bug: Image source takes a string, but not a variable with the same string","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2021-12-20T10:16:48Z,2021-12-20T14:20:22Z,2021-12-20T13:46:12Z,NONE,completed,,"I'm using create-react-app

In my App.js, (the standard file created automatically) 

```
//This one works 
function Image(){
    return  <img src={require(""./image.png"").default}/>
}

//This doesn't work
function Image2(){
    let src = ""./image.png"";
    return <img src={require(src).default}/> 
}
```


Seems odd, since src has the same value as the string. Is it maybe a compiler error?

Complete file would be like this

```
import React from 'react';

//This work 
function Image(){
    return  <img src={require(""./image.png"").default}/>
}

//This doesn't work 
/*
function Image2(){
    let src = ""./image.png"";
    return <img src={require(src).default}/> 
}
*/

function App(){
     return <Image/>
     //return <Image2/>
}

export default App;
```

I'm researching, and it might be due to webpack and not react.

Anyway, I'm too inexperienced, I'll leave this, it might be useful somehow. ",Support
https://github.com/facebook/react/issues/23011,23011,[DevTools Bug]: ,"[{""id"":71502270,""node_id"":""MDU6TGFiZWw3MTUwMjI3MA=="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure"",""name"":""Component: Build Infrastructure"",""color"":""f9d0c4"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2021-12-21T17:47:18Z,2021-12-21T18:57:17Z,2021-12-21T18:57:17Z,NONE,completed,,"### Website or app

react-devtools-extension

### Repro steps

$ yarn build-for-devtools
yarn run v1.22.17
$ cross-env RELEASE_CHANNEL=experimental yarn build react/index,react-dom,react-is,react-debug-tools,scheduler,react-test-renderer,react-refresh --type=NODE
$ node ./scripts/rollup/build.js react/index,react-dom,react-is,react-debug-tools,scheduler,react-test-renderer,react-refresh --type=NODE
node:internal/modules/cjs/loader:936
  throw err;
  ^

Error: Cannot find module 'rollup'
Require stack:
- /sda1/git/react/scripts/rollup/build.js
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)
    at Function.Module._load (node:internal/modules/cjs/loader:778:27)
    at Module.require (node:internal/modules/cjs/loader:1005:19)
    at require (node:internal/modules/cjs/helpers:102:18)
    at Object.<anonymous> (/sda1/git/react/scripts/rollup/build.js:3:16)
    at Module._compile (node:internal/modules/cjs/loader:1101:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ '/sda1/git/react/scripts/rollup/build.js' ]
}
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/23026,23026,eslint-plugin-react-hooks: exhaustive-deps nagging behaviour,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,9,2021-12-24T09:02:53Z,2022-04-29T14:59:36Z,2022-04-29T14:59:31Z,NONE,completed,,"In some situations like the following, I can't find an elegant way to deal with exhaustive-deps error. I don't want to disable it just because of that maybe there is room to improve the linter rule here?

```js
const { firstName, lastName, middleName, email, ...(list goes on) } = someData;

const cb = useCallback(() => {
  ...
  someFn({
    firstName,
    lastName,
    middleName,
    ...,
    //(basically a subset of someData with other properties from component context)
  })
}, [someData] // => here I have to list all the variables I destructed from that object instead of just putting someData as dependency. When we assume that we use that destructed variables all over in the component context and they are numberous; dependency list grows long and maybe not so efficient.
```
",Support
https://github.com/facebook/react/issues/23030,23030,[DevTools Bug] Cannot read properties of undefined (reading 'push'),"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2021-12-25T22:22:58Z,2021-12-26T02:02:21Z,2021-12-26T00:43:08Z,NONE,completed,,"### Website or app

https://nickretallack.github.io/nameless-language/

### Repro steps

Just view the components tab.

This site is written in Rescript.

Actually, this is all the Rescript code you need to break devtools:

```rescript
@react.component
let make = () => {
  let _ = ReactUpdate.useReducer((_: unit, _: unit) => ReactUpdate.NoUpdate, ())
  React.useEffect(() => None)
  <div />
}
```

`ReactUpdate` is provided by [`rescript-react-update`](https://github.com/bloodyowl/rescript-react-update)


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.22.0-0229baee2

### Error message (automated)

Cannot read properties of undefined (reading 'push')

### Error call stack (automated)

```text
at F (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13216:7)
    at H (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13250:10)
    at exports.inspectHooksOfFiber (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:13310:12)
    at inspectElementRaw (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8067:65)
    at Object.inspectElement (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:8350:38)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:10183:56
    at Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4225:18)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:4868:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/react_devtools_backend.js:12176:9)
```


### Error component stack (automated)

```text
at InspectedElementContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:38950:3)
    at Suspense
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at InspectedElementErrorBoundaryWrapper (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37796:3)
    at NativeStyleContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:40436:3)
    at div
    at div
    at OwnersListContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:33294:3)
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35907:3)
    at Components_Components (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42439:52)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37307:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37480:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37450:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42619:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42065:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30204:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30826:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37859:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53732:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot read properties of undefined (reading 'push') in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/23035,23035,"[DevTools Bug] Cannot add node ""1"" because a node with that id is already in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,13,2021-12-27T20:33:10Z,2022-01-12T13:48:41Z,2022-01-12T13:48:32Z,NONE,completed,,"### Website or app

It's empty project creating with 'react-native init'

### Repro steps

1. Start rn app in debug mode

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.14.0-d0ec283819

### Error message (automated)

Cannot add node ""1"" because a node with that id is already in the Store.

### Error call stack (automated)

```text
at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:140545
    at c.emit (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:89515)
    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:90986
    at /Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347787
    at Array.forEach (<anonymous>)
    at S.Gc.e.onmessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:48:347771)
    at S.n (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:40:3009)
    at S.emit (events.js:315:20)
    at e.exports.P (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:9318)
    at e.exports.emit (events.js:315:20)
    at e.exports.dataMessage (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:15409)
    at e.exports.getData (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:14651)
    at e.exports.startLoop (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:12066)
    at e.exports._write (/Applications/React Native Debugger.app/Contents/Resources/app.asar/node_modules/react-devtools-core/dist/standalone.js:8:11421)
    at doWrite (_stream_writable.js:403:12)
    at writeOrBuffer (_stream_writable.js:387:5)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add node  because a node with that id is already in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/23047,23047,React 18 ,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,0,2021-12-30T03:30:25Z,2022-01-07T18:48:15Z,2022-01-07T18:48:15Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->
",Other
https://github.com/facebook/react/issues/23060,23060,How to add onClick event on dynamically created element in ReactJS,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2022-01-03T08:42:21Z,2022-01-07T19:11:16Z,2022-01-07T19:11:09Z,NONE,completed,,,Support
https://github.com/facebook/react/issues/23063,23063,React 18: bootstrapScriptContent escapes HTML so quotes can’t be used,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,12,2022-01-03T20:36:40Z,2022-04-27T00:13:22Z,2022-04-16T17:47:46Z,CONTRIBUTOR,completed,,"If you use the `bootstrapScriptContent` option of `renderToPipeableStream()` to provide hydration data (as [recommended in the <script> upgrade guide](https://github.com/reactwg/react-18/discussions/114)) with `JSON.stringify()` it doesn’t work because React escapes HTML characters in `bootstrapScriptContent` like quotes. I’ve worked around this by using backticks to deliniate strings.

What’s the correct thing to do here?

https://github.com/facebook/react/blob/cdb8a1d19d0c0d43a72c3f0fe739b04da247c360/packages/react-dom/src/server/ReactDOMServerFormatConfig.js#L99-L105",Bug
https://github.com/facebook/react/issues/23072,23072,Bug:  The order of execution of setState,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-01-06T09:51:54Z,2022-01-07T19:11:47Z,2022-01-07T19:11:42Z,NONE,completed,,"
React version: 17.0.2 

## Steps To Reproduce

code
```javascript
function useStateStore(initialState) {
  const [state, setState] = React.useState(initialState);
  let newState = state;
  const setStateWrap = (value, callback) => {
    setState(state => {
      console.log(""state"", state);
      newState = { ...state, ...value };
      console.log(""newState"", newState);
      callback && callback(newState);
      return newState;
    });
    return newState;
  };

  const getState = () => newState;

  return {
    state,
    setStateWrap,
    getState
  };
}
    
function App(){
  const {state, setStateWrap,getState} = useStateStore({time:1})

  function handleClick(){
    setStateWrap({time: state.time+1})
    console.log('state.time===>',state.time);
    console.log('getState.time===>',getState().time);
  }
  
  return (
    <div>
      <button onClick={handleClick}>button-time</button>
      <div>time-{state.time}</div>
    </div>
  )
} 

Link to code example:

https://codesandbox.io/s/magical-mopsa-q6ju7?file=/src/App.js

## The current behavior
first clicked button get the result 
```text
state {time: 1}
newState {time: 2}
state.time===> 1
getState.time===> 2

second clicked button get the result
state.time===> 2
getState.time===> 2
state {time: 2}
newState {time: 3}

## The expected behavior
```text
state.time===> 1
getState.time===> 2
state {time: 1}
newState {time: 2}

second clicked button get the result
state.time===> 2
getState.time===> 2
state {time: 2}
newState {time: 3}

I want to know why have different order in two click action? 
",Support
https://github.com/facebook/react/issues/23083,23083,Adding the Warning when defaultValue = {Symbol | Function},[],closed,FALSE,,2,2022-01-09T02:15:00Z,2022-04-29T17:14:49Z,2022-04-29T17:14:48Z,NONE,completed,,"Hi, React Core Team, @gaearon  , @bvaughn , @philipp-spiess. New to open source community. I've been go through the issue #11734 and found out that there's no warning when defaultValue = {Symbol | Function}. I did see some TODOs in ReactDOMInput-test.js and I would like to help.

I tried to add up toErrorDev(""Invalid value for prop `defaultValue`"") matcher in ReactDOMInput-test.js and got the result of ""Expected warning was not recorded"". I went to study the /fixtures/dom/src/toWarnDev.js file and find out the argument might not match the condition set in line 125 - 139. But I'm stuck in the understanding of util.format(format, ...args) in line 97, it seems to be a string formatting function to me. 

Am I in the right direction to fix the issue? I'm looking forward to your reply, thanks for your time. 

![image](https://user-images.githubusercontent.com/83269073/148666556-17e6d382-dfda-486c-a444-c65d1ff9431d.png)
This is the warning that I mentioned.",Bug
https://github.com/facebook/react/issues/23093,23093,Bug: react-test-renderer: promise returned from `findByProps` query must be handled,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-01-11T11:01:34Z,2022-01-11T17:07:52Z,2022-01-11T17:07:51Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React (and react-test-renderer) version: 17.0.2
Eslint version: 8.6.0

## Steps To Reproduce

1. create a `ReactTestInstance` using `create` from `react-test-renderer`
2. Try to run access `findByProps` of the root of `ReactTestInstance`
3. Eslint(`testing-library/await-async-query`) will show an error 

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

code example:
```jsx
// simulate nav toggle click event
create(<Nav onToggle={mockFunction} items={[]}></Nav>)
  .root.findByProps({
    className: ""app__nav-toggler"",
  })
  .props.onClick();
```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Eslint(testing-library/await-async-query) will show an error:

<img width=""416"" alt=""Screenshot 2022-01-11 at 11 57 52"" src=""https://user-images.githubusercontent.com/11424820/148930814-dd143b6b-60b4-4690-b633-da17b0f33780.png"">
<img width=""642"" alt=""Screenshot 2022-01-11 at 12 00 31"" src=""https://user-images.githubusercontent.com/11424820/148930866-c6898b22-fb56-415b-bb52-237040e6ad13.png"">

## The expected behavior
Since the return type of `findByProps` is not actually a promise, the error should not appear. `findByProps` appears to be synchronous.
",Other
https://github.com/facebook/react/issues/23105,23105,React 18 ,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,2,2022-01-14T02:50:05Z,2022-01-14T17:41:22Z,2022-01-14T17:40:55Z,NONE,completed,,"This is a non-compliance issue。

I am referencing a third-party component, but there is an input whose value I cannot modify. By looking at the source code, we can see that the data of this component runs inside the component using useState.
**But I can't modify the code of the third-party component，I can only modify the code of the parent component.**

if input does not expose state or Ref, is there any black magic to get/modify the component's useState method?

![image](https://user-images.githubusercontent.com/2993320/149443199-bbedf947-d68d-49e9-b9de-c65bd0146e83.png)
",Other
https://github.com/facebook/react/issues/23122,23122,React 18,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,0,2022-01-16T13:34:40Z,2022-01-16T14:52:29Z,2022-01-16T14:52:29Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->",Other
https://github.com/facebook/react/issues/23123,23123,React 18,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,0,2022-01-16T14:39:30Z,2022-01-16T14:52:32Z,2022-01-16T14:52:32Z,NONE,completed,,"<!--
  Ask a question or share feedback about the React 18 release here.
-->",Other
https://github.com/facebook/react/issues/23124,23124,[DevTools Bug]: not sure if bug or  not:  devtools marks Youtube as built with react.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2022-01-16T14:57:01Z,2022-01-16T17:57:07Z,2022-01-16T17:56:47Z,NONE,completed,,"### Website or app

https://www.youtube.com/

### Repro steps

I was watching a video on youtube when I noticed the new video hover features which were not there on the 15th of January 2022. 
This then led me to the react dev tools which I noticed had turned blue, never had before. wanted to know of this is a bug or not. 
I have restarted my computer and browser severally.

[](url
![tube](https://user-images.githubusercontent.com/65865227/149665223-b3243940-c1b0-418f-bfba-a8ca9eebb885.png)
)

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/23127,23127,i installed the chrome extension on chrome browser but cant still inspect a react page . it keeps telling me that this is not a react page,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2022-01-17T10:01:30Z,2022-03-09T18:31:10Z,2022-03-09T18:31:10Z,NONE,completed,dimmysophy,,Other
https://github.com/facebook/react/issues/23128,23128,beforeunload event not firing in ReactJS but working in standard javascript.,[],closed,FALSE,,2,2022-01-17T11:23:29Z,2022-01-25T04:08:36Z,2022-01-19T18:09:34Z,NONE,completed,,"OS: 5.14.21-2-MANJARO, Windows7
Browser: Firefox 95.0.2, Brave Version 1.33.106 Chromium: 96.0.4664.110, and Gnome Web 41.3
React: 17.0.2, 15.5.4

Codebase: https://github.com/azat-co/react-quickly/tree/master/ch05/note

Can replace react.js and react-dom.js with respective versions for 17.0.2 in the note/js folder for the codebase url.

After running the program, there are no errors. However, changing tabs or closing the tab does not launch a confirmation dialog.

This **[article](https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/)** suggests using event **visibilityState** for displaying the confirmation dialog.

After modifying **note.jsx** receive a confirmation dialog when switching tab however, the page running the application loses focus and the clicked tab gets focus. The application page should not lose focus. Still able to close tab running application:

```
class Note extends React.Component {
    confirmLeave(e) {
      let confirmationMessage = 'Do you really want to close?'
      //e.returnValue = confirmationMessage     // Gecko, Trident, Chrome 34+
      //e.returnValue = confirm(confirmationMessage)     // Gecko, Trident, Chrome 34+
      //return confirmationMessage              // Gecko, WebKit, Chrome <34
      if (window.confirm(confirmationMessage)) {
        e.returnValue = confirmationMessage
      } else {
        e.preventDefault();
      }
      return confirmationMessage
  }
    componentDidMount() {
      console.log('Attaching confirmLeave event listener for beforeunload')
      this.props.document.addEventListener('visibilitychange', this.confirmLeave)
      window.addEventListener('beforeunload', this.confirmLeave)
    }
    componentWillUnmount() {
      console.log('Removing confirmLeave event listener for beforeunload')
      this.props.document.removeEventListener('visibilitychange', this.confirmLeave)
      window.removeEventListener('beforeunload', this.confirmLeave)
    }
    render() {
      console.log('Render')
      return <div>Here will be our input field for notes 
        (parent will remove in {this.props.secondsLeft} seconds)</div>
    }
  }
```

The following javascript code works as required to prevent tab from being closed or switched:
```<!DOCTYPE html>
<html>
<body>
	<h1>Demo: confirm()</h1>
	<p id=""msg""></p>
	
	<script>
		 var userPreference;

		if (window.confirm(""Do you want to save changes?"") == true) {
			userPreference = ""Data saved successfully!"";
		} else {
			userPreference = ""Save Canceled!"";
		}

		document.getElementById(""msg"").innerHTML = userPreference; 

    </script>
</body>
</html>```



",Support
https://github.com/facebook/react/issues/23155,23155,[DevTools Bug]: Different results in chrome and firefox,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2022-01-20T18:17:36Z,2022-01-21T10:33:41Z,2022-01-20T20:37:45Z,NONE,completed,,"### Website or app

https://www.youtube.com/, https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox,https://docs.github.com/en

### Repro steps

I was using the YouTube website. I have a habit of checking if the website i have visited was using react or not. As always I checked for YouTube website too. But the react developer tools extension was showing the youtube website is using react. 

Just to make sure it was right I have installed the firefox browser then installed the react developer tools extension and opened the youtube website, But in firefox, the extension was saying the youtube is not using react. 

For confirming with other websites, I have visited mdn and GitHub docs in both chrome and firefox. The chrome react developer tools extension says that the mdn is using react and the firefox react developer tools extension says that the mdn is not using react. For the GitHub docs website, the chrome extension says that the GitHub docs website was using the react whereas the firefox react developer tools extension shows that the Github docs website doesn't use the react. 

I am attaching the screen recording. To differentiate what websites I have visited in chrome and firefox I previously opened the websites in chrome and showed the results, for firefox I have typed the query and showed the results. Can you tell why it was happening like this?


https://user-images.githubusercontent.com/59245935/150397327-1cae5d73-0e63-4a32-b54b-5aa3da522db4.mov



Repro steps
1. Login to the website
2. Scrolling  the website
3. Noticed the bug 

Versions:

Chrome: 97.0.4692.99
Firefox: 96.0.2
React Developer Tools:4.22.0


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/23238,23238,Bug: React cancels pointer event in certain cases?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2022-02-07T02:27:59Z,2022-02-07T21:33:54Z,2022-02-07T21:20:31Z,NONE,completed,,"When I call a useReducer dispatch function, subsequent events seem to be suppressed....but ONLY if the dispatch function results in a state change AND the event that triggered the dispatch function is a functional component (as opposed to a div (or nested div) in the top level App component).

e.g. this sandbox: https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js

When I touch an element, I expect to see both pointerdown and pointerenter fired. If you interact with the rendered sandbox in touch screen mode, you can see that this is true for all of the elements except for the ""Component div with state change"" element. For that element, the pointerenter event is fired (which calls the dispatch function) but pointerdown is never fired. (If you interact with a mouse instead of touch, everything behaves as expected.)

<details><summary>Code from the sandbox:</summary>

## JSX
```javascript
import ""./styles.css"";
import React from ""react"";
import ReactDOM from ""react-dom"";

export default function App() {
  function handlePointerDown(e) {
    console.log(`pointer down`);
    e.target.releasePointerCapture(e.pointerId);
  }

  function handlePointerEnterStateChange(e) {
    e.preventDefault();
    console.log(`pointer enter`);
    dispatch({ type: ""state-change"" });
  }

  function handlePointerEnterNoStateChange(e) {
    e.preventDefault();
    console.log(`pointer enter`);
    dispatch({ type: ""no-state-change"" });
  }

  function init(initialCount) {
    return { count: initialCount };
  }

  // the reducer (the first argument to useReducer)
  function reducer(state, action) {
    switch (action.type) {
      case ""no-state-change"":
        return state;
      case ""state-change"":
        return { count: state.count + 1 };
      default:
        throw new Error();
    }
  }

  const [state, dispatch] = React.useReducer(reducer, 3, init);

  function ComponentNoStateChange() {
    return (
      <div
        className=""letter""
        key=""2""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
      >
        Component div with no state change
      </div>
    );
  }

  function ComponentStateChange() {
    return (
      <div
        className=""letter""
        key=""3""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterStateChange(e)}
      >
        Component div with state change
      </div>
    );
  }
  console.log(""render app"");
  return (
    <div className=""App"">
      <div
        className=""letter""
        key=""1""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
      >
        Regular div no state change
      </div>
      <div
        className=""letter""
        key=""4""
        onPointerDown={(e) => handlePointerDown(e)}
        onPointerEnter={(e) => handlePointerEnterStateChange(e)}
      >
        Regular div state change
      </div>

      <ComponentNoStateChange />
      <ComponentStateChange />
      <div>
        <div
          className=""letter""
          key=""5""
          onPointerDown={(e) => handlePointerDown(e)}
          onPointerEnter={(e) => handlePointerEnterNoStateChange(e)}
        >
          Regular nested div no state change
        </div>
        <div
          className=""letter""
          key=""6""
          onPointerDown={(e) => handlePointerDown(e)}
          onPointerEnter={(e) => handlePointerEnterStateChange(e)}
        >
          Regular nested div state change
        </div>
      </div>
    </div>
  );
}

const rootElement = document.getElementById(""root"");
ReactDOM.render(<App />, rootElement);
```

## CSS
```css
.App {
  display: flex;
  flex-direction: column;
  background-color: lightblue;
}

.letter {
  touch-action: none;
  /*   pointer-events: all; */
  border: 1px solid lightgray;
  border-radius: 5px;
  background-color: lightgray;
  padding: 10px;
  font-family: ""Gill Sans"", ""Gill Sans MT"", Calibri, ""Trebuchet MS"", sans-serif;
  font-weight: bold;
}
```

## HTML
```html
<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"" />
    <meta
      name=""viewport""
      content=""width=device-width, initial-scale=1, shrink-to-fit=no""
    />
    <title>Test pointer dispatch</title>
  </head>

  <body>
    <noscript>
      You need to enable JavaScript to run this app.
    </noscript>
    <div id=""root""></div>
 
  </body>
</html>
```

</details>

React version: 17.0.2 and 16.10.2

## Steps To Reproduce

1. Go to https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js or copy the code
2. In touch mode, click on the ""Component div with state change"" element. Observe that pointerenter fires but not pointerdown.

Link to code example: https://codesandbox.io/s/pointerdown-prevent-default-react-forked-vwwgy?file=/src/index.js


## The current behavior

When I touch an element that is a functional component and the pointerenter event handler calls a useReducer dispatch function that results in a state change, the pointerdown event, which I expect to fire along with the pointerenter event, does not fire. If I interact with a mouse instead of touch, it works as expected. If I change the functional component to be a div (or nested div) in the top level App component, it works as expected. If I change the dispatch function to return the same state, it works as expected.

You can observe this in the linked codesandbox. If you use touch mode and interact with the ""Component div with state change"" element, pointerenter is fired but not pointerdown. If you interact with the other elements or you interact with mouse instead of touch, you see both pointerdown and pointerenter fire.

## The expected behavior

When I touch an element, I expect to see both pointerdown and pointerenter fired.
",Support
https://github.com/facebook/react/issues/23274,23274,"React app works as intended in development mode, but in production mode has another behaviour. ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2022-02-10T20:51:24Z,2022-02-11T14:25:14Z,2022-02-11T14:25:14Z,NONE,completed,," I made a simple React App as a beginner. My application worked fine on development mode, but after building it ... I saw that it does not work as it worked in development. I am very confuse because of that. There are no errors or warnings anywhere. 

Type of app: Tic-Tac-Toe.

##Behavior
Behavior in development: the app works, buttons on click shows 'X' or 'O' as expected.
Behavior in production: app it's compiled fine. UI shows up, but buttons on click do nothing.

My thinking is that if a part of code runs in a way in development it should runs the same thing also in production. I'm just confuse why both of them does not run in the same way. 

You can test the application in both development and production to see the difference. 

React version: 17.0.2

## Steps To Reproduce

1.Test the app in development mode to see that everything works properly. All the buttons work fine.
2.Test the app in production build to see that has an unexpected behavior and buttons don't do anything.

##Link
Link to my repo with the logical parts of my code there: 

  https://github.com/RaduHero/Tic-Tac-Toe-React-version-/blob/main/src/app.jsx 

If there is a misunderstanding on my part about how React works, I really apologize again! I'm trying to be useful to the community. Thank you very much and have a nice day! ",Other
https://github.com/facebook/react/issues/23283,23283,"[DevTools Bug] Could not find node with id ""18"" in commit tree","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,19,2022-02-12T23:29:52Z,2022-03-10T18:37:53Z,2022-03-10T18:35:52Z,NONE,completed,bvaughn,"### Website or app

https://github.com/ModelSaber/ModelSaber.Main

### Repro steps

Just try and load the 2/5 and 3/5 report from a reload and start profiling instance.

Change `REACT_APP_API_URL` to `https://apimodelsaber.rainemods.io` in order to launch the app without needing the full .NET 6 environment and the corresponding data in the postgres database.

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.23.0-e28a0db22

### Error message (automated)

Could not find node with id ""18"" in commit tree

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25574:13
    at Map.forEach (<anonymous>)
    at RankedChartBuilder_getChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25570:24)
    at ProfilingCache_ProfilingCache.getRankedChartData (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:25686:11)
    at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43680:32)
    at gi (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:15400:7)
    at zj (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:16741:7)
    at jl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:19201:86)
    at il (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18756:11)
    at hl (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:18748:23)
```


### Error component stack (automated)

```text
at CommitRankedAutoSizer (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:43659:34)
    at div
    at div
    at div
    at SettingsModalContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:35975:3)
    at Profiler_Profiler (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53276:34)
    at ErrorBoundary_ErrorBoundary (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37375:5)
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37518:3)
    at PortaledContent (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37548:5)
    at div
    at div
    at div
    at ThemeProvider (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37518:3)
    at TimelineContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42700:3)
    at ProfilerContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:42146:3)
    at TreeContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30256:3)
    at SettingsContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:30878:3)
    at ModalDialogContextController (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:37927:3)
    at DevTools_DevTools (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:53807:3)
```


### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Could not find node with id  in commit tree in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/23284,23284,Bug: using useEffect makes the function get the initital state even though I change the state by useState hook,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2022-02-13T01:04:04Z,2022-02-14T01:44:01Z,2022-02-14T01:44:01Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

1.define a functin component or jsx obj, I call it 'obj' in the following steps;
2.define a state called status, and to useEffect to listen the status change, set a callback in the effect;
3.the callback is try to set the obj value into a new state called newObj;
4.render newObj in the page;

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->
[demo.txt](https://github.com/facebook/react/files/8055608/demo.txt)


## The current behavior
1.the page show count: 0;
2.click the button--changeCount, and count++, then click the getCount--innner, console.log is printing the initial value of count, this shouldn't happen;
3.click the button-getCount-outside, console.log is printing current value of count, this is correct;
4.use the useCallBack hook to wrap the function named showCount, click the getCount--innner, console.log is still printing the initial value of count, this shouldn't happen;

I want to know why the count is not change. In order to get the current count, I must click the button--changeStatus or set the count into useEffect's deps, these behaviors try to make useEffect to refresh. I want to look for some help for this question. Thanks!
",Support
https://github.com/facebook/react/issues/23286,23286,[DevTools Bug]: DevTools failed to load source map,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2022-02-13T08:52:26Z,2022-02-15T06:12:15Z,2022-02-14T21:14:12Z,NONE,completed,,"### Website or app

Inital React App -> npm create-react-app

### Repro steps

1. Created initial react app
2. Typed ""npm start"" inside app folder
3. Check console of Chrome browser

This is what I get on my console in Chrome ""Version 98.0.4758.82 (Official Build) (64-bit)"":
![image](https://user-images.githubusercontent.com/17859431/153745907-5822f5f2-4bb4-43d7-b03b-d42edd5d64a7.png)

As these messages are annoying, please let me know how to fix this?

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

4.23.0

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Support
https://github.com/facebook/react/issues/23331,23331,React 18 - hydration of lazy component with sibling fails,"[{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,6,2022-02-19T22:22:23Z,2022-06-07T22:36:52Z,2022-02-27T07:09:04Z,CONTRIBUTOR,completed,,"Hello, I'm having an issue with hydration of SSR components using `renderToPipeableStream` and `hydrateRoot`. I have a minimum reproduction case here: https://github.com/laverdet/react-issue. Just run `npm install; npm start` and navigate to localhost:8000.

The error produced follows:
```
react-dom.development.js:87 Warning: Prop `id` did not match. Server: ""async"" Client: ""after""
    at span
    at Suspense
    at div
```

The relevant bits of implementation are reproduced below--

app.jsx
```js
const Async = lazy(async () => import('./hot.jsx') });

export const app = <div>
	<Suspense fallback={<div>Loading...</div>}>
		<Async />
		<span id=""after"">after</span>
	</Suspense>
</div>;
```

hot.jsx
```jsx
export default function Async() {
	return <span id=""async"">async</span>;
}
```

If I wrap `Async` directly in a suspense element it will work: `<Suspense fallback={null}><Async /></Suspense>`",Bug
https://github.com/facebook/react/issues/23341,23341,Bug: event target typed as EventTarget & T prevent usage without `as`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2022-02-23T03:02:01Z,2022-02-28T05:16:55Z,2022-02-23T17:39:26Z,NONE,completed,,"React version: 17.0.2

## Steps To Reproduce

1. create a form with a submit handler
2. type the submit handler as `onSubmit = (event: React.SyntheticEvent<HTMLFormEvent>)
3. add `new FormData(event.target)`

Link to code example: https://codesandbox.io/s/cra-forked-m8pyd5?file=/src/app.tsx

## The current behavior

We must use `as` because `e.target` is typed as `EventTarget & T` rather than `T`

## The expected behavior

The event target should rather be `T`",Support
https://github.com/facebook/react/issues/23374,23374,Bug: CustomError: Cannot find module react/jsx-runtime,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2022-02-26T18:40:05Z,2022-02-28T11:02:28Z,2022-02-28T11:02:24Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 17.0.2

## Steps To Reproduce

Not sure

## The current behavior 
CustomError: Cannot find module react/jsx-runtime

## The expected behavior
No Error

I switch from common js to esm & after done that I am getting this error.
I added `.js` & here is my `tsconfig`

```
""target"": ""es5"",
""module"": ""es2020"",
""lib"": [""dom"", ""dom.iterable"", ""esnext""],
""jsx"": ""react-jsx"",
""moduleResolution"": ""node"",
""allowJs"": true,
""checkJs"": true,
""noImplicitAny"": true,
""noImplicitReturns"": true,
""strictNullChecks"": true,
""strictFunctionTypes"": true,
""noUnusedLocals"": true,
""noUnusedParameters"": true,
""removeComments"": true,
""strict"": true,
""noFallthroughCasesInSwitch"": true,
""allowSyntheticDefaultImports"": true,
""esModuleInterop"": true,
""skipLibCheck"": true,
""forceConsistentCasingInFileNames"": true,
""resolveJsonModule"": true,
""isolatedModules"": true,
""importHelpers"": true
```
",Support
https://github.com/facebook/react/issues/23496,23496,Bug: 做技术就做技术，非要出来站队，NMSL,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,12,2022-03-03T09:40:54Z,2022-07-03T17:07:29Z,2022-07-03T17:07:28Z,NONE,not_planned,,"# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！
# 俄罗斯加油！俄罗斯加油！俄罗斯加油！",Other
https://github.com/facebook/react/issues/24039,24039,Props UI is not showing on right panel,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,8,2022-03-08T06:54:37Z,2022-03-11T04:28:35Z,2022-03-11T01:35:53Z,NONE,completed,Shyam268,I see the props UI is helpful to know the change in property on each commit in a **profile** tab. but i don't see the props UI on right panel. i am using react version 17+.is there any reason why this is not shown.?,Support
https://github.com/facebook/react/issues/24063,24063,Bug: Boolean Values is not updating while submitting the form  for the first time,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,7,2022-03-09T15:03:31Z,2022-09-07T10:53:43Z,2022-03-11T16:31:45Z,NONE,completed,,"

React version: 17.0.2
```javascript
import React,{useState} from 'react';
import './App.css';

function App() {
  const [email,setEmail]=useState("""");
  const [password,setPassword]=useState("""");
  const [emailErr,setEmailErr]=useState(false);
  const [passwordErr,setPasswordErr]=useState(false);

  const loginSubmit=(e)=>{
        e.preventDefault();
                if(email.length<5){
                  setEmailErr(true);
                }else{
                  setEmailErr(false);
                }
                console.log('this is email: ' + email);
                console.log('this is emailErr: ' + emailErr);
                if(password.length<5){
                  setPasswordErr(true)
                }else{
                  setPasswordErr(false);
                }
                console.log('this is password: ' + password);
                console.log('this is passwordErr: ' + passwordErr);
  }
  return (
    <div className=""App"">
      <form onSubmit={(e)=>loginSubmit(e)}>
     <div>Email</div>
     <input type='text' value={email} onChange={(event)=>setEmail(event.target.value)} />
     <div>Password</div>
     <input type='text' value={password} onChange={(event)=>setPassword(event.target.value)}/>
     <button type='submit'>Submit</button> 
      </form>
    </div>
  );
}

export default App;

```
## Steps To Reproduce

1.In above code when you  click on submit button for the first time , the emailErr and passwordErr values are not updating even the code is logically correct 

## The current behavior
emailErr and passwordErr values are not updating

## The expected behavior
 emailErr and passwordErr values should be updated  (emailErr and passwordErr should be true)
",Support
https://github.com/facebook/react/issues/24073,24073,Bug: (node:23640) 'onAfterSetupMiddleware' 'onBeforeSetupMiddleware',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-03-11T07:45:17Z,2022-03-12T07:57:21Z,2022-03-12T07:57:17Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
After an update of the package react-scripts from version 3.0.1 to 5.0.0, I receive the next 2 warnings:
(node:23640) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:23640) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.

The previous version of package.json includes the next dependencies:
   ""dependencies"": {
    ""@material-ui/core"": ""^4.9.7"",
    ""@material-ui/icons"": ""^4.9.1"",
    ""@material-ui/lab"": ""^4.0.0-alpha.46"",
    ""@reach/router"": ""^1.3.4"",
    ""amazon-cognito-auth-js"": ""^1.3.3"",
    ""amazon-cognito-identity-js"": ""^5.2.7"",
    ""aws-sdk"": ""^2.1089.0"",
    ""axios"": ""^0.26.1"",
    ""bluebird"": ""^3.7.2"",
    ""bootstrap"": ""^5.1.3"",
    ""connected-react-router"": ""^6.9.2"",
    ""dotenv"": ""^16.0.0"",
    ""es6-promise"": ""^4.2.8"",
    ""express"": ""^4.17.3"",
    ""file-saver"": ""^2.0.5"",
    ""file-system"": ""^2.2.2"",
    ""file-type"": ""^17.1.1"",
    ""fs"": ""0.0.1-security"",
    ""isomorphic-fetch"": ""^3.0.0"",
    ""jszip"": ""^3.7.1"",
    ""jszip-utils"": ""^0.1.0"",
    ""jwt-decode"": ""^3.1.2"",
    ""multiparty"": ""^4.2.3"",
    ""query-string"": ""^7.1.1"",
    ""react"": ""^16.13.1"",
    ""react-bootstrap"": ""^2.2.0"",
    ""react-datepicker"": ""^4.7.0"",
    ""react-dom"": ""^16.13.1"",
    ""react-dropzone"": ""^12.0.4"",
    ""react-idle-timer"": ""^4.6.4"",
    ""react-loading-overlay"": ""^1.0.1"",
    ""react-redux"": ""^7.2.6"",
    ""react-router-dom"": ""^5.1.2"",
    ""react-scripts"": ""3.0.1"",
    ""react-toastify"": ""^8.2.0"",
    ""redux"": ""^4.1.2"",
    ""redux-thunk"": ""^2.4.1"",
    ""secure-ls"": ""^1.2.6"",
    ""universal-cookie"": ""^4.0.4""
  },

and only update the line:  ""react-scripts"": ""3.0.1"", to  ""react-scripts"": ""5.0.0"",

React version:

## Steps To Reproduce

1.  ""react-scripts"": ""3.0.1"",
2.  ""react-scripts"": ""5.0.0"",

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Warnings

## The expected behavior
No Warnings",Other
https://github.com/facebook/react/issues/24076,24076,OnError Fallback in Suspense when fetching  Data,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,1,2022-03-11T18:22:12Z,2022-03-30T02:04:21Z,2022-03-30T02:04:20Z,NONE,completed,,"### Introduction
React 18 introduces the feature Suspense for providing Fallback for any asynchronous job primary Data-fetching to be loosely-coupled and providing it as a JSX. 

### What does a Fallback mean in React 18 ?
Most Commonly, In React 18, Fallback is for showing loading or anything when doing asyc stuff.

**_But, wouldn't be cool if we provide, Error Handling when we are data-fetching integrated in Suspense as well instead of using Error Boundaries._**

We can assume this that Error Boundary will be shown if Component fails to render.

### For Example

Right now, Suspense Works like this

```sh
<Suspense fallback={<Loading />}>   
    <Page />
</Suspense>
```

Above provides Loading Fallback Whenever Page is fetching data, but **_what happens when data-fetching fails ?_** Did I write Error Boundry or handle onError inside the Page Component which will negate the React principles.

### Solution
If we can add something like this, 
```sh
<Suspense fallback={<Loading />} onErrorFallback={<Error />}>   
    <Page />
</Suspense>
```

1- Whenever Page Component is Fetching data, Loading will be shown.
2- If Any Error Occurs during Fetching Data, Error Component will be shown.

Now we have **_de-coupled our onError Logic_** which perfectly aligns with the principles of the react and provide a good readability of the code.

**Moreover, We can easily integrate monitoring Solutions in the Error Component that will message Sentry or something else that An Error Occurred, Log of the Error And Reason as well.**


Let me know of your thoughts.




",Support
https://github.com/facebook/react/issues/24092,24092,上帝的归上帝 凯撒的归凯撒  那凯撒的命归谁 ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-03-14T06:34:32Z,2022-03-14T07:56:59Z,2022-03-14T07:56:59Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/24095,24095,Request for minor release of 17.0.3 to support ESM packages,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,6,2022-03-14T17:55:13Z,2022-04-12T13:51:52Z,2022-04-11T17:35:34Z,NONE,completed,,"This was previously requested: [Request for Package Release](https://github.com/facebook/react/issues/21644)

The `package.json` of `17.0.2` does not specify the `exports` field. If a package is of type `module` and using React it will break when using the automatic JSX runtime, since the import (usually inserted by transpilers like `swc`) will be:

```js
import {jsx as _jsx} from 'react/jsx-runtime';
```

But for ESM modules (when not specified in `exports`) it should be:

```js
import {jsx as _jsx} from 'react/jsx-runtime.js';
```

May I ask if the React team could release a new minor version of `17.0.3` even if it is just an updated `package.json` with no other code changes, since it will contain these exports:

[Original Source](https://github.com/facebook/react/blob/main/packages/react/package.json)
```json
  ""exports"": {
    ""."": {
      ""react-server"": ""./react.shared-subset.js"",
      ""default"": ""./index.js""
    },
    ""./package.json"": ""./package.json"",
    ""./jsx-runtime"": ""./jsx-runtime.js"",
    ""./jsx-dev-runtime"": ""./jsx-dev-runtime.js"",
    ""./src/*"": ""./src/*""
  },
```

I know React 18 is coming (and does have these fields specified), but without an update to React 17, a native ESM package that uses React will either be forced to not use the automatic runtime or only support React 18.

Edit: 
This should also fix [this issue](https://github.com/facebook/react/issues/20235) and [this MUI blocker](https://github.com/mui/material-ui/issues/30671).",Feature
https://github.com/facebook/react/issues/24111,24111,Bug: Americans are waging ten times as many wars as Russia,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,TRUE,,2,2022-03-17T11:32:56Z,2022-03-17T16:55:51Z,2022-03-17T15:56:06Z,NONE,completed,,"## what were you doing when the americans invaded iraq

## What were you doing when the Americans bombed the Chinese embassy in Yugoslavia

",Other
https://github.com/facebook/react/issues/24134,24134,[DevTools Bug]: Error occurs when installing react-devtools in yarn berry project,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2022-03-20T08:18:43Z,2022-03-20T08:23:59Z,2022-03-20T08:23:59Z,NONE,completed,,"### Website or app

https://github.com/facebook/react

### Repro steps

I tried to install react-devtools with yarn berry, so i encountered this error log.

 yarn add react-devtools -D
➤ YN0000: ┌ Resolution step
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pd70ba), requested by @react-aria/overlays
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pa0a11), requested by @react-aria/live-announcer
➤ YN0002: │ @react-native-aria/combobox@npm:0.2.4-alpha.1 [d995e] doesn't provide react-dom (pd5c9c), requested by @react-aria/combobox
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (pff6e6), requested by @babel/plugin-proposal-decorators
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (p4f633), requested by @babel/plugin-transform-react-jsx
➤ YN0002: │ babel-preset-expo@npm:9.0.2 doesn't provide @babel/core (pa1fad), requested by @babel/preset-env
➤ YN0002: │ devfeed@workspace:. doesn't provide @types/react (p5404d), requested by native-base
➤ YN0002: │ devfeed@workspace:. doesn't provide react-dom (pf66e9), requested by native-base
➤ YN0002: │ devfeed@workspace:. doesn't provide react-dom (pfc556), requested by react-use
➤ YN0060: │ devfeed@workspace:. provides react-native-safe-area-context (p3bb21) with version 4.2.1, which doesn't satisfy what native-base requests
➤ YN0060: │ devfeed@workspace:. provides react-native-svg (pc0baf) with version 12.3.0, which doesn't satisfy what native-base requests
➤ YN0002: │ react-native-codegen@npm:0.0.8 doesn't provide @babel/preset-env (p1529d), requested by jscodeshift
➤ YN0000: │ Some peer dependencies are incorrectly met; run yarn explain peer-requirements <hash> for details, where <hash> is the six-letter p-prefixed code
➤ YN0000: └ Completed
➤ YN0000: ┌ Fetch step
➤ YN0000: └ Completed in 0s 393ms
➤ YN0000: ┌ Link step
➤ YN0001: │ Error: While cloning /Users/jihoon.lim/dev/devfeed/node_modules/string_decoder/node_modules/safe-buffer -> /Users/jihoon.lim/dev/devfeed/node_modules/registry-auth-token/node_modules/safe-buffer ENOENT: no such file or directory, scandir '/Users/jihoon.lim/dev/devfeed/node_modules/string_decoder/node_modules/safe-buffer'
➤ YN0000: └ Completed in 3s 361ms
➤ YN0000: Failed with errors in 3s 927ms

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/24142,24142,"[DevTools Bug] Unsupported Bridge operation ""0""","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,13,2022-03-22T06:19:18Z,2022-03-24T13:07:47Z,2022-03-23T21:05:20Z,NONE,completed,bvaughn,"### Website or app

React Native Init App

### Repro steps

Just run the React-DevTools and then forward to port 8087 to debug in real device


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-core

### DevTools version (automated)

4.24.1-ac574d688

### Error message (automated)

Unsupported Bridge operation ""0""

### Error call stack (automated)

```text
at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:335334
    at f.emit (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:278775)
    at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:280316
    at /Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:664831
    at Array.forEach (<anonymous>)
    at A.Zh.e.onmessage (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:48:664815)
    at A.t (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:39:2836)
    at A.emit (events.js:315:20)
    at e.exports.L (/Users/tb921t/.npm-global/lib/node_modules/react-devtools/node_modules/react-devtools-core/dist/standalone.js:3:58322)
    at e.exports.emit (events.js:315:20)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Unsupported Bridge operation  in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Bug
https://github.com/facebook/react/issues/24155,24155,React 18 - infinite loop and function as child issue with transition and suspense with useMemo,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,9,2022-03-24T15:33:16Z,2022-03-24T20:45:21Z,2022-03-24T20:07:26Z,NONE,completed,,"I've turned off strict mode, and tried to create a simple example that breaks in v18 rc3.

 I'm trying to use `useMemo` to detect when some state changes and create a new memoized promise. Another `useMemo` call detects when the promise changes and wraps it in a ""resource"" object. I am passing the resource down to a child. There are multiple suspense boundaries between where I am creating the ""resource"" and where I'm calling `.read()`. I expect this to load once with no errors, and when I click the button I expect a single transition. Instead, although the app loads I get this error `react-dom.development.js:86 Warning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function`. When I click the button, it then goes into an infinite loop. This is unexpected because `<App>` should not be suspending, only `<Child>`. I'm also not returning any components without calling them from what I can tell.

If I set the ""resource"" into state it works fine. This only seems to happen if I try to create the ""resource"" with `useMemo`.


Minimal reproduction case
```js
import {
  startTransition,
  Suspense,
  useRef,
  useEffect,
  useState,
  useMemo,
} from ""react"";
import logo from ""./logo.svg"";
import ""./App.css"";

function App() {
  const ref = useRef(0);
  const [validQueryParams, setValidQueryParams] = useState();

  const promise = useMemo(() => {
    console.log(""making promise that resolves in 3s"", ref.current);
    ref.current++;
    return new Promise((res) => {
      setTimeout(() => {
        console.log(validQueryParams);
        return res();
      }, 3000);
    });
  }, [validQueryParams]);

  const query = useMemo(() => {
    console.log(""wrapping promise in resource object"");
    return wrapPromise(promise);
  }, [promise]);

  useEffect(() => {
    console.log(""mount"");
    return () => console.log(""unmount"");
  }, []);

  console.log({ query });
  return (
    <>
      <Suspense fallback={() => <div>fallback</div>}>
        <Child query={query} />
        <button
          onClick={() => {
            startTransition(() => {
              setValidQueryParams(Math.random());
            });
          }}
        >
          Start transition
        </button>
      </Suspense>
    </>
  );
}

function Child({ query }) {
  if (!query) return null;
  return (
    <Suspense fallback={() => <div>fallback</div>}>
      <div>{JSON.stringify(query.read())}</div>
    </Suspense>
  );
}

export default App;

export function wrapPromise(promise) {
  let status = ""pending"";
  let result;
  const suspender = promise.then(
    (r) => {
      status = ""success"";
      result = r;
    },
    (e) => {
      status = ""error"";
      result = e;
    }
  );
  return {
    read() {
      if (status === ""pending"") {
        throw suspender;
      } else if (status === ""error"") {
        throw result;
      } else if (status === ""success"") {
        return result;
      }
    },
  };
}

```",Support
https://github.com/facebook/react/issues/24160,24160,React 18: Updates scheduled from useInsertionEffect,"[{""id"":710375792,""node_id"":""MDU6TGFiZWw3MTAzNzU3OTI="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Discussion"",""name"":""Type: Discussion"",""color"":""fef2c0"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,FALSE,,0,2022-03-25T10:03:02Z,2022-04-07T19:12:49Z,2022-04-07T19:12:49Z,COLLABORATOR,completed,,"Following up on https://github.com/reactjs/reactjs.org/pull/4486#discussion_r834319756 (/cc @acdlite )

React version: 18.0.0-rc.3-next-1159ff619-20220324

## Steps To Reproduce

1. schedule an update (e.g. `setState`) from within `useInsertionEffect` 


Link to code example: https://codesandbox.io/s/naughty-bogdan-boghf6?file=/src/index.js


## The current behavior

Update is applied and no warning is issued.

## The expected behavior

According to https://github.com/reactjs/reactjs.org/pull/4486/files#diff-a1c8ec10dc40c86b4bbd55ad3f0126835bd45e9aa9e56c846a2e28ad6dd6acffR602 `useInsertionEffect` cannot schedule updates. But `setState` seems to ""work"". Maybe this is just incidental because it's the first render?

I got the impression that this should definitely cause a warning (not implemented) but I wonder if we also should consistently drop updates from `useInsertionEffect`?",Bug
https://github.com/facebook/react/issues/24170,24170,[React DevTools] Component Stacks for Timeline Profiler,"[{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2022-03-25T22:21:08Z,2022-06-28T21:15:24Z,2022-06-28T21:15:24Z,CONTRIBUTOR,completed,blakef,"In the Timeline Profiler, we currently denote each state update with a dot. If you hover on the state update, you get some information about it, such as which component caused the update, the lane the update was rendered at, and the time that the update happened. This is useful for unique components. However, for components (ex. library components) that are used in multiple places, just having the component name is less helpful. 

It would be most useful to get a stack of component owners (like in the rendered by section in the Components tab). However, we only have owner metadata in DEV mode, and it usually only makes sense to profile in production. The next best thing we can do, then, is to get all the parent components and create a stack out of that (ie the return path of the fiber rather than the owner path). 

<img width=""1209"" alt=""image"" src=""https://user-images.githubusercontent.com/2735514/160208568-771861d3-59a3-4a82-9719-c8f5663ee574.png"">

We want to add component stacks so that we also know which parent(s) caused the update. For this task, a potential solution is:
* [ ] When a state update happens, walk the fiber's return path and save all the component names and their source. (See `markStateUpdateScheduled` for code pointers on where to put this)
* [ ] After we're done profiling, process the stack so that we create a stack of return fibers
* [ ] Pass the stack to the DevTools front end and add the component stacks to the UI when a user hovers over a state update",Feature
https://github.com/facebook/react/issues/24208,24208,React 18 - typescript gives an error when reproducing official Upgrade Guide,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,3,2022-03-30T06:30:40Z,2022-04-05T09:43:14Z,2022-03-30T07:08:29Z,NONE,completed,,"<img width=""1224"" alt=""image"" src=""https://user-images.githubusercontent.com/6984143/160765911-c2c7704c-c4d6-4f2b-a6a8-6f36ef0bbfac.png"">

Looks like a type mismatch when recreating switch from `render` to `createRoot` way with typescript code base",Support
https://github.com/facebook/react/issues/24239,24239,Bug: App is unresponsive with React 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,37,2022-04-01T03:48:35Z,2022-04-03T17:19:56Z,2022-04-03T17:01:23Z,NONE,completed,,"Before upgrading to react 18 app was working well but after upgrading this is not responding well

React version:18

## Steps To Reproduce

1. Open the application and wait for 2 sec. then see buttons are not clickable
2. After sometime we will see page unresponsive

Link to code example:

Deployed URL : https://app-jitera.netlify.app/



## The current behavior
 As you can see in the screenshot.

## The expected behavior
It should run without lag.

",Support
https://github.com/facebook/react/issues/24243,24243,Bug: After upgrade to React 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null}]",closed,FALSE,,1,2022-04-01T12:51:43Z,2022-04-05T02:19:08Z,2022-04-05T02:19:08Z,NONE,completed,ctsvenkat,"Hi 

I upgraded React from 17.2.0 to React 18 Rc0 vserion after that I am betting below error, I could not understand why this happening and I am new react as well.


Error is: export 'jsxDEV' (imported as '_jsxDEV') was not found in 'react/jsx-dev-runtime' (module has no exports)
Thanks in Advance.

",Other
https://github.com/facebook/react/issues/24280,24280,Bug: componentWillUnmount is called twice,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":3079053919,""node_id"":""MDU6TGFiZWwzMDc5MDUzOTE5"",""url"":""https://api.github.com/repos/facebook/react/labels/React%2018"",""name"":""React 18"",""color"":""26B0E4"",""default"":false,""description"":""Bug reports, questions, and general feedback about React 18""}]",closed,TRUE,,12,2022-04-05T14:21:22Z,2022-04-28T13:36:04Z,2022-04-11T22:47:46Z,NONE,completed,,"React version: 18.0.0

## Steps To Reproduce

`componentWillUnmount` is called twice upon toggling the rendered component. Even when **StrictMode** is disabled

Link to code example: https://codesandbox.io/s/componentwillunmount-called-twice-hrpzy5?file=/src/App.js

## The current behavior

After upgrading to react 18 we've seen some different behavior in a conditionally rendered, lazy class component. 

In the provided code example the class component is rendered first. After the first toggle, the class component's componentWillUnmount is called twice. 

Subsequent toggle calls correctly lead to a single componentWillUnmount invocation.

This does only seem to affect the class component when its rendered first. If the condition is changed to initially show the other function component the class component unmounts just fine

## The expected behavior

The class component's componentWillUnmount is only called once",Bug
https://github.com/facebook/react/issues/24330,24330,Bug: tsconfig file keep being reset while excuting running start,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-04-10T04:32:43Z,2022-04-10T04:33:41Z,2022-04-10T04:33:28Z,NONE,completed,,"I am using typescript in one of my existed react project. I installed necessary deps as what official site says , including typescript@4.6.3, @types/node@17.0.23 and so on. Of course, I also use craco to rewrite cra's default configurations. I was told to run tsc --init to generate a tsconfig file, it was fine, everything ok, but when i tried to add some custom configurations in it,  the whole file would be reset evertime when i run npm run start. is it the problem from craco? my package.json file is as below:


{
  ""name"": ""front_end_tool"",
  ""version"": ""4.0.1"",
  ""homepage"": ""./"",
  ""private"": true,
  ""dependencies"": {
    ""@ant-design/icons"": ""^4.7.0"",
    ""@craco/craco"": ""^6.3.0"",
    ""@testing-library/jest-dom"": ""^5.14.1"",
    ""@testing-library/react"": ""^11.2.7"",
    ""@testing-library/user-event"": ""^12.8.3"",
    ""@types/jest"": ""^27.4.1"",
    ""@types/node"": ""^17.0.23"",
    ""@types/react"": ""^17.0.43"",
    ""@types/react-dom"": ""^17.0.14"",
    ""@types/react-router-dom"": ""^5.3.3"",
    ""antd"": ""^4.19.3"",
    ""axios"": ""^0.21.4"",
    ""classnames"": ""^2.3.1"",
    ""craco-less"": ""^1.20.0"",
    ""echarts"": ""^5.2.1"",
    ""echarts-for-react"": ""^3.0.1"",
    ""file-saver"": ""^2.0.5"",
    ""js-cookie"": ""^3.0.1"",
    ""lodash"": ""^4.17.21"",
    ""mockjs"": ""^1.1.0"",
    ""react"": ""^17.0.2"",
    ""react-app-polyfill"": ""^3.0.0"",
    ""react-color"": ""^2.19.3"",
    ""react-copy-to-clipboard"": ""^5.0.4"",
    ""react-custom-scrollbars"": ""^4.2.1"",
    ""react-dom"": ""^17.0.2"",
    ""react-json-view"": ""^1.21.3"",
    ""react-markdown"": ""^7.1.1"",
    ""react-redux"": ""^7.2.6"",
    ""react-router-config"": ""^5.1.1"",
    ""react-router-dom"": ""^5.3.0"",
    ""react-scripts"": ""4.0.3"",
    ""react-syntax-highlighter"": ""^15.5.0"",
    ""rehype-raw"": ""^6.1.0"",
    ""remark-gemoji"": ""^7.0.1"",
    ""remark-gfm"": ""^3.0.1"",
    ""remark-parse"": ""^10.0.1"",
    ""remark-stringify"": ""^10.0.2"",
    ""styled-components"": ""^5.3.1"",
    ""to-vfile"": ""^7.2.3"",
    ""unified"": ""^10.1.2"",
    ""uuid"": ""^8.3.2"",
    ""web-vitals"": ""^1.1.2""
  },
  ""scripts"": {
    ""start"": ""craco start"",
    ""build"": ""craco build""
  },
  ""eslintConfig"": {
    ""extends"": [
      ""react-app"",
      ""react-app/jest""
    ]
  },
  ""browserslist"": {
    ""production"": [
      "">0.2%"",
      ""not dead"",
      ""not op_mini all"",
      ""ie 11""
    ],
    ""development"": [
      ""last 1 chrome version"",
      ""last 1 firefox version"",
      ""last 1 safari version"",
      ""ie 11""
    ]
  },
  ""devDependencies"": {
    ""@fec/remark-a11y-emoji"": ""^3.1.0"",
    ""@types/lodash"": ""^4.14.181"",
    ""@types/mockjs"": ""^1.0.6"",
    ""@types/react-copy-to-clipboard"": ""^5.0.2"",
    ""@types/react-custom-scrollbars"": ""^4.0.10"",
    ""@types/react-router-config"": ""^5.0.6"",
    ""@types/react-syntax-highlighter"": ""^13.5.2"",
    ""@types/uuid"": ""^8.3.4"",
    ""craco-antd"": ""^1.19.0"",
    ""raw-loader"": ""^4.0.2"",
    ""rehype-accessible-emojis"": ""^0.3.2"",
    ""ts-node"": ""^10.7.0"",
    ""typescript"": ""^4.6.3"",
    ""webpack-bundle-analyzer"": ""^4.4.2"",
    ""webpackbar"": ""^5.0.0-3""
  }
}

",Other
https://github.com/facebook/react/issues/24347,24347,Compatible issue about createRoot between 17 & 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,6,2022-04-12T07:49:32Z,2022-04-14T15:27:46Z,2022-04-14T15:27:46Z,CONTRIBUTOR,completed,,"Hi,
Our component lib [Ant Design](https://ant.design/components/modal/#components-modal-demo-confirm) modal component provides static function to simplify developer code logic. It use `ReactDOM.render` for tmp content render and destroy when modal closed.

For React 18, we want to use `createRoot` to avoid render warning:

> Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot

But `createRoot` comes from `react-dom/client` module which not exist in prev version which will throw warning by webpack.

And use `createRoot` from `react-dom` will also throw warning to tell to import from `react-dom/client`.

Seems no way to hide the realize detail to the upper user.",Support
https://github.com/facebook/react/issues/24370,24370,"[DevTools Bug] Cannot add child ""foo"" to parent ""bar"" because parent node was not found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2022-04-13T19:42:01Z,2022-04-14T17:32:23Z,2022-04-14T17:32:22Z,NONE,completed,,"### Website or app

https://github.com/abybaddi009/react-bug-report

### Repro steps

Steps to reproduce:

1. Install all dependencies
2. Run the project with `npm start`
3. Navigate to http://localhost:3000/login
4. Enter any number into _phone number_ and click on **GET OTP**.
5. Enter any number into the text boxes and click on **SIGN IN**.
6. Allow access to location.
7. Check the Dev Tools for the error


### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.3-46a98cff2

### Error message (automated)

Cannot add child ""986"" to parent ""985"" because parent node was not found in the Store.

### Error call stack (automated)

```text
emit@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24430:22
bridge_Bridge/this._wallUnlisten<@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:24599:14
listener@moz-extension://33a37ecb-24c1-4ab5-9400-2d8a276f2472/build/main.js:54423:41
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot add child  to parent  because parent node was not found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/24374,24374,[Bug] Possible solution to: unstable_flushDiscreteUpdates,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-04-14T01:53:44Z,2022-05-19T00:37:21Z,2022-04-14T15:22:52Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
This is the exact message: 
_Warning: unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering._

Being relatively new to ReactJS I've encountered this warning when I was using **focus** events, people say there is no problem on _production_ to. This comment offers a possible solution https://github.com/Availity/react-block-ui/issues/40#issuecomment-595438654 and so I reproduced his solution.

React version: 17.0.2

## Steps To Reproduce
Here I did the replicate of the bug on codesandbox
1. Click on the page, press F and watch the console.
2.Uncomment the useEffect on content.jsx, and repeat step 1.
![image](https://user-images.githubusercontent.com/65568682/163298830-4a69a9b8-743a-4445-b03f-700c556c0e40.png)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/react-bug-unstable-flushdiscreteupdates-3bvmhl?file=/src/content.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## My opinion
Please, feel free to correct any of my comments from here.

I think this issue is happening because you are trying directly manipulate a component by external means[1], meanwhile that **Component** is unchanged during it's current life cycle since it was mounted.

[1] I initialized a function(event listener) outside the component i'm directly manipulating, in **App.js**, _useKeyboard()_

## My solution
For my case, I wrapped the specific function causing this issue with an **useEffect**, so that _.focus()_ is applied when the component is finally mounted.

",Other
https://github.com/facebook/react/issues/24379,24379,Facebook,[],closed,FALSE,,0,2022-04-14T16:55:28Z,2022-04-14T16:58:35Z,2022-04-14T16:58:35Z,NONE,completed,,"https://www.facebook.com/profile.php?id=100016695042794

_Originally posted by @MrAugMyo in https://github.com/facebook/facebook-android-sdk/issues/1061#issuecomment-1099403015_",Other
https://github.com/facebook/react/issues/24392,24392,Bug: time slice not work in react 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710722093,""node_id"":""MDU6TGFiZWw3MTA3MjIwOTM="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation"",""name"":""Type: Needs Investigation"",""color"":""65AA9C"",""default"":false,""description"":""""}]",closed,FALSE,,8,2022-04-18T02:32:27Z,2022-09-06T03:51:07Z,2022-09-06T02:58:51Z,NONE,completed,,"in react@16.8.0, a long task will be sliced multi short task, demo: https://stackblitz.com/edit/react-ts-aqwejz
![image](https://user-images.githubusercontent.com/18443683/163744795-3abfb632-961f-4ea7-a669-f37e65d59f4c.png)

but in react@18.0.0, it will be only a long task, demo: https://stackblitz.com/edit/react-ts-ezgtzn
![image](https://user-images.githubusercontent.com/18443683/163745038-dbf8ba83-8988-453b-b7cb-a217abe29db1.png)

Is it a react18 time slice bug or feature? 

React version: 16.8.0 & 18.0.0

## Steps To Reproduce

1. run a example app like below
2. open inspector -> performance, then record and analyze

Link to code example: 
16.8.0: https://stackblitz.com/edit/react-ts-aqwejz
18.0.0: https://stackblitz.com/edit/react-ts-ezgtzn


## The current behavior
in react@18.0.0, long task not be sliced

## The expected behavior
in react@18.0.0, long task will be sliced",Support
https://github.com/facebook/react/issues/24397,24397,when to use useCallback and useMemo,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-04-19T11:42:41Z,2022-04-24T11:25:13Z,2022-04-24T11:25:13Z,NONE,completed,,"I am a fan of React/hooks. As the usage scenarios in business projects gradually increase, I find the useCallback/useMemo hooks are a bit annoying. Whenever I use components developed by others, when I need to pass function props, I will wrap it with useCallback first. But it might work fine without the wrapping.

This can be divided into two cases, one is to avoid unnecessary re-render, and the other is to ensure the correctness of the logic. For example, useEffect depends on the incoming function props. Using too many useCallback/useMemo will make the code look bloated, and if you don't use it, you may be worried about bugs.

I learned what some developers in the community think:

> MOST OF THE TIME YOU SHOULD NOT BOTHER OPTIMIZING UNNECESSARY RERENDERS. React is VERY fast and there are so many things I can think of for you to do with your time that would be better than optimizing things like this. from kent C. Dodds.

I would like to ask the community if there are any suggestions for using useCallback/useMemo. It can reduce the mental burden when writing code. For example, is it possible to agree that useCallback/useMemo is usually not needed in the code? If it needs to be used, the component should be clearly stated, such as adding comments to props and so on.",Support
https://github.com/facebook/react/issues/24408,24408,Bug: checkboxes with check all checkbox,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-04-20T06:55:31Z,2022-04-23T03:11:44Z,2022-04-20T19:23:13Z,NONE,completed,,"Checkall/uncheckall checkbox works but upon clicking the individual checkboxes the behavior isn't as expected

**Code:**

**Grid.cs**

```
Import React,{useContext, useEffect, useState} from ‘react’
Import {row,Col,Button} from ‘react-bootstrap’
Import BootstrapTable from ‘react-bootstrap-tab;e-overlay’


const GridView =({
Data,
openCheckAllModal
})
const[modifiedData, setModifiedData] = useState([])
const[checkAll,setCheckAll] = useState(false)
const isMounted = useIsMounted()

useEffect(() => {
if(isMounted){
data.forEach(async(s) =>{
s.isSelected = false
})
setModifiedData(data)
}
})


const selectColumn =(cell, row) => {
Return(
<>
{updatedData.filter(e=> e.id == row.id)[0] &&  <input type = “checkbox”
Id = {“chkbx”+row.id}
checked ={modifiedData.filter(e => e.id == row.id)[0].isSelected}
onChange = {€ => handleSelectChange(e,row)}

/>
</>
)
}


const handleSelectChange =(e,row) =>{
var updatedModifiedData = modifiedData
updatedModifiedData.forEach((s) => {if(s.id == row.id){
s.isSelected = e.target.checked
)
})
setModifiedData(updatedModifiedData)

var checkAllVal = modifiedData.filter(s=> s.isSelected == false).length == 0?true:false
setCheckAll(checkAllVal)
}


const handleCheckAllChange = (e) =>{
var updatedValue = modifiedData
updatedValue.forEach((s) => {
s.isSelected = e.target.checked
})
setModifiedData(updatedValue)
setCheckAll(e.target.checked)

}

const columns = [
{	
	columns.push({
		dataField: ‘isSelected’,
text: ‘Select’,
sort: false,
headerformatter: headerFormat,
formatter: selectColumn,
headerStyle: {textAlign: ‘center’},
style: {textAlign: ‘center’, verticalAlign:’middle’},
})
]

Return(
<>
<Row className=’align-self-center SectionHeader’>
<Col className=’mx-2’ type= “checkbox”
Id=’checkAll_Chkbox1’
checked={checkAll}
onChange={ handleCheckAllChange }
/>Check All	
</Col>
</Row>


<BootstrapTable
Bootstrap4
keyField=’id’
data={modifiedData}
columns={columns}
/>
</>
)
```
## The current behavior

Checkall/uncheckall checkbox works but upon clicking the individual checkboxes the behavior isn't as expected

## The expected behavior

Individual checkboxes should be checked upon clicking it ",Support
https://github.com/facebook/react/issues/24428,24428,"[DevTools Bug]: forwardRef components not marked as ""rendered"" if context changed","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,3,2022-04-23T16:38:15Z,2022-05-04T20:25:28Z,2022-05-04T20:25:28Z,COLLABORATOR,completed,lunaruan,"### Website or app

https://codesandbox.io/s/forwardref-context-change-did-not-render-lpdk4t?file=/src/index.js

### Repro steps

1. Goto https://lpdk4t.csb.app/
1. Start profiling
3. Enter ""a"" into the input
4. Stop profiling
![forwardRef-did-not-render](https://user-images.githubusercontent.com/12292047/164915101-f28f305a-2c51-4b89-8515-da073e5551c9.png)



### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

4.24.3-46a98cff2

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Bug
https://github.com/facebook/react/issues/24432,24432,[DevTools Bug]: Type '{}' is not assignable to type 'ReactNode',"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-04-24T23:07:53Z,2022-04-25T05:47:44Z,2022-04-25T05:47:35Z,NONE,completed,,"### Website or app

https://github.com/devnautas/happy-app

### Repro steps

Creating a custom component with styled-components

![image](https://user-images.githubusercontent.com/71651661/165000428-8eded19a-8a61-4078-8ec7-da6c98f54b75.png)


### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

dwdw

### Error message (automated)

Type '{}' is not assignable to type 'ReactNode'.

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Support
https://github.com/facebook/react/issues/24450,24450,Bug: Reconsider of #24439 with checked attribute update,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-04-27T07:59:17Z,2022-04-27T09:20:07Z,2022-04-27T09:20:07Z,CONTRIBUTOR,completed,,"As #24439
Since `enzyme` not support React 18 and we use `testing lib` instead. The `jest` `toMatchSnapshot` on `testing lib` only possible to compare html instead of node props compare. Which means when replace `enzyme` with `testing lib`, the snapshot will always be wrong on re-render.
`toMatchSnapshot` will not preset current state is hard to figure out only when developer find it not work as expect.",Support
https://github.com/facebook/react/issues/24451,24451,Bug: Using Strict mode outside Router breaks my app,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-04-27T14:08:00Z,2022-04-28T19:50:00Z,2022-04-28T19:49:59Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:
```
    ""react"": ""^18.0.0"",
    ""react-dom"": ""^18.0.0"",
    ""react-router-dom"": ""^5.2.0"",
```

## Steps To Reproduce

I am trying to add the StrictMode on my code to avoid issues, but when I put it outside the <Router history={history}> tag the routes changes as expected but the component does not render. When I moved the StrictMode tag inside the Router tag, the application works as expected. 

## Code example:

If I put the `StrictMode` outside the Router, the components does not render:

```
return (
    <StrictMode>
      <Router history={history}>
        <Route exact path=""/"">
                ....
      </Router>
    </StrictMode>
  );
};

```
If I put it inside the Router, the components renders as expected:

```
return (
   <Router history={history}>
     <StrictMode>
        <Route exact path=""/"">
                ....
     </StrictMode>
   </Router>
  );
};
```

## The current behavior
When the URL changes, the expected component is not being rendered on the UI.

![ezgif com-gif-maker](https://user-images.githubusercontent.com/21174759/165537591-e882e4b2-fa3e-41e7-a043-39276eff46ab.gif)

## The expected behavior
When the URL changes, the expected component should be rendered on the UI.

Any idea of why this problem can be happening? Any ideas on how to fix this? ",Support
https://github.com/facebook/react/issues/24467,24467,"Bug: Page renders twice when use ""ReactDOM.createRoot"" in the index.tsx in React 18","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,4,2022-04-29T12:36:52Z,2022-05-01T10:00:46Z,2022-04-29T13:39:21Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:18.1.0

## Steps To Reproduce

1. create-react-app test-render --template typescript
2. go to  src/App.tsx write useEffect( ) in the function before return, such as ""console.log('app') "" in the callback
3. npm run start
4. checkout the console, you will find this function runs two times
5. if I use the React 17 ,there will be only once print

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://github.com/voiceu-zuixin/react18-test-render

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

![image](https://user-images.githubusercontent.com/77840482/165945523-d206aa39-9a09-4a75-8827-c399892ea0e4.png)


## The expected behavior
![image](https://user-images.githubusercontent.com/77840482/165945482-4c956b6f-7f88-4fae-8188-5836d7cee08a.png)
",Support
https://github.com/facebook/react/issues/24502,24502,"Bug: useEffect runs twice on component mount (StrictMode, NODE_ENV=development)","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,TRUE,,41,2022-05-05T15:38:46Z,2022-06-23T03:42:45Z,2022-05-05T16:11:45Z,NONE,completed,,"React version: 18.0.x, 18.1.x, 18.2.x

## Steps To Reproduce

1. Visit provided sandbox
2. Open console and observe logs displayed twice.
3. Click the button and observe the rendering log happens twice, the effect log happens once.

Link to code example: https://codesandbox.io/s/react-18-use-effect-bug-iqn1fx

## The current behavior

The useEffect callback runs twice for initial render, probably because the component renders twice. After state change the component renders twice but the effect runs once.

## The expected behavior

I should not see different number of renders in dev and prod modes.

## Extras

The code to reproduce:

```jsx
import { useEffect, useReducer } from ""react"";
import ""./styles.css"";

export default function App() {
  const [enabled, toggle] = useReducer((x) => !x, false);

  useEffect(() => {
    console.log(
      ""You will see this log twice for dev mode, once after state change - double effect call""
    );
  }, [enabled]);

  console.log(""You will see this log twice for dev mode - double rendering"");

  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      <button onClick={() => toggle()}>
        Toggle me: {enabled ? ""on"" : ""off""}
      </button>
    </div>
  );
}

```
",Support
https://github.com/facebook/react/issues/24520,24520,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2022-05-09T10:35:16Z,2022-05-09T17:19:38Z,2022-05-09T17:19:38Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior
",Other
https://github.com/facebook/react/issues/24522,24522,[DevTools] Manifest version 2 is deprecated,"[{""id"":121709921,""node_id"":""MDU6TGFiZWwxMjE3MDk5MjE="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request"",""name"":""Type: Feature Request"",""color"":""c7def8"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,51,2022-05-09T12:37:52Z,2022-11-03T15:20:29Z,2022-10-22T02:52:19Z,NONE,completed,mondaychen,"### Website or app

https://developer.chrome.com/blog/mv2-transition/

### Repro steps

Use latest React DevTools with Electron (Chromium) (18.2.0 / Chromium 100)

```
  (node:80082) ExtensionLoadWarning: Warnings loading extension at ./node_modules/electron-devtools-vendor/extensions/react-developer-tools:
    Manifest version 2 is deprecated, and support will be removed in 2023. See https://developer.chrome.com/blog/mv2-transition/ for more details.
```

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Feature
https://github.com/facebook/react/issues/24528,24528,How to make a shareable widget with react 18 (plugin name should be static or shareable in some way)?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2022-05-10T11:20:52Z,2022-05-10T13:18:55Z,2022-05-10T12:05:15Z,NONE,completed,,"I am developing a shareable widget with client as react 18 which can be called by using following approach:

OS : windows 10 64 bit
Node: 14.15.3
NPM: 6.14.9

When I try to run the npm run build command then I can see the following index.html page in build directory and there are some js, css plugins and images in the build directory.
```

<!doctype html><html lang=""en"">
    <head><meta charset=""utf-8""/>
    <link rel=""icon"" href=""/favicon.ico""/>
    <meta name=""viewport"" content=""width=device-width,initial-scale=1""/>
    <meta name=""theme-color"" content=""#000000""/>
    <meta name=""description"" content=""Web site created using create-react-app""/>
    <link rel=""apple-touch-icon"" href=""/logo192.png""/>
    <link rel=""manifest"" href=""/manifest.json""/>
    <title>React App</title>
    <script defer=""defer"" src=""/static/js/main.6134db66.js""></script>
    <link href=""/static/css/main.073c9b0a.css"" rel=""stylesheet"">
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id=""root"">        
    </div>
</body>
</html>
```
Now my main focus is on calling js, css and image resources if I develop the widget. My widget can be accessed through a js and css plugin including a div element.

Now see following URLs will be dynamically generated each time.

```
src=""/static/js/main.6134db66.js""
href=""/static/css/main.073c9b0a.css""
```
How would I give it to my customers/clients if name 'll be changed after each npm run build.

You can see my client application source below which is calling my widget.

 ```
<!DOCTYPE html>
    <html lang=""en"">
        <head>
            <meta charset=""UTF-8"" />
            <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
            <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
            <title>Document</title>
            <link href=""http://localhost:3000/static/css/main.073c9b0a.css"" rel=""stylesheet""></head>
            <script defer=""defer"" src=""http://localhost:3000/static/js/main.6134db66.js""></script>
        </head>
        <body>
            <div id=""root""></div>
        </body>
    </html>
```
I can place it on one of my server domain but how to keep the plug name same ? I am also curios about my widget images. Will my widget image work correctly or 'll I have do something more for it ?

Any help will be appreciated.

See my package.json

```
{
    ""name"": ""widget"",
    ""version"": ""0.1.0"",
    ""private"": true,   
    ""dependencies"": {
        ""@testing-library/jest-dom"": ""^5.16.3"",
        ""@testing-library/react"": ""^12.1.4"",
        ""@testing-library/user-event"": ""^13.5.0"",
        ""react"": ""^18.0.0"",
        ""react-dom"": ""^18.0.0"",
        ""react-scripts"": ""5.0.0"",
        ""web-vitals"": ""^2.1.4""
    },
    ""scripts"": {
        ""start"": ""react-scripts start"",
        ""build"": ""react-scripts build"",
        ""test"": ""react-scripts test"",
        ""eject"": ""react-scripts eject""
    },
    ""eslintConfig"": {
        ""extends"": [
            ""react-app"",
            ""react-app/jest""
        ]
    },
    ""browserslist"": {
        ""production"": [
            "">0.2%"",
            ""not dead"",
            ""not op_mini all""
        ],
        ""development"": [
            ""last 1 chrome version"",
            ""last 1 firefox version"",
            ""last 1 safari version""
        ]
    }
}

``````

As I am using react-18 so I can use multiple modes if there is some preferable approach

```
ReactDOMClient.createRoot(/*...*/);

ReactDOMClient.hydrateRoot(/*...*/);

or 
ReactDOMServer
```

I can't use IFrame so please refer/suggest something except it. I need to use a Div.",Support
https://github.com/facebook/react/issues/24534,24534,Bug: Creating a lazy component in a hook causes infinite loop,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-05-10T21:26:51Z,2022-05-11T13:54:27Z,2022-05-11T13:54:26Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.1.0 to 18.2.0.next (latest available on code sandbox)

## Steps To Reproduce

1. Have a component create a lazy component in a hook (useState/useMemo), 
2. Render the lazy component
3. Infinite loop

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
[code sandbox](https://codesandbox.io/s/ecstatic-brook-gndvji?file=/src/App.jsx)


this works
```jsx
const _lc = lazy(() => import(""./SomeComp""))

export default function App() {
  const [LazyComp] = useState(_lc);
  return <LazyComp />;
}
```
this will infinite loop
```jsx
export default function App() {
  const [LazyComp] = useState(lazy(() => import(""./SomeComp"")));
  return <LazyComp />;
}
```
and so will this (this is the actual use case I'm dealing with)
```jsx
export default function App() {
  const LazyComp = useMemo(() => lazy(() => import(""./SomeComp"")), []);
  return <LazyComp />;
}
```
It seems rendering a lazy component resets the hook somehow.

",Support
https://github.com/facebook/react/issues/24596,24596,Bug: useReducer and same state in React 18,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2022-05-23T02:37:04Z,2022-05-30T01:18:51Z,2022-05-30T01:18:51Z,NONE,completed,,"```javascript
import React, { useReducer } from 'react';

const initialState = 0;
const reducer = (state, action) => {
  switch (action) {
    case 'increment':
      return state;
    case 'decrement':
      return state;
    case 'reset':
      return initialState;
    default:
      return state;
  }
};

export const UseReducer = () => {
  const [count, dispatch] = useReducer(reducer, initialState);

  console.log('UseReducer Render');
  return (
    <div>
      <div>Count = {count}</div>
      <button onClick={() => dispatch('increment')}>Increment</button>
      <button onClick={() => dispatch('decrement')}>Decrement</button>
      <button onClick={() => dispatch('reset')}>Reset</button>
    </div>
  );
};
```

- In react 17, after the component has finished its initial render, the state value is zero, and then when i now click on the reset button which again sets the state value to zero react will not re-render the component
- Thus, ` console.log('UseReducer Render');` is printed only once.
- But after updating version to 18, whenever i click reset button, ` console.log('UseReducer Render');` is printed 
- I used same code but, result is different
- So i want to know why component is rendered when same state is passed to useReducer  in React 18.
- Comparing useState, using useState hook, when same state is passed, component is not re-renderd in react 17 and react 18.
",Support
https://github.com/facebook/react/issues/24627,24627,Bug: @types/react^18 useDeferredValue JSDoc outdated,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-05-27T01:03:22Z,2022-05-28T10:52:42Z,2022-05-28T10:52:42Z,NONE,not_planned,,"> Apologies in advance for potential wrong category of the issue, but the documentation issue seems to link to the `reactjs.org` repo which is even more unrelated to the actual problem.

<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: `^18.0.0` (`18.0.0`)

## The current behavior
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/19b70b2c6cbd626b1f861d4eef0954b0bf3fa5a5/types/react/index.d.ts#L1119-L1121 currently still references
> Returns a deferred version of the value that may “lag behind” it for at most `timeoutMs`.

which is outdated due to the fact `timeoutMs` is [already removed](https://github.com/facebook/react/pull/19703).

## The expected behavior
It shows the correct documentation JSDoc as mentioned in [the official React documentation](https://17.reactjs.org/docs/concurrent-mode-reference.html#usedeferredvalue)
> Returns a deferred version of the value that may “lag behind” it.
",Other
https://github.com/facebook/react/issues/24674,24674,[DevTools Bug]: Warning: Internal React error: Expected static flag was missing. Please notify the React team.,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,0,2022-06-05T03:26:15Z,2022-06-05T05:48:45Z,2022-06-05T05:48:45Z,NONE,not_planned,,"### Website or app

https://codepen.io/alejozarate/pen/zYRLKww

### Repro steps

The component is successfully rendered with all the interactions working properly.

As far as I can tell, the error is only shown in the console. The traceback point to the line 15 of the codepen:

const _ahr = await SContract.methods.rewardPerHour().call();

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/24708,24708,Bug: Strict mode rendering twice causing the checkbox to deselect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-06-11T09:16:55Z,2022-06-11T11:31:54Z,2022-06-11T11:31:54Z,NONE,completed,,"I am displaying checkboxes list and upon clicking checkbox, changing the value to opposite of previous value

React version: 18.1.0

## Steps To Reproduce

1. Open Stackblitz and try selecting checkboxes, checkboxes don't get selected

The issue is with this logic
```typescript
currentCategory.selected = !currentCategory.selected;
```
I check the previous value of checkbox and assign the opposite of it, in 2nd render this will deselect the selected checkbox

I can solve the problem by removing strict mode, but it is recommended to use strict mode, then how do I solve the problem?

Link to code example:
https://stackblitz.com/edit/react-ts-wks5wl?file=App.tsx

## The current behavior
Checkboxes get deselected after 2nd rendering

## The expected behavior
Checkboxes should be selected after 2nd rendering
",Support
https://github.com/facebook/react/issues/24716,24716,Bug: Rendering a variable in jsx within a functional component that is a `bigint` throws type error,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-06-13T05:51:56Z,2022-06-13T17:18:33Z,2022-06-13T17:18:33Z,NONE,not_planned,,"<!--
Rendering a variable in jsx within a functional component that is a `bigint` throws the following error 

`TS2746: This JSX tag's 'children' prop expects a single child of type 'ReactNode', but multiple children were provided.`
-->

React (and ReactDOM) version: `""^18.1.0""`
TypeScript version: `""^4.7.3"",`

## Steps To Reproduce

1. Create this component in a typescript + react + react-dom application
```
function myComponent(score: bigint) {
  return <>
    <div>score: {score} </div>
  </>
}
```
2. See the ``TS2746: This JSX tag's 'children' prop expects a single child of type 'ReactNode', but multiple children were provided.` error.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

Throws type error. Converting the bigint -> string via `.toString()` removes the error


## The expected behavior

Should not throw an error
",Other
https://github.com/facebook/react/issues/24721,24721,Bug: Script included multiple times on this page (Google maps API),"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-06-14T11:01:09Z,2022-06-17T09:44:49Z,2022-06-16T08:09:30Z,NONE,not_planned,,"Hi, 
I'm trying to update react-dom from 17 to the latest (18.1.0). I used [use-places-autocomplete](https://github.com/wellyshen/use-places-autocomplete) previously to autocomplete addresses on a form. Using this package also involves loading a script as follows:

```
const GOOGLE_MAPS_URL = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_PLACES_API_KEY}&libraries=places&callback=initMap`
```

The script is then loaded in a useEffect:
```
  useEffect(() => {
    if (window.initMap) {
      load(GOOGLE_MAPS_URL, function (error) {
        if (error) {
          setIsError(true)
        }
      })
    }
  }, [])
```

And produces the following errors when visiting the page with the form:

> You have included the Google Maps JavaScript API multiple times on this page. This may cause unexpected errors.

> TypeError: Cannot read properties of undefined (reading 'Iv')

And the form field autocomplete now does not work. Does anyone know why this might be?

React version: ""18.1.0""

",Support
https://github.com/facebook/react/issues/24733,24733,Would retirement of IE brings performance benefit in future react version? ,[],closed,FALSE,,3,2022-06-16T01:36:02Z,2022-06-16T14:16:05Z,2022-06-16T14:01:17Z,NONE,completed,,"React version for production first released in 2015, I guess this cause huge gap in performance benchmark between vanilla JS, Solid, Svelte, because React app should guarantee  working in IE environment as well, which means they should consider Virtual DOM, synthetic event for support IE.

would retire of IE could gives performance benefit for future version of react?

",Support
https://github.com/facebook/react/issues/24775,24775,Bug: BROWSER environment variable stopped working after update of react-scripts to v5,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-06-22T12:14:52Z,2022-06-23T12:05:24Z,2022-06-23T12:05:24Z,NONE,not_planned,,"- Since the update to React scripts v5 `BROWSER` env variable stopped working (its usage is described here https://create-react-app.dev/docs/advanced-configuration/) (this also did not work with REACT_APP_ prefix)
- this is very annoying because I switch and restart many times daily for PR reviews, etc. and I use an isolated browser for web development (with a set of various extensions) and different for my company-related logins and work profile (MSEdge with AAD account)

React version:

## Steps To Reproduce

1. create `.env` file
2. define your `BROWSER` variable

```
# example for windows
BROWSER=""C:\Program Files\Google\Chrome Dev\Application\chrome.exe""
# example for debian
BROWSER=google-chrome-unstable
```

4. `npm start` to see which browser opens (system default or the one defined in `.env`)

Link to code example:
https://github.com/dkocich/react-example-repo",Other
https://github.com/facebook/react/issues/24804,24804,SSR performance optimization: cache or bind getters for writing chunks in `react-dom/server`,[],closed,FALSE,,1,2022-06-28T08:21:44Z,2022-06-28T12:50:18Z,2022-06-28T12:50:18Z,NONE,completed,,"In both `renderToPipeableStream` and `renderToReadableStream`, it seems like the function signatures in `ReactServerStreamConfig*` cause a performance issue in JSC and V8:
```ts
export function writeChunk(
  destination: Destination,
  chunk: PrecomputedChunk | Chunk,
): void {
  destination.write(chunk);
}

export function writeChunkAndReturn(
  destination: Destination,
  chunk: PrecomputedChunk | Chunk,
): boolean {
  return !!destination.write(chunk);
}

export function completeWriting(destination: Destination) {
  destination.drain();
}

export function close(destination: Destination) {
  destination.end();
}

export function closeWithError(destination: Destination, error: mixed): void {
  // $FlowFixMe: This is an Error object or the destination accepts other types.
  destination.close(error);
}
```

Specifically, these functions are not being inlined due to getting the property:
- `destination.write`
- `destination.drain`
- `destination.end`

To fix this, instead of the signature being shaped like this:

https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/packages/react-server/src/forks/ReactServerStreamConfig.custom.js#L32-L38

It could be something like this:
```js
// Before:
export const writeChunk = $$$hostConfig.writeChunk;

// After:
export const getWriteChunk = (destination) => {
  // This returns a function
  return $$$$hostConfig.getWriteChunk(destination);
};

// A more real example:
export const getWriteChunk = (destination) => {
   var write = destination.write;
   return (chunk) => {
        return write.call(destination, chunk);
   };
};
```

This would mean that functions like `pushAttribute` would need to be re-created per `destination` (or at least, per unique `stringToChunk` function):

https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/packages/react-dom/src/server/ReactDOMServerFormatConfig.js#L549-L555

JSC profile (`operationGetById`)
<img width=""858"" alt=""image"" src=""https://user-images.githubusercontent.com/709451/176123622-31a2a59e-fb3d-44eb-8daa-ddde6b039bc7.png"">

Node.js 18 profile: (`Builtins_LoadIC`)
<img width=""687"" alt=""image"" src=""https://user-images.githubusercontent.com/709451/176123757-2205c053-f382-43e8-8ce0-8256585b80c8.png"">

This was run on the [fizz fixture](https://github.com/facebook/react/blob/a4bed469697a1e23c398fe80228df31ef6d4b612/fixtures/fizz)
",Other
https://github.com/facebook/react/issues/24874,24874,"[DevTools Bug] Cannot remove node ""1390"" because no matching node was found in the Store.","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,2,2022-07-07T20:18:39Z,2022-07-12T21:41:25Z,2022-07-12T21:41:25Z,NONE,completed,,"### Website or app

https://github.com/OfficielSalah/marsamaroc

### Repro steps

1. create account
2. redirect to verify email page
3. copy otp from email
4. paste it in email page
5. redirect login
6. keep redirecting between login page and verify email page

### How often does this bug happen?

Every time

### DevTools package (automated)

react-devtools-extensions

### DevTools version (automated)

4.24.7-7f673317f

### Error message (automated)

Cannot remove node ""1390"" because no matching node was found in the Store.

### Error call stack (automated)

```text
at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:26516:43
    at bridge_Bridge.emit (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24434:22)
    at chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:24603:14
    at listener (chrome-extension://fmkadmapgofadopljbjfkapdkoienihi/build/main.js:54566:39)
```


### Error component stack (automated)

_No response_

### GitHub query string (automated)

```text
https://api.github.com/search/issues?q=Cannot remove node  because no matching node was found in the Store. in:title is:issue is:open is:public label:""Component: Developer Tools"" repo:facebook/react
```
",Other
https://github.com/facebook/react/issues/24923,24923,[Proposal/Discussion]: Opposite of `setError()`,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,2,2022-07-13T19:40:42Z,2022-07-22T09:08:32Z,2022-07-22T09:08:26Z,NONE,not_planned,,"Currently, to remove previously set erros, one uses `setError(null)` or similar. This seems like a flawed design choice. I'd like to propose adding something to set the error state back to default. This could be done with `clearError()`, `resetError()`, `unsetError()`, or really lots of different things",Support
https://github.com/facebook/react/issues/24938,24938,Use of styled components ?,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-07-15T22:35:48Z,2022-07-16T07:43:51Z,2022-07-16T07:43:41Z,NONE,not_planned,,,Support
https://github.com/facebook/react/issues/24944,24944,"Bug: Initial render happens twice, causes NS_BINDING_ABORTED errors ","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-07-17T07:19:37Z,2022-07-19T17:18:22Z,2022-07-19T17:18:22Z,NONE,completed,,"React is rendering a component twice when it creates it (is my assumption). This results in `NS_BINDING_ABORTED` errors in Firefox if you're trying to render something like an image. The errors appear in the network log and seem benign, but they clog up the logs and it's not a good look.

You can verify the double render is happening by adding a `console.log` to the component. 

On the first render, Firefox starts fetching the resource. When the second render happens, I'm wondering if the DOM element is different, because Firefox is cancelling the fetch. If the DOM element is removed, Firefox has no reason to continue fetching the resource, so it cancels it. A more common scenario for `NS_BINDING_ABORTED` is navigating away from a page that's still loading.

I found by using `useEffect` and `useState` I can avoid the error by not trying to fetch the image when the component is initially created. Basically, once the component is ready, `useEffect` is called and stores the URL as state, and the `img` element uses the state as the `src`.

React version: 18.2

## Steps To Reproduce

1. Use latest Firefox
2. Open repro sandbox: https://codesandbox.io/s/loving-thompson-ixcf3l?file=/src/App.js
3. Open network devtool, click disable cache, set `Filter URLs` to `github` (the image is my github avatar)
4. Refresh the sandbox view
5. Notice two network entries where one has a NS_BINDING_ABORTED error
6. Uncomment line 16, refresh sandbox view
7. Check network tab, you should see a new non-cached fetch with no error

I rendered `Bad()` 3 times, switched to rendering `Good()`, and rendered 3 more times. Note the `initiator` column.
![image](https://user-images.githubusercontent.com/2302541/179388032-4b32272a-ff19-4e6d-9633-8e778ec089ad.png)

",Support
https://github.com/facebook/react/issues/24956,24956,New,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2022-07-19T21:16:58Z,2022-07-20T15:26:49Z,2022-07-20T15:26:43Z,NONE,not_planned,,,Other
https://github.com/facebook/react/issues/24968,24968,React,[],closed,FALSE,,0,2022-07-21T05:50:00Z,2022-07-21T05:50:09Z,2022-07-21T05:50:09Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/24996,24996,"[DevTools Bug]: ""open in editor"" not working for vscode remote files","[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":620368407,""node_id"":""MDU6TGFiZWw2MjAzNjg0MDc="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information"",""name"":""Resolution: Needs More Information"",""color"":""fffde7"",""default"":false,""description"":null},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,1,2022-07-27T06:25:25Z,2022-07-27T06:25:42Z,2022-07-27T06:25:42Z,NONE,completed,Linrstudio,"### Website or app

empty

### Repro steps

/data/home/xxxx/src/test.tsx

1. Inspect component
2. User clicks ""open in editor""
3. file not found

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/25036,25036,useSyncExternalStoreWithSelector not take into account the snapshot of mutability,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,5,2022-08-03T17:25:40Z,2022-08-14T16:06:21Z,2022-08-14T16:06:21Z,NONE,completed,,"https://github.com/facebook/react/blob/9fcaf88d58cfd942e2fdd303ae8291dbf4828969/packages/use-sync-external-store/src/useSyncExternalStoreWithSelector.js#L70-L91

Line 73 doesn't take into account the snapshot of mutability.


While use yjs's YDoc as a External Store.
```
const useYSelector = <Result>(
  selector: (store: Doc | null) => Result,
  options?: {
  }
) => {
  const yDoc = useYDoc();

  return useSyncExternalStoreWithSelector(
    (onStoreChange) => {
      const listener = (value: any) => {
        onStoreChange();
      };
      yDoc?.on(""update"", listener);
      return () => {
        yDoc?.off(""update"", listener);
      };
    },
    () => yDoc,
    () => yDoc,
    selector
  );
};
```

Since YDoc is mutable, under the judgment of line 73, it will directly return a prevSelection",Support
https://github.com/facebook/react/issues/25047,25047,Bug: Functions in initial state keep executing when updating state,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,2,2022-08-05T06:53:11Z,2022-08-05T08:44:15Z,2022-08-05T08:44:15Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.0.0 / 18.1.0

## Steps To Reproduce

1. Create an state which calls a function for get initial state, add to this function a console.log()
2. Update the state with setState
3. You will see that this function is executing everytime that you update state
4. Happens with and without StrictMode, with plain states (like numbers, strings) and also with objects.
5. Also happens if you separate initialValue in a variable which calls a function and then use it inside state

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/charming-grothendieck-cg1ev0?file=/src/App.js
Open console and check console.logs

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
The function is executed as many times as the state is updated, this could be a performance problem for the application and it is annoying to debug some things.

## The expected behavior
The function should only be called when the state is initialized
",Support
https://github.com/facebook/react/issues/25059,25059,realease all tags to object https://github.com/facebook/,[],closed,FALSE,,0,2022-08-07T20:04:38Z,2022-08-09T12:55:25Z,2022-08-09T12:49:50Z,NONE,not_planned,,Realease now and update to Android 13,Other
https://github.com/facebook/react/issues/25061,25061,Bug: useState inside pure JavaScript/TypeScript class violates rules of hooks,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1249821345,""node_id"":""MDU6TGFiZWwxMjQ5ODIxMzQ1"",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules"",""name"":""Component: ESLint Rules"",""color"":""f7afdb"",""default"":false,""description"":""""}]",closed,FALSE,,8,2022-08-07T23:29:51Z,2022-08-26T11:03:30Z,2022-08-26T11:03:30Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.x

## Steps To Reproduce

1. use the following code in React project 
2. see a compilation error

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

```
class ThemeService {
  private _theme: any;
  private _setTheme: any;
  constructor() {
    const [theme, setTheme] = useState(""Red"");
    this._theme = theme;
    this._setTheme = setTheme;
  }

  get theme(): string {
    return this._theme;
  }

  ToggleTheme() {
    this._setTheme(this._theme === ""Red"" ? ""Blue"" : ""Red"");
  }
}

```

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
above usage generates the following compilation error

ERROR in [eslint] 
src/App.tsx
  Line 8:31:  React Hook ""useState"" cannot be called in a class component. React Hooks must be called in a React function component or a custom React Hook function

## The expected behavior
I understand that the class Component has diff state management so ""useState"" is not allowed inside the class-based react component but I am not sure why usage inside the pure class is restricted. 
",Support
https://github.com/facebook/react/issues/25064,25064,"Bug: React-refresh aka Fast refresh hot loader for react, crashes my module build if jest is installed.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-08-08T10:17:53Z,2022-08-11T14:07:03Z,2022-08-11T14:07:03Z,NONE,completed,,"# 🐛 bug report

Npm install jest with my current build gives me a module build error that I cannot fix, or have been trying to fix for a week now.

![Screenshot 2022-08-08 at 11 50 43](https://user-images.githubusercontent.com/64898719/183390718-b43c9ed2-e059-4d7e-b756-0e473255c2e2.png)

The bug also occurs if I use npm audit fix --force on my build without having jest installed. 
![Screenshot 2022-08-08 at 12 14 32](https://user-images.githubusercontent.com/64898719/183395575-1786e2f0-d448-43dd-af35-3f80e586c5c7.png)

## 🎛 Configuration (.babelrc, package.json, cli command)

I use react-refresh aka Fast refresh, I have found it very difficult using this, mostly because its in beta or no official v1 version and also the setup seems so weird, especially because the other hot loaders is not deprecated...

```Babel.config.js
{
const { NODE_ENV } = process.env

module.exports = (api) => {
    api.cache.using(() => process.env.NODE_ENV)
    return {
        presets: [
            [
                '@babel/preset-env',
                {
                    modules: 'auto',
                    targets: {
                        browsers: [
                            'last 2 Chrome versions',
                            'last 2 Firefox versions',
                            'last 2 Safari versions'
                        ]
                    }
                }
            ],
            [
                '@babel/preset-react',
                {
                    runtime: 'automatic'
                }
            ]
        ],
        plugins: [
            '@babel/plugin-proposal-class-properties',
            '@babel/plugin-transform-runtime',
            !api.env('production') ? 'react-refresh/babel' : ''
        ]
    }
}

}
´´´

```package.json
{
{
  ""author"": {
    ""name"": ""Khalil Abuawad"",
    ""url"": ""https://lat-samband.no""
  },
  ""keywords"": [
    ""react"",
    ""reactjs"",
    ""webpack"",
    ""boilerplate"",
    ""tailwind""
  ],
  ""license"": ""MIT"",
  ""name"": ""lat-samband"",
  ""version"": ""1.0.1"",
  ""description"": ""Webpack 6 boilerplate with React 17, Tailwind 3, using babel, sass, with HMR and an optimized production build"",
  ""dependencies"": {
    ""@reduxjs/toolkit"": ""^1.8.0"",
    ""react"": ""^18.2.0"",
    ""react-datepicker"": ""^4.8.0"",
    ""react-dom"": ""^18.2.0"",
    ""react-redux"": ""^7.2.6"",
    ""redux"": ""^4.1.2"",
    ""redux-saga"": ""^1.1.3""
  },
  ""main"": ""index.js"",
  ""scripts"": {
    ""start"": ""webpack serve --config config/webpack.dev.js"",
    ""build"": ""NODE_ENV=production webpack --config config/webpack.prod.js"",
    ""predeploy"": ""npm run build"",
    ""lint"": ""eslint src/**/*.js""
  },
  ""devDependencies"": {
    ""@babel/core"": ""^7.15.0"",
    ""@babel/plugin-proposal-class-properties"": ""^7.14.5"",
    ""@babel/plugin-transform-runtime"": ""^7.15.0"",
    ""@babel/preset-env"": ""^7.15.0"",
    ""@babel/preset-react"": ""^7.14.5"",
    ""@pmmmwh/react-refresh-webpack-plugin"": ""^0.4.3"",
    ""@testing-library/jest-dom"": ""^5.16.5"",
    ""@testing-library/react"": ""^13.3.0"",
    ""autoprefixer"": ""^10.3.1"",
    ""babel-eslint"": ""^10.1.0"",
    ""babel-loader"": ""^8.2.2"",
    ""clean-webpack-plugin"": ""*"",
    ""copy-webpack-plugin"": ""^9.0.1"",
    ""css-loader"": ""^6.2.0"",
    ""css-minimizer-webpack-plugin"": ""^3.0.2"",
    ""eslint"": ""^7.32.0"",
    ""eslint-config-prettier"": ""^8.3.0"",
    ""eslint-import-resolver-alias"": ""^1.1.2"",
    ""eslint-plugin-babel"": ""^5.3.1"",
    ""eslint-plugin-import"": ""^2.24.0"",
    ""eslint-plugin-prettier"": ""^3.4.0"",
    ""eslint-plugin-react"": ""^7.24.0"",
    ""eslint-plugin-react-hooks"": ""^4.2.0"",
    ""html-webpack-plugin"": ""^5.3.2"",
    ""jest"": ""^28.1.3"",
    ""jest-environment-jsdom"": ""^28.1.3"",
    ""lint-staged"": ""^11.1.2"",
    ""mini-css-extract-plugin"": ""^2.2.0"",
    ""postcss"": ""^8.3.6"",
    ""postcss-import"": ""^14.0.2"",
    ""postcss-loader"": ""^6.1.1"",
    ""prettier"": ""^2.3.2"",
    ""react-refresh"": ""^0.9.0"",
    ""react-router-dom"": ""^6.2.2"",
    ""sass"": ""^1.49.9"",
    ""sass-loader"": ""^12.1.0"",
    ""style-loader"": ""^3.2.1"",
    ""tailwindcss"": ""^3.0.23"",
    ""terser-webpack-plugin"": ""^5.1.4"",
    ""webpack"": ""^5.49.0"",
    ""webpack-cli"": ""^4.7.2"",
    ""webpack-dev-server"": ""^3.11.2"",
    ""webpack-merge"": ""^5.8.0""
  }
}

}
´´´

```webpack.dev.js
{
  const path = require('path')
const { merge } = require('webpack-merge')
const common = require('./webpack.common.js')
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin')
const tailwindcss = require('tailwindcss')
const autoprefixer = require('autoprefixer') // help tailwindcss to work

module.exports = merge(common, {
    // Set the mode to development or production
    mode: 'development',

    // Control how source maps are generated
    devtool: 'inline-source-map',

    // Spin up a server for quick development
    devServer: {
        historyApiFallback: true,
        contentBase: path.resolve(__dirname, '../public/dist'),
        open: false,
        compress: true,
        hot: true,
        port: 3000,
        proxy: {
            '/api/login-step1.php': 'http://localhost:7979/api/login-step1.php',
            '/api/login-step2.php': 'http://localhost:7979/api/login-step2.php',
            '/api/isLoggedIn.php': 'http://localhost:7979/api/isLoggedIn.php',
            '/api/logout.php': 'http://localhost:7979/api/logout.php',
            '/api/oppdragsLister.php':
                'http://localhost:7979/api/oppdragsLister.php',
            '/api/oppdrag.php': 'http://localhost:7979/api/oppdrag.php',
            '/api/evaluerOppdrag.php':
                'http://localhost:7979/api/evaluerOppdrag.php',
            '/api/filteroptions.php':
                'http://localhost:7979/api/filteroptions.php'
        }
    },
    module: {
        rules: [
            // Styles: Inject CSS into the head with source maps
            {
                test: /\.(css|scss|sass)$/,
                use: [
                    'style-loader',
                    'css-loader',
                    'sass-loader',
                    {
                        loader: 'postcss-loader', // postcss loader needed for tailwindcss
                        options: {
                            postcssOptions: {
                                ident: 'postcss',
                                plugins: [tailwindcss, autoprefixer]
                            }
                        }
                    }
                ]
            },
            {
                test: /\.[js]sx?$/,
                exclude: /node_modules/,
                use: [
                    // ... other loaders
                    {
                        loader: require.resolve('babel-loader'),
                        options: {
                            // ... other options
                            plugins: [
                                // ... other plugins
                                require.resolve('react-refresh/babel')
                            ].filter(Boolean)
                        }
                    }
                ]
            }
        ]
    },
    plugins: [
        // new webpack.HotModuleReplacementPlugin(),
        new ReactRefreshWebpackPlugin()
    ].filter(Boolean)
})

}
```

## 🌍 Your Environment

| Software         | Version(s) |
| ---------------- | ---------- |
| Webpack           |  ""^5.49.0""  |
| Node             |  v16.13.0  |
| npm/Yarn         |  8.1.0 |
| React        |  ""^18.2.0"" |
| Operating System |  macOS Big Sur 11.2.2 |

",Other
https://github.com/facebook/react/issues/25126,25126,Bug: HMR only force reinitialize current component but not reinitialize descendant components ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-08-22T03:19:30Z,2022-09-03T16:49:40Z,2022-09-03T16:49:40Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

`App Component`
```
import { useEffect } from ""react"";
import ""./styles.css"";
import { Child } from ""./Child"";

function App() {
  const title = ""title1"";

  useEffect(() => {
    console.log(""init Parent"", title);
  }, []);

  return (
    <div>
      <div>Parent: {title} </div>
      <Child title={title} />
    </div>
  );
}

export default App;
```
`Child Component`
```
import { useMemo } from ""react"";

export const Child = (props) => {
  const Title = useMemo(() => {
    console.log(""init Child"", props.title);
    return <div>Child: {props.title}</div>;
  }, []);

  return Title;
};
```

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:
https://codesandbox.io/s/loving-franklin-4f8fcl

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
Change the title of the App component from title1 to title2, the App component is initialized, but the Child component is not initialized，the log is like this
```
init Child title1 
init Parent title1 
// change the title, only parent initialized
init Parent title2
```

## The expected behavior
Child components are also initialized",Support
https://github.com/facebook/react/issues/25141,25141,Please reopen issue,[],closed,FALSE,,0,2022-08-25T11:31:55Z,2022-09-09T11:57:26Z,2022-09-09T11:57:26Z,NONE,completed,,"https://github.com/facebook/react/issues/12811 - this issue was marked as stale and closed, but it's still relevant. Please reopen. Thank you.",Other
https://github.com/facebook/react/issues/25234,25234,[DevTools Bug]: react-devtools standalone launching and quitting after 2 seconds with no errors on Ubuntu 22.04,"[{""id"":40929151,""node_id"":""MDU6TGFiZWw0MDkyOTE1MQ=="",""url"":""https://api.github.com/repos/facebook/react/labels/Type:%20Bug"",""name"":""Type: Bug"",""color"":""b60205"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":710573595,""node_id"":""MDU6TGFiZWw3MTA1NzM1OTU="",""url"":""https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools"",""name"":""Component: Developer Tools"",""color"":""fbca04"",""default"":false,""description"":null}]",closed,FALSE,,4,2022-09-11T10:20:47Z,2022-10-20T22:39:06Z,2022-09-13T18:24:58Z,NONE,completed,,"### Website or app

https://www.facebook.com

### Repro steps

Run `react-devtools` in the terminal.

An empty window appears for maybe 2 seconds and then disappears. The terminal doesn't show any messages whatsoever.

There is another issue here regarding react-devtools failing silently on Debian, where the submitter alleged that it was related to insufficient permissions to run electron. Not sure if that's related to this issue, but I can run electron just fine, it's just react-devtools that are failing.

OS is Ubuntu 22.04 (Kubuntu), Node is v16.16.0, react-devtools 4.25.0

(Updated to add URL)

### How often does this bug happen?

Every time

### DevTools package (automated)

_No response_

### DevTools version (automated)

_No response_

### Error message (automated)

_No response_

### Error call stack (automated)

_No response_

### Error component stack (automated)

_No response_

### GitHub query string (automated)

_No response_",Other
https://github.com/facebook/react/issues/25245,25245,"I have issue  React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.","[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-09-12T18:35:07Z,2022-09-12T19:28:16Z,2022-09-12T19:28:16Z,NONE,completed,,"Plz help me to solve this 
### This is my feed.jsx file

import React,{useState,useEffect} from 'react';
import { useParams } from 'react-router-dom';


import { client } from '../client';
import { feedQuery, searchQuery } from '../utils/data';

import MasonryLayout from './MasonryLayout';
import Spinner from './Spinner';


const Feed = () => {
  const [pins, setPins] = useState();
  const [loading, setLoading] = useState(false);
  const { categoryId } = useParams();

  useEffect(() => {
    if (categoryId) {
      setLoading(true);
      const query = searchQuery(categoryId);
      client.fetch(query).then((data) => {
        setPins(data);
        setLoading(false);
      });
    } else {
      setLoading(true);

      client.fetch(feedQuery).then((data) => {
        setPins(data);
        setLoading(false);
      });
    }
  }, [categoryId]);

          

   if (loading) return <Spinner message=""We are adding new ideas to your feed!"" />

   return (
    <div>
    Feed
    </div>
   )
}

export default Feed


### This is MasonryLayout.jsx file 
import React from 'react';
import  Masonry from 'react-masonry-css';
import Pin from './Pin';

const breakpointObj = {
  default: 4,
  3000: 6,
  2000: 5,
  1200: 3,
  1000: 2,
  500: 1,
};

const MasonryLayout= ({ pins })=>  (
  
  <Masonry className=""flex animate-slide-fwd"" breakpointCols={breakpointObj}>
    {pins?.map((pin) => <Pin key={pin._id} pin={pin} className=""w-max"" />)}
  </Masonry>

  

);



export default  MasonryLayout;
###     When i put simply ""Feed"" in return in feed.jsx file it is okay but when i put 
**  {pins && 
        <MasonryLayout pins={pins} />
      }** 
### It show empty page

![Screenshot from 2022-09-12 21-46-09](https://user-images.githubusercontent.com/100952840/189730151-32dddfb9-0ce8-483d-8630-e9f8b20d7b
![Screenshot from 2022-09-12 21-47-06](https://user-images.githubusercontent.com/100952840/189730203-96e1ce96-80b5-460c-8908-6639b5ccd915.png)
03.png)


![Screenshot from 2022-09-12 21-46-09](https://user-images.githubusercontent.com/100952840/189730446-0d01f07d-0863-48e5-a368-2095c11a26d6.png)


",Support
https://github.com/facebook/react/issues/25250,25250,Error,[],closed,FALSE,,1,2022-09-13T13:30:14Z,2022-09-15T00:14:53Z,2022-09-15T00:14:53Z,NONE,not_planned,,https://github.com/fAndreuzzi/TUI-ConsoleLauncher/blob/master/settings.gradle,Other
https://github.com/facebook/react/issues/25263,25263,Bug: It seems that the concurrent mode does not work as expect,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,4,2022-09-14T09:54:58Z,2022-09-14T16:15:07Z,2022-09-14T14:37:09Z,NONE,completed,,"React version: 17.0.1

## Steps To Reproduce

Here I use a while loop to simulate a long task.When I click on the div, the animation stops

```jsx
import React from ""react"";
import ReactDOM from ""react-dom"";

const NumberComp = ({ count }) => {
  const start = new Date().getTime();
// Simulate time-consuming tasks
  while (new Date().getTime() - start < 1) {}
  return count;
};
const arr = [];
for (let i = 0; i < 1000; i++) {
  arr.push(i);
}
class Home extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }

  render() {
    return (
      <>
        <div
          onClick={() => this.setState({ count: this.state.count + 1 })}
          className=""animation""
        >{`count：${this.state.count}`}</div>
        {arr.map((i) => (
          <NumberComp key={i} count={i} />
        ))}
      </>
    );
  }
}

ReactDOM.unstable_createRoot(document.getElementById(""root"")).render(<Home />);

```
the css
```css
.animation {
    display: block;
     width: 100px;
     height: 100px;
     background: lightyellow;
     animation: myfirst 5s;
     animation-iteration-count: infinite;
}
@keyframes myfirst {
   from {
        width: 30px;
        height: 30px;
        border-radius: 0;
  }
      to {
        width: 200px;
        height: 200px;
        border-radius: 50%;
      }
}
```

## The current behavior

When I click on the div, the animation stops.And the performance is as follows:

<img width=""1434"" alt=""image"" src=""https://user-images.githubusercontent.com/14917591/190122954-78a155ea-75fb-4bb3-9181-2c00c326706b.png"">

It seems that the concurrent mode does not work

## The expected behavior

Since it's concurrent mode, when I click on the div, the animation shouldn't stop and the page shouldn't freeze",Support
https://github.com/facebook/react/issues/25287,25287,renderToPipeableStream gzip/broli support,[],closed,FALSE,,0,2022-09-17T01:36:51Z,2022-11-05T08:02:26Z,2022-11-05T08:02:26Z,NONE,completed,,"Hi,

I would like to ask if there is any example about how to support gzip using renderToPipeableStream in SSR, i have being searching in stackoverflow and internet and nothing

Regards
",Other
https://github.com/facebook/react/issues/25300,25300,React Lazy Load not working with variable path,"[{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-09-19T18:28:06Z,2022-09-19T20:02:32Z,2022-09-19T20:02:27Z,NONE,not_planned,,"I have the same issue when using Lazy Load with variable path.

if I put the path in the variable, I see ""Can't find the module""

``` 
const filePath = `@pages/general/general`;
const component = React.lazy(() => import(`${filePath}`));
```
but if I put the path directly, it's working 
```
  const component = React.lazy(() => import(""@pages/general/general""));
```

any suggestions?

_Originally posted by https://github.com/facebook/react/issues/16132#issue-467840101",Support
https://github.com/facebook/react/issues/25330,25330,Bug: Unexpected useState behavior on StrictMode,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-09-27T12:22:57Z,2022-09-27T14:56:43Z,2022-09-27T12:30:09Z,NONE,completed,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->
Not sure if this is a bug, but when using `StrictMode` whether it is for production/development build, the callback in a setState `setState(callback)` is correctly called once. But the next call to setState will trigger the callback twice using the example described below.

React version: 18.2.0

## Steps To Reproduce

1. Open https://codesandbox.io/s/recursing-firefly-gwcp3m?file=/src/App.js
2. Click ""Add"" counter will increment to 2
3. Click ""Add"" again, counter will increment to 5 (should be 3)

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example: https://codesandbox.io/s/recursing-firefly-gwcp3m?file=/src/App.js

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior
setState callback is called twice on the 2nd++ setState call

## The expected behavior
setState callback is called once on the 2nd++ setState call
",Other
https://github.com/facebook/react/issues/25444,25444,Bug: React.memo and generics won't work,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-10-07T06:47:01Z,2022-10-07T08:21:46Z,2022-10-07T08:21:46Z,NONE,completed,,"When using `React.memo` and generics in Typescript, there is an issue with props, at-least for me, when providing a function in props.

React version: 18.2.0

## Steps To Reproduce

1. Typescript will complain for props types immediately when compiling Typescript


Link to code example:
https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4Aoc4AOxiSk3STgEkB5MGYCagHgBUAfHADe5OBLhEUAEx4AbAJ5wAbinkBXJAC44-CpKmo51JXHkoARknm6AzjCg0A5hQC+lGnQZNWABRwwOwFhMUNpEzMuGHkdOAcnaldxSQiFZQhObmo7XXYsnhCAbQBdA1TjdPibJAwkGQ4uHl19FIk00wzqAGUajEbs3QAKNU04-gBKOABeYRUIYBl3SjQeBzgAMWB5bwA1YCQAdxm4AQAaQSGwQNzEYhgAOgDMuwB1YBgACwBhT+2ZIh8FjPIIhQRTWaiNpGGAaKDUOBDaGGXgyYAqQTIwySXifACsghE1xeD2isTcvAA9PjMVjsaJiUEHpkmjkHiAUGAhkMWdkznAaDIkAAPCHCJH0yU4ywaGAwHh0qXYgDWSEU0xEgpFHiVurgMEUYCQ0wARDK5TwTYq9XAeN95MA0MqNUMxXBGXZmT0+jABjweQVqA9RloJjqbZJMRHJSJeTwHhZrPJw9Gqeb5dQo3qJmHFVS0RjoRN3BQVmt4FsdvR9kcAKLCyCweonZDoR4gJAgCBDSt7A6HYueWj0RhoZjAm4AJhCUPClU6+o+sXsjhc5Xa87McZyeT9fCEpXXRlkVTsPvqe5aR46W+9sX6geGIfGbvmi2W5FWOQr228J3OlwerorYYE8NzvF8vz-ICvATi805COCMzitCvC9tW-b1o2dAyIqZLGkSNykkuSApti252BqHrMoGdhkYYZ73jhe5UURjG1Mxgb0ZIPC9ExLGESSvE+nubhwJSlJwGwyooIo0KUpig5AA

## The current behavior
Typescript complain about function in props

## The expected behavior
Should not complain

## Manual fix
Can be fixed if doing:
```ts
declare module ""react"" { // augment React types
    function memo<A, B>(Component: (props: A) => B): (props: A) => React.ReactElement | null
    // return type is same as ReturnType<ExoticComponent<any>>
}
```",Other
https://github.com/facebook/react/issues/25451,25451,Bug: Issue with absolute imports in react application,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,5,2022-10-08T11:57:51Z,2022-10-08T13:48:05Z,2022-10-08T12:03:08Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version: 18.2.0

There seems to be an issue with the way that absolute imports are being handled in react 18. Even with a properly configured `tsconfig.json`, some of the absolute imports works but some of them don't (see section The expected behavior). 
For example, I am able to do an absolute import on a type, but the demo crashes when I try to import a function the same way

I have opened this issue because I cannot figure out if the issue is coming from create-react-app or the react official repository.

I have created a reproducible demo available on this [link](https://github.com/Vikmanatus/reactjs-absolute-imports-issue)

## Steps To Reproduce

Clone the repository of this [link](https://github.com/Vikmanatus/reactjs-absolute-imports-issue) and please follow the next steps :

1. Run yarn install
2. Run yarn start

You will see the following error in your browser Module not found: Error: Can't resolve '@/utils'

I have written a small documentation on the README.md of the reproducible issue repo to add some important details

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

https://github.com/Vikmanatus/reactjs-absolute-imports-issue
<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior

An error is thrown saying that @/utils cannot be resolved

`Module not found: Error: Can't resolve '@/utils' in '/Users/someUser/Desktop/SomeFolder/reactjs-absolute-imports-issue/src'`

## The expected behavior

The import of the `makeId` function of this [repo](https://github.com/Vikmanatus/reactjs-absolute-imports-issue) should work with the following absolute import:

```javascript
import { makeid } from ""@/utils"";       // Throws an error
```

The strange thing is that the compiler throws an error when it imports the function but accepts the absolute import of a type 🤔

```javascript
import { FakeObjectType } from ""@/types"";   // No error
```
",Support
https://github.com/facebook/react/issues/25520,25520,Bug: Github pages not displaying my Vite.js app  ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1168115654,""node_id"":""MDU6TGFiZWwxMTY4MTE1NjU0"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect"",""name"":""Resolution: Support Redirect"",""color"":""106099"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-10-20T07:17:50Z,2022-10-21T13:27:14Z,2022-10-21T13:27:07Z,NONE,not_planned,,"Link to code example: https://github.com/claudeMassaad/TENZIES-GAME-REACT-APP

Here's my main and index.html in Vite app:

![Screen Shot 2022-10-20 at 10 16 31 AM](https://user-images.githubusercontent.com/109232112/196881586-b1023f1c-5173-4200-9395-6c346833aec7.png)
![Screen Shot 2022-10-20 at 10 16 45 AM](https://user-images.githubusercontent.com/109232112/196881627-064570e9-e384-40c1-a44a-6879da8eb0e2.png)

## The current behavior
![Screen Shot 2022-10-20 at 10 15 39 AM](https://user-images.githubusercontent.com/109232112/196881433-8e7d367b-4f93-406d-b262-88627627f5b7.png)

 Once i push to my github and then go to the pages feature on github where github generates a link for my web app, the screen is white and i get this error:Failed to load module script: Expected a JavaScript module script but the server responded with a MIME type of ""text/jsx"". Strict MIME type checking is enforced for module scripts per HTML spec.
Now i cant change the name of main.jsx to main.js because Vite requires .jsx extensions.
Any help?

## The expected behavior


I am running a react app created with Vite.js locally and everything works perfectly when i run npm run dev. It should do the same when github generates a link for my website",Support
https://github.com/facebook/react/issues/25531,25531,Bug: e.target.value of <option> differs from actual value,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,3,2022-10-22T02:53:39Z,2022-10-22T03:14:58Z,2022-10-22T03:14:58Z,NONE,completed,,"I created a simple controlled select and populated it with a list of options, one of which contains two consecutive spaces. When I select this option in the select, the synthetic event does not faithfully contain the actual target.value. Instead it has scrubbed out one of the spaces, so in the event handler, I cannot determine which option was actually selected. Yes this should be done by using the value attribute of the option (not the text) but I would like to know what's going on here and if it's a React bug.

React version: 18.2.0

## Steps To Reproduce

1. In the code sandbox, select the ""will  crash"" option of the html select.

Link to code example: https://codesandbox.io/s/intelligent-tharp-53mze0?file=/src/App.js

## The current behavior
e.target.value does not match the actual selected value, one space has been removed

## The expected behavior
e.target.value matches the actual text of the option.
",Other
https://github.com/facebook/react/issues/25589,25589,Bug: Internal React error: Expected static flag was missing. Please notify the React team.,"[{""id"":40929152,""node_id"":""MDU6TGFiZWw0MDkyOTE1Mg=="",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate"",""name"":""Resolution: Duplicate"",""color"":""cccccc"",""default"":false,""description"":null},{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,1,2022-10-31T04:37:59Z,2022-10-31T08:06:51Z,2022-10-31T08:06:44Z,NONE,not_planned,,"After I upgraded the React version of the project from 16.14.0 to 18.2.0, the console reported the following warning after the project started

```
Warning: Internal React error: Expected static flag was missing. Please notify the React team.
```
![image](https://user-images.githubusercontent.com/52249626/198931381-bf4cb492-398d-480a-9d9b-a8576a1aa430.png)

I don't know the specific cause of the bug
",Other
https://github.com/facebook/react/issues/25640,25640,Bug: ,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""}]",closed,FALSE,,0,2022-11-06T11:21:40Z,2022-11-06T11:22:43Z,2022-11-06T11:22:11Z,NONE,completed,,,Other
https://github.com/facebook/react/issues/25647,25647,| Platform | Engine | Arch | Size (bytes) | Diff |,[],closed,FALSE,,0,2022-11-08T06:14:55Z,2022-11-09T14:28:26Z,2022-11-09T14:28:26Z,NONE,not_planned,,"        | Platform | Engine | Arch | Size (bytes) | Diff |
|:---------|:-------|:-----|-------------:|-----:|
| android | hermes | arm64-v8a | 7,066,170 | -7 |
| android | hermes | armeabi-v7a | 6,438,557 | -4 |
| android | hermes | x86 | 7,481,483 | -12 |
| android | hermes | x86_64 | 7,340,888 | -1 |
| android | jsc | arm64-v8a | 8,932,008 | +13 |
| android | jsc | armeabi-v7a | 7,666,372 | +33 |
| android | jsc | x86 | 8,992,394 | +28 |
| android | jsc | x86_64 | 9,471,150 | +29 |

Base commit: 3d9a15da870a75ed76d60d0c9b0d38c351a15003
Branch: main

_Originally posted by @analysis-bot in https://github.com/facebook/react-native/issues/35196#issuecomment-1302809166_
      ",Other
https://github.com/facebook/react/issues/25665,25665,Bug: React.isValidElement( ) Unable to check the hok function component,"[{""id"":155984160,""node_id"":""MDU6TGFiZWwxNTU5ODQxNjA="",""url"":""https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed"",""name"":""Status: Unconfirmed"",""color"":""d4c5f9"",""default"":false,""description"":""A potential issue that we haven't yet confirmed as a bug""},{""id"":1983406161,""node_id"":""MDU6TGFiZWwxOTgzNDA2MTYx"",""url"":""https://api.github.com/repos/facebook/react/labels/Resolution:%20Expected%20Behavior"",""name"":""Resolution: Expected Behavior"",""color"":""8c98d8"",""default"":false,""description"":""""}]",closed,FALSE,,1,2022-11-11T09:27:28Z,2022-11-11T14:30:44Z,2022-11-11T14:30:40Z,NONE,not_planned,,"<!--
  Please provide a clear and concise description of what the bug is. Include
  screenshots if needed. Please test using the latest version of the relevant
  React packages to make sure your issue has not already been fixed.
-->

React version:

## Steps To Reproduce

1.
2.

<!--
  Your bug will get fixed much faster if we can run your code and it doesn't
  have dependencies other than React. Issues without reproduction steps or
  code examples may be immediately closed as not actionable.
-->

Link to code example:

<!--
  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a
  repository on GitHub, or provide a minimal code example that reproduces the
  problem. You may provide a screenshot of the application if you think it is
  relevant to your bug report. Here are some tips for providing a minimal
  example: https://stackoverflow.com/help/mcve.
-->

## The current behavior


## The expected behavior



React.isValidElement( ) Unable to check the hook function component ， 

With the hook function component, babel, which is compiled into es5 code, is sometimes not executed with createElement, but mutated into a function, Like the compiled code in the image below。
![123456](https://user-images.githubusercontent.com/20044598/201306350-c3dc9be6-3afb-4ef0-bc1d-6c29bcd35d7c.jpg)

It's not compiled like this
<img width=""972"" alt=""image"" src=""https://user-images.githubusercontent.com/20044598/201306838-b1d072b9-2b8d-4461-bc7c-15d648a79bb8.png"">

But rendering is fine。

But my react route requires the isValidElement api，Because I want to know whether the current variable is a component or a function, and choose a different way to execute it。
the reason for this problem is that my imported component is in promise mode.

If you have time, can you help me look at this bug？

Here's how I wrote react-lazy-router-dom  https://github.com/qq281113270/react-lazy-router-dom  ，I need this isValidElement to determine whether it's a component or a function 。

In addition, if you think I wrote react-lazy-router-dom well, could you please help me make a friendship link











",Support
